// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.sagemaker.inputs;

import com.pulumi.aws.sagemaker.inputs.ModelContainerGetArgs;
import com.pulumi.aws.sagemaker.inputs.ModelInferenceExecutionConfigGetArgs;
import com.pulumi.aws.sagemaker.inputs.ModelPrimaryContainerGetArgs;
import com.pulumi.aws.sagemaker.inputs.ModelVpcConfigGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ModelState extends com.pulumi.resources.ResourceArgs {

    public static final ModelState Empty = new ModelState();

    /**
     * The Amazon Resource Name (ARN) assigned by AWS to this model.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Specifies containers in the inference pipeline. If not specified, the `primary_container` argument is required. Fields are documented below.
     * 
     */
    @Import(name="containers")
    private @Nullable Output<List<ModelContainerGetArgs>> containers;

    public Optional<Output<List<ModelContainerGetArgs>>> containers() {
        return Optional.ofNullable(this.containers);
    }

    /**
     * Isolates the model container. No inbound or outbound network calls can be made to or from the model container.
     * 
     */
    @Import(name="enableNetworkIsolation")
    private @Nullable Output<Boolean> enableNetworkIsolation;

    public Optional<Output<Boolean>> enableNetworkIsolation() {
        return Optional.ofNullable(this.enableNetworkIsolation);
    }

    /**
     * A role that SageMaker can assume to access model artifacts and docker images for deployment.
     * 
     */
    @Import(name="executionRoleArn")
    private @Nullable Output<String> executionRoleArn;

    public Optional<Output<String>> executionRoleArn() {
        return Optional.ofNullable(this.executionRoleArn);
    }

    /**
     * Specifies details of how containers in a multi-container endpoint are called. see Inference Execution Config.
     * 
     */
    @Import(name="inferenceExecutionConfig")
    private @Nullable Output<ModelInferenceExecutionConfigGetArgs> inferenceExecutionConfig;

    public Optional<Output<ModelInferenceExecutionConfigGetArgs>> inferenceExecutionConfig() {
        return Optional.ofNullable(this.inferenceExecutionConfig);
    }

    /**
     * The name of the model (must be unique). If omitted, this provider will assign a random, unique name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The primary docker image containing inference code that is used when the model is deployed for predictions.  If not specified, the `container` argument is required. Fields are documented below.
     * 
     */
    @Import(name="primaryContainer")
    private @Nullable Output<ModelPrimaryContainerGetArgs> primaryContainer;

    public Optional<Output<ModelPrimaryContainerGetArgs>> primaryContainer() {
        return Optional.ofNullable(this.primaryContainer);
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * Specifies the VPC that you want your model to connect to. VpcConfig is used in hosting services and in batch transform.
     * 
     */
    @Import(name="vpcConfig")
    private @Nullable Output<ModelVpcConfigGetArgs> vpcConfig;

    public Optional<Output<ModelVpcConfigGetArgs>> vpcConfig() {
        return Optional.ofNullable(this.vpcConfig);
    }

    private ModelState() {}

    private ModelState(ModelState $) {
        this.arn = $.arn;
        this.containers = $.containers;
        this.enableNetworkIsolation = $.enableNetworkIsolation;
        this.executionRoleArn = $.executionRoleArn;
        this.inferenceExecutionConfig = $.inferenceExecutionConfig;
        this.name = $.name;
        this.primaryContainer = $.primaryContainer;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.vpcConfig = $.vpcConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelState $;

        public Builder() {
            $ = new ModelState();
        }

        public Builder(ModelState defaults) {
            $ = new ModelState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder containers(@Nullable Output<List<ModelContainerGetArgs>> containers) {
            $.containers = containers;
            return this;
        }

        public Builder containers(List<ModelContainerGetArgs> containers) {
            return containers(Output.of(containers));
        }

        public Builder containers(ModelContainerGetArgs... containers) {
            return containers(List.of(containers));
        }

        public Builder enableNetworkIsolation(@Nullable Output<Boolean> enableNetworkIsolation) {
            $.enableNetworkIsolation = enableNetworkIsolation;
            return this;
        }

        public Builder enableNetworkIsolation(Boolean enableNetworkIsolation) {
            return enableNetworkIsolation(Output.of(enableNetworkIsolation));
        }

        public Builder executionRoleArn(@Nullable Output<String> executionRoleArn) {
            $.executionRoleArn = executionRoleArn;
            return this;
        }

        public Builder executionRoleArn(String executionRoleArn) {
            return executionRoleArn(Output.of(executionRoleArn));
        }

        public Builder inferenceExecutionConfig(@Nullable Output<ModelInferenceExecutionConfigGetArgs> inferenceExecutionConfig) {
            $.inferenceExecutionConfig = inferenceExecutionConfig;
            return this;
        }

        public Builder inferenceExecutionConfig(ModelInferenceExecutionConfigGetArgs inferenceExecutionConfig) {
            return inferenceExecutionConfig(Output.of(inferenceExecutionConfig));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder primaryContainer(@Nullable Output<ModelPrimaryContainerGetArgs> primaryContainer) {
            $.primaryContainer = primaryContainer;
            return this;
        }

        public Builder primaryContainer(ModelPrimaryContainerGetArgs primaryContainer) {
            return primaryContainer(Output.of(primaryContainer));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder vpcConfig(@Nullable Output<ModelVpcConfigGetArgs> vpcConfig) {
            $.vpcConfig = vpcConfig;
            return this;
        }

        public Builder vpcConfig(ModelVpcConfigGetArgs vpcConfig) {
            return vpcConfig(Output.of(vpcConfig));
        }

        public ModelState build() {
            return $;
        }
    }

}
