// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.mq.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetBrokerLdapServerMetadata extends com.pulumi.resources.InvokeArgs {

    public static final GetBrokerLdapServerMetadata Empty = new GetBrokerLdapServerMetadata();

    @Import(name="hosts", required=true)
    private List<String> hosts;

    public List<String> hosts() {
        return this.hosts;
    }

    @Import(name="roleBase", required=true)
    private String roleBase;

    public String roleBase() {
        return this.roleBase;
    }

    @Import(name="roleName", required=true)
    private String roleName;

    public String roleName() {
        return this.roleName;
    }

    @Import(name="roleSearchMatching", required=true)
    private String roleSearchMatching;

    public String roleSearchMatching() {
        return this.roleSearchMatching;
    }

    @Import(name="roleSearchSubtree", required=true)
    private Boolean roleSearchSubtree;

    public Boolean roleSearchSubtree() {
        return this.roleSearchSubtree;
    }

    @Import(name="serviceAccountPassword", required=true)
    private String serviceAccountPassword;

    public String serviceAccountPassword() {
        return this.serviceAccountPassword;
    }

    @Import(name="serviceAccountUsername", required=true)
    private String serviceAccountUsername;

    public String serviceAccountUsername() {
        return this.serviceAccountUsername;
    }

    @Import(name="userBase", required=true)
    private String userBase;

    public String userBase() {
        return this.userBase;
    }

    @Import(name="userRoleName", required=true)
    private String userRoleName;

    public String userRoleName() {
        return this.userRoleName;
    }

    @Import(name="userSearchMatching", required=true)
    private String userSearchMatching;

    public String userSearchMatching() {
        return this.userSearchMatching;
    }

    @Import(name="userSearchSubtree", required=true)
    private Boolean userSearchSubtree;

    public Boolean userSearchSubtree() {
        return this.userSearchSubtree;
    }

    private GetBrokerLdapServerMetadata() {}

    private GetBrokerLdapServerMetadata(GetBrokerLdapServerMetadata $) {
        this.hosts = $.hosts;
        this.roleBase = $.roleBase;
        this.roleName = $.roleName;
        this.roleSearchMatching = $.roleSearchMatching;
        this.roleSearchSubtree = $.roleSearchSubtree;
        this.serviceAccountPassword = $.serviceAccountPassword;
        this.serviceAccountUsername = $.serviceAccountUsername;
        this.userBase = $.userBase;
        this.userRoleName = $.userRoleName;
        this.userSearchMatching = $.userSearchMatching;
        this.userSearchSubtree = $.userSearchSubtree;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetBrokerLdapServerMetadata defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetBrokerLdapServerMetadata $;

        public Builder() {
            $ = new GetBrokerLdapServerMetadata();
        }

        public Builder(GetBrokerLdapServerMetadata defaults) {
            $ = new GetBrokerLdapServerMetadata(Objects.requireNonNull(defaults));
        }

        public Builder hosts(List<String> hosts) {
            $.hosts = hosts;
            return this;
        }

        public Builder hosts(String... hosts) {
            return hosts(List.of(hosts));
        }

        public Builder roleBase(String roleBase) {
            $.roleBase = roleBase;
            return this;
        }

        public Builder roleName(String roleName) {
            $.roleName = roleName;
            return this;
        }

        public Builder roleSearchMatching(String roleSearchMatching) {
            $.roleSearchMatching = roleSearchMatching;
            return this;
        }

        public Builder roleSearchSubtree(Boolean roleSearchSubtree) {
            $.roleSearchSubtree = roleSearchSubtree;
            return this;
        }

        public Builder serviceAccountPassword(String serviceAccountPassword) {
            $.serviceAccountPassword = serviceAccountPassword;
            return this;
        }

        public Builder serviceAccountUsername(String serviceAccountUsername) {
            $.serviceAccountUsername = serviceAccountUsername;
            return this;
        }

        public Builder userBase(String userBase) {
            $.userBase = userBase;
            return this;
        }

        public Builder userRoleName(String userRoleName) {
            $.userRoleName = userRoleName;
            return this;
        }

        public Builder userSearchMatching(String userSearchMatching) {
            $.userSearchMatching = userSearchMatching;
            return this;
        }

        public Builder userSearchSubtree(Boolean userSearchSubtree) {
            $.userSearchSubtree = userSearchSubtree;
            return this;
        }

        public GetBrokerLdapServerMetadata build() {
            $.hosts = Objects.requireNonNull($.hosts, "expected parameter 'hosts' to be non-null");
            $.roleBase = Objects.requireNonNull($.roleBase, "expected parameter 'roleBase' to be non-null");
            $.roleName = Objects.requireNonNull($.roleName, "expected parameter 'roleName' to be non-null");
            $.roleSearchMatching = Objects.requireNonNull($.roleSearchMatching, "expected parameter 'roleSearchMatching' to be non-null");
            $.roleSearchSubtree = Objects.requireNonNull($.roleSearchSubtree, "expected parameter 'roleSearchSubtree' to be non-null");
            $.serviceAccountPassword = Objects.requireNonNull($.serviceAccountPassword, "expected parameter 'serviceAccountPassword' to be non-null");
            $.serviceAccountUsername = Objects.requireNonNull($.serviceAccountUsername, "expected parameter 'serviceAccountUsername' to be non-null");
            $.userBase = Objects.requireNonNull($.userBase, "expected parameter 'userBase' to be non-null");
            $.userRoleName = Objects.requireNonNull($.userRoleName, "expected parameter 'userRoleName' to be non-null");
            $.userSearchMatching = Objects.requireNonNull($.userSearchMatching, "expected parameter 'userSearchMatching' to be non-null");
            $.userSearchSubtree = Objects.requireNonNull($.userSearchSubtree, "expected parameter 'userSearchSubtree' to be non-null");
            return $;
        }
    }

}
