// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.organizations.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetDelegatedAdministratorsDelegatedAdministrator extends com.pulumi.resources.InvokeArgs {

    public static final GetDelegatedAdministratorsDelegatedAdministrator Empty = new GetDelegatedAdministratorsDelegatedAdministrator();

    /**
     * The Amazon Resource Name (ARN) of the delegated administrator&#39;s account.
     * 
     */
    @Import(name="arn", required=true)
      private final String arn;

    public String arn() {
        return this.arn;
    }

    /**
     * The date when the account was made a delegated administrator.
     * 
     */
    @Import(name="delegationEnabledDate", required=true)
      private final String delegationEnabledDate;

    public String delegationEnabledDate() {
        return this.delegationEnabledDate;
    }

    /**
     * The email address that is associated with the delegated administrator&#39;s AWS account.
     * 
     */
    @Import(name="email", required=true)
      private final String email;

    public String email() {
        return this.email;
    }

    /**
     * The unique identifier (ID) of the delegated administrator&#39;s account.
     * 
     */
    @Import(name="id", required=true)
      private final String id;

    public String id() {
        return this.id;
    }

    /**
     * The method by which the delegated administrator&#39;s account joined the organization.
     * 
     */
    @Import(name="joinedMethod", required=true)
      private final String joinedMethod;

    public String joinedMethod() {
        return this.joinedMethod;
    }

    /**
     * The date when the delegated administrator&#39;s account became a part of the organization.
     * 
     */
    @Import(name="joinedTimestamp", required=true)
      private final String joinedTimestamp;

    public String joinedTimestamp() {
        return this.joinedTimestamp;
    }

    /**
     * The friendly name of the delegated administrator&#39;s account.
     * 
     */
    @Import(name="name", required=true)
      private final String name;

    public String name() {
        return this.name;
    }

    /**
     * The status of the delegated administrator&#39;s account in the organization.
     * 
     */
    @Import(name="status", required=true)
      private final String status;

    public String status() {
        return this.status;
    }

    public GetDelegatedAdministratorsDelegatedAdministrator(
        String arn,
        String delegationEnabledDate,
        String email,
        String id,
        String joinedMethod,
        String joinedTimestamp,
        String name,
        String status) {
        this.arn = Objects.requireNonNull(arn, "expected parameter 'arn' to be non-null");
        this.delegationEnabledDate = Objects.requireNonNull(delegationEnabledDate, "expected parameter 'delegationEnabledDate' to be non-null");
        this.email = Objects.requireNonNull(email, "expected parameter 'email' to be non-null");
        this.id = Objects.requireNonNull(id, "expected parameter 'id' to be non-null");
        this.joinedMethod = Objects.requireNonNull(joinedMethod, "expected parameter 'joinedMethod' to be non-null");
        this.joinedTimestamp = Objects.requireNonNull(joinedTimestamp, "expected parameter 'joinedTimestamp' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.status = Objects.requireNonNull(status, "expected parameter 'status' to be non-null");
    }

    private GetDelegatedAdministratorsDelegatedAdministrator() {
        this.arn = null;
        this.delegationEnabledDate = null;
        this.email = null;
        this.id = null;
        this.joinedMethod = null;
        this.joinedTimestamp = null;
        this.name = null;
        this.status = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDelegatedAdministratorsDelegatedAdministrator defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String arn;
        private String delegationEnabledDate;
        private String email;
        private String id;
        private String joinedMethod;
        private String joinedTimestamp;
        private String name;
        private String status;

        public Builder() {
    	      // Empty
        }

        public Builder(GetDelegatedAdministratorsDelegatedAdministrator defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.delegationEnabledDate = defaults.delegationEnabledDate;
    	      this.email = defaults.email;
    	      this.id = defaults.id;
    	      this.joinedMethod = defaults.joinedMethod;
    	      this.joinedTimestamp = defaults.joinedTimestamp;
    	      this.name = defaults.name;
    	      this.status = defaults.status;
        }

        public Builder arn(String arn) {
            this.arn = Objects.requireNonNull(arn);
            return this;
        }
        public Builder delegationEnabledDate(String delegationEnabledDate) {
            this.delegationEnabledDate = Objects.requireNonNull(delegationEnabledDate);
            return this;
        }
        public Builder email(String email) {
            this.email = Objects.requireNonNull(email);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder joinedMethod(String joinedMethod) {
            this.joinedMethod = Objects.requireNonNull(joinedMethod);
            return this;
        }
        public Builder joinedTimestamp(String joinedTimestamp) {
            this.joinedTimestamp = Objects.requireNonNull(joinedTimestamp);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }        public GetDelegatedAdministratorsDelegatedAdministrator build() {
            return new GetDelegatedAdministratorsDelegatedAdministrator(arn, delegationEnabledDate, email, id, joinedMethod, joinedTimestamp, name, status);
        }
    }
}
