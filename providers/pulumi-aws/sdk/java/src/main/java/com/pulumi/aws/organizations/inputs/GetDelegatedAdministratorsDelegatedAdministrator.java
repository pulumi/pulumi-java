// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.organizations.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetDelegatedAdministratorsDelegatedAdministrator extends com.pulumi.resources.InvokeArgs {

    public static final GetDelegatedAdministratorsDelegatedAdministrator Empty = new GetDelegatedAdministratorsDelegatedAdministrator();

    /**
     * The Amazon Resource Name (ARN) of the delegated administrator&#39;s account.
     * 
     */
    @Import(name="arn", required=true)
    private String arn;

    /**
     * @return The Amazon Resource Name (ARN) of the delegated administrator&#39;s account.
     * 
     */
    public String arn() {
        return this.arn;
    }

    /**
     * The date when the account was made a delegated administrator.
     * 
     */
    @Import(name="delegationEnabledDate", required=true)
    private String delegationEnabledDate;

    /**
     * @return The date when the account was made a delegated administrator.
     * 
     */
    public String delegationEnabledDate() {
        return this.delegationEnabledDate;
    }

    /**
     * The email address that is associated with the delegated administrator&#39;s AWS account.
     * 
     */
    @Import(name="email", required=true)
    private String email;

    /**
     * @return The email address that is associated with the delegated administrator&#39;s AWS account.
     * 
     */
    public String email() {
        return this.email;
    }

    /**
     * The unique identifier (ID) of the delegated administrator&#39;s account.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return The unique identifier (ID) of the delegated administrator&#39;s account.
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * The method by which the delegated administrator&#39;s account joined the organization.
     * 
     */
    @Import(name="joinedMethod", required=true)
    private String joinedMethod;

    /**
     * @return The method by which the delegated administrator&#39;s account joined the organization.
     * 
     */
    public String joinedMethod() {
        return this.joinedMethod;
    }

    /**
     * The date when the delegated administrator&#39;s account became a part of the organization.
     * 
     */
    @Import(name="joinedTimestamp", required=true)
    private String joinedTimestamp;

    /**
     * @return The date when the delegated administrator&#39;s account became a part of the organization.
     * 
     */
    public String joinedTimestamp() {
        return this.joinedTimestamp;
    }

    /**
     * The friendly name of the delegated administrator&#39;s account.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The friendly name of the delegated administrator&#39;s account.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * The status of the delegated administrator&#39;s account in the organization.
     * 
     */
    @Import(name="status", required=true)
    private String status;

    /**
     * @return The status of the delegated administrator&#39;s account in the organization.
     * 
     */
    public String status() {
        return this.status;
    }

    private GetDelegatedAdministratorsDelegatedAdministrator() {}

    private GetDelegatedAdministratorsDelegatedAdministrator(GetDelegatedAdministratorsDelegatedAdministrator $) {
        this.arn = $.arn;
        this.delegationEnabledDate = $.delegationEnabledDate;
        this.email = $.email;
        this.id = $.id;
        this.joinedMethod = $.joinedMethod;
        this.joinedTimestamp = $.joinedTimestamp;
        this.name = $.name;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDelegatedAdministratorsDelegatedAdministrator defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDelegatedAdministratorsDelegatedAdministrator $;

        public Builder() {
            $ = new GetDelegatedAdministratorsDelegatedAdministrator();
        }

        public Builder(GetDelegatedAdministratorsDelegatedAdministrator defaults) {
            $ = new GetDelegatedAdministratorsDelegatedAdministrator(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn The Amazon Resource Name (ARN) of the delegated administrator&#39;s account.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param delegationEnabledDate The date when the account was made a delegated administrator.
         * 
         * @return builder
         * 
         */
        public Builder delegationEnabledDate(String delegationEnabledDate) {
            $.delegationEnabledDate = delegationEnabledDate;
            return this;
        }

        /**
         * @param email The email address that is associated with the delegated administrator&#39;s AWS account.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            $.email = email;
            return this;
        }

        /**
         * @param id The unique identifier (ID) of the delegated administrator&#39;s account.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param joinedMethod The method by which the delegated administrator&#39;s account joined the organization.
         * 
         * @return builder
         * 
         */
        public Builder joinedMethod(String joinedMethod) {
            $.joinedMethod = joinedMethod;
            return this;
        }

        /**
         * @param joinedTimestamp The date when the delegated administrator&#39;s account became a part of the organization.
         * 
         * @return builder
         * 
         */
        public Builder joinedTimestamp(String joinedTimestamp) {
            $.joinedTimestamp = joinedTimestamp;
            return this;
        }

        /**
         * @param name The friendly name of the delegated administrator&#39;s account.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param status The status of the delegated administrator&#39;s account in the organization.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            $.status = status;
            return this;
        }

        public GetDelegatedAdministratorsDelegatedAdministrator build() {
            $.arn = Objects.requireNonNull($.arn, "expected parameter 'arn' to be non-null");
            $.delegationEnabledDate = Objects.requireNonNull($.delegationEnabledDate, "expected parameter 'delegationEnabledDate' to be non-null");
            $.email = Objects.requireNonNull($.email, "expected parameter 'email' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.joinedMethod = Objects.requireNonNull($.joinedMethod, "expected parameter 'joinedMethod' to be non-null");
            $.joinedTimestamp = Objects.requireNonNull($.joinedTimestamp, "expected parameter 'joinedTimestamp' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            return $;
        }
    }

}
