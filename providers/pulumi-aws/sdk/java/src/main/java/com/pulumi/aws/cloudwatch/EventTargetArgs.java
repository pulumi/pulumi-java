// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudwatch;

import com.pulumi.aws.cloudwatch.inputs.EventTargetBatchTargetArgs;
import com.pulumi.aws.cloudwatch.inputs.EventTargetDeadLetterConfigArgs;
import com.pulumi.aws.cloudwatch.inputs.EventTargetEcsTargetArgs;
import com.pulumi.aws.cloudwatch.inputs.EventTargetHttpTargetArgs;
import com.pulumi.aws.cloudwatch.inputs.EventTargetInputTransformerArgs;
import com.pulumi.aws.cloudwatch.inputs.EventTargetKinesisTargetArgs;
import com.pulumi.aws.cloudwatch.inputs.EventTargetRedshiftTargetArgs;
import com.pulumi.aws.cloudwatch.inputs.EventTargetRetryPolicyArgs;
import com.pulumi.aws.cloudwatch.inputs.EventTargetRunCommandTargetArgs;
import com.pulumi.aws.cloudwatch.inputs.EventTargetSqsTargetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventTargetArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventTargetArgs Empty = new EventTargetArgs();

    /**
     * - ARN of the SQS queue specified as the target for the dead-letter queue.
     * 
     */
    @Import(name="arn", required=true)
    private Output<String> arn;

    public Output<String> arn() {
        return this.arn;
    }

    /**
     * Parameters used when you are using the rule to invoke an Amazon Batch Job. Documented below. A maximum of 1 are allowed.
     * 
     */
    @Import(name="batchTarget")
    private @Nullable Output<EventTargetBatchTargetArgs> batchTarget;

    public Optional<Output<EventTargetBatchTargetArgs>> batchTarget() {
        return Optional.ofNullable(this.batchTarget);
    }

    /**
     * Parameters used when you are providing a dead letter config. Documented below. A maximum of 1 are allowed.
     * 
     */
    @Import(name="deadLetterConfig")
    private @Nullable Output<EventTargetDeadLetterConfigArgs> deadLetterConfig;

    public Optional<Output<EventTargetDeadLetterConfigArgs>> deadLetterConfig() {
        return Optional.ofNullable(this.deadLetterConfig);
    }

    /**
     * Parameters used when you are using the rule to invoke Amazon ECS Task. Documented below. A maximum of 1 are allowed.
     * 
     */
    @Import(name="ecsTarget")
    private @Nullable Output<EventTargetEcsTargetArgs> ecsTarget;

    public Optional<Output<EventTargetEcsTargetArgs>> ecsTarget() {
        return Optional.ofNullable(this.ecsTarget);
    }

    /**
     * The event bus to associate with the rule. If you omit this, the `default` event bus is used.
     * 
     */
    @Import(name="eventBusName")
    private @Nullable Output<String> eventBusName;

    public Optional<Output<String>> eventBusName() {
        return Optional.ofNullable(this.eventBusName);
    }

    /**
     * Parameters used when you are using the rule to invoke an API Gateway REST endpoint. Documented below. A maximum of 1 is allowed.
     * 
     */
    @Import(name="httpTarget")
    private @Nullable Output<EventTargetHttpTargetArgs> httpTarget;

    public Optional<Output<EventTargetHttpTargetArgs>> httpTarget() {
        return Optional.ofNullable(this.httpTarget);
    }

    /**
     * Valid JSON text passed to the target. Conflicts with `input_path` and `input_transformer`.
     * 
     */
    @Import(name="input")
    private @Nullable Output<String> input;

    public Optional<Output<String>> input() {
        return Optional.ofNullable(this.input);
    }

    /**
     * The value of the [JSONPath](http://goessner.net/articles/JsonPath/) that is used for extracting part of the matched event when passing it to the target. Conflicts with `input` and `input_transformer`.
     * 
     */
    @Import(name="inputPath")
    private @Nullable Output<String> inputPath;

    public Optional<Output<String>> inputPath() {
        return Optional.ofNullable(this.inputPath);
    }

    /**
     * Parameters used when you are providing a custom input to a target based on certain event data. Conflicts with `input` and `input_path`.
     * 
     */
    @Import(name="inputTransformer")
    private @Nullable Output<EventTargetInputTransformerArgs> inputTransformer;

    public Optional<Output<EventTargetInputTransformerArgs>> inputTransformer() {
        return Optional.ofNullable(this.inputTransformer);
    }

    /**
     * Parameters used when you are using the rule to invoke an Amazon Kinesis Stream. Documented below. A maximum of 1 are allowed.
     * 
     */
    @Import(name="kinesisTarget")
    private @Nullable Output<EventTargetKinesisTargetArgs> kinesisTarget;

    public Optional<Output<EventTargetKinesisTargetArgs>> kinesisTarget() {
        return Optional.ofNullable(this.kinesisTarget);
    }

    /**
     * Parameters used when you are using the rule to invoke an Amazon Redshift Statement. Documented below. A maximum of 1 are allowed.
     * 
     */
    @Import(name="redshiftTarget")
    private @Nullable Output<EventTargetRedshiftTargetArgs> redshiftTarget;

    public Optional<Output<EventTargetRedshiftTargetArgs>> redshiftTarget() {
        return Optional.ofNullable(this.redshiftTarget);
    }

    /**
     * Parameters used when you are providing retry policies. Documented below. A maximum of 1 are allowed.
     * 
     */
    @Import(name="retryPolicy")
    private @Nullable Output<EventTargetRetryPolicyArgs> retryPolicy;

    public Optional<Output<EventTargetRetryPolicyArgs>> retryPolicy() {
        return Optional.ofNullable(this.retryPolicy);
    }

    /**
     * The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. Required if `ecs_target` is used or target in `arn` is EC2 instance, Kinesis data stream, Step Functions state machine, or Event Bus in different account or region.
     * 
     */
    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    /**
     * The name of the rule you want to add targets to.
     * 
     */
    @Import(name="rule", required=true)
    private Output<String> rule;

    public Output<String> rule() {
        return this.rule;
    }

    /**
     * Parameters used when you are using the rule to invoke Amazon EC2 Run Command. Documented below. A maximum of 5 are allowed.
     * 
     */
    @Import(name="runCommandTargets")
    private @Nullable Output<List<EventTargetRunCommandTargetArgs>> runCommandTargets;

    public Optional<Output<List<EventTargetRunCommandTargetArgs>>> runCommandTargets() {
        return Optional.ofNullable(this.runCommandTargets);
    }

    /**
     * Parameters used when you are using the rule to invoke an Amazon SQS Queue. Documented below. A maximum of 1 are allowed.
     * 
     */
    @Import(name="sqsTarget")
    private @Nullable Output<EventTargetSqsTargetArgs> sqsTarget;

    public Optional<Output<EventTargetSqsTargetArgs>> sqsTarget() {
        return Optional.ofNullable(this.sqsTarget);
    }

    /**
     * The unique target assignment ID.  If missing, will generate a random, unique id.
     * 
     */
    @Import(name="targetId")
    private @Nullable Output<String> targetId;

    public Optional<Output<String>> targetId() {
        return Optional.ofNullable(this.targetId);
    }

    private EventTargetArgs() {}

    private EventTargetArgs(EventTargetArgs $) {
        this.arn = $.arn;
        this.batchTarget = $.batchTarget;
        this.deadLetterConfig = $.deadLetterConfig;
        this.ecsTarget = $.ecsTarget;
        this.eventBusName = $.eventBusName;
        this.httpTarget = $.httpTarget;
        this.input = $.input;
        this.inputPath = $.inputPath;
        this.inputTransformer = $.inputTransformer;
        this.kinesisTarget = $.kinesisTarget;
        this.redshiftTarget = $.redshiftTarget;
        this.retryPolicy = $.retryPolicy;
        this.roleArn = $.roleArn;
        this.rule = $.rule;
        this.runCommandTargets = $.runCommandTargets;
        this.sqsTarget = $.sqsTarget;
        this.targetId = $.targetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventTargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventTargetArgs $;

        public Builder() {
            $ = new EventTargetArgs();
        }

        public Builder(EventTargetArgs defaults) {
            $ = new EventTargetArgs(Objects.requireNonNull(defaults));
        }

        public Builder arn(Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder batchTarget(@Nullable Output<EventTargetBatchTargetArgs> batchTarget) {
            $.batchTarget = batchTarget;
            return this;
        }

        public Builder batchTarget(EventTargetBatchTargetArgs batchTarget) {
            return batchTarget(Output.of(batchTarget));
        }

        public Builder deadLetterConfig(@Nullable Output<EventTargetDeadLetterConfigArgs> deadLetterConfig) {
            $.deadLetterConfig = deadLetterConfig;
            return this;
        }

        public Builder deadLetterConfig(EventTargetDeadLetterConfigArgs deadLetterConfig) {
            return deadLetterConfig(Output.of(deadLetterConfig));
        }

        public Builder ecsTarget(@Nullable Output<EventTargetEcsTargetArgs> ecsTarget) {
            $.ecsTarget = ecsTarget;
            return this;
        }

        public Builder ecsTarget(EventTargetEcsTargetArgs ecsTarget) {
            return ecsTarget(Output.of(ecsTarget));
        }

        public Builder eventBusName(@Nullable Output<String> eventBusName) {
            $.eventBusName = eventBusName;
            return this;
        }

        public Builder eventBusName(String eventBusName) {
            return eventBusName(Output.of(eventBusName));
        }

        public Builder httpTarget(@Nullable Output<EventTargetHttpTargetArgs> httpTarget) {
            $.httpTarget = httpTarget;
            return this;
        }

        public Builder httpTarget(EventTargetHttpTargetArgs httpTarget) {
            return httpTarget(Output.of(httpTarget));
        }

        public Builder input(@Nullable Output<String> input) {
            $.input = input;
            return this;
        }

        public Builder input(String input) {
            return input(Output.of(input));
        }

        public Builder inputPath(@Nullable Output<String> inputPath) {
            $.inputPath = inputPath;
            return this;
        }

        public Builder inputPath(String inputPath) {
            return inputPath(Output.of(inputPath));
        }

        public Builder inputTransformer(@Nullable Output<EventTargetInputTransformerArgs> inputTransformer) {
            $.inputTransformer = inputTransformer;
            return this;
        }

        public Builder inputTransformer(EventTargetInputTransformerArgs inputTransformer) {
            return inputTransformer(Output.of(inputTransformer));
        }

        public Builder kinesisTarget(@Nullable Output<EventTargetKinesisTargetArgs> kinesisTarget) {
            $.kinesisTarget = kinesisTarget;
            return this;
        }

        public Builder kinesisTarget(EventTargetKinesisTargetArgs kinesisTarget) {
            return kinesisTarget(Output.of(kinesisTarget));
        }

        public Builder redshiftTarget(@Nullable Output<EventTargetRedshiftTargetArgs> redshiftTarget) {
            $.redshiftTarget = redshiftTarget;
            return this;
        }

        public Builder redshiftTarget(EventTargetRedshiftTargetArgs redshiftTarget) {
            return redshiftTarget(Output.of(redshiftTarget));
        }

        public Builder retryPolicy(@Nullable Output<EventTargetRetryPolicyArgs> retryPolicy) {
            $.retryPolicy = retryPolicy;
            return this;
        }

        public Builder retryPolicy(EventTargetRetryPolicyArgs retryPolicy) {
            return retryPolicy(Output.of(retryPolicy));
        }

        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public Builder rule(Output<String> rule) {
            $.rule = rule;
            return this;
        }

        public Builder rule(String rule) {
            return rule(Output.of(rule));
        }

        public Builder runCommandTargets(@Nullable Output<List<EventTargetRunCommandTargetArgs>> runCommandTargets) {
            $.runCommandTargets = runCommandTargets;
            return this;
        }

        public Builder runCommandTargets(List<EventTargetRunCommandTargetArgs> runCommandTargets) {
            return runCommandTargets(Output.of(runCommandTargets));
        }

        public Builder runCommandTargets(EventTargetRunCommandTargetArgs... runCommandTargets) {
            return runCommandTargets(List.of(runCommandTargets));
        }

        public Builder sqsTarget(@Nullable Output<EventTargetSqsTargetArgs> sqsTarget) {
            $.sqsTarget = sqsTarget;
            return this;
        }

        public Builder sqsTarget(EventTargetSqsTargetArgs sqsTarget) {
            return sqsTarget(Output.of(sqsTarget));
        }

        public Builder targetId(@Nullable Output<String> targetId) {
            $.targetId = targetId;
            return this;
        }

        public Builder targetId(String targetId) {
            return targetId(Output.of(targetId));
        }

        public EventTargetArgs build() {
            $.arn = Objects.requireNonNull($.arn, "expected parameter 'arn' to be non-null");
            $.rule = Objects.requireNonNull($.rule, "expected parameter 'rule' to be non-null");
            return $;
        }
    }

}
