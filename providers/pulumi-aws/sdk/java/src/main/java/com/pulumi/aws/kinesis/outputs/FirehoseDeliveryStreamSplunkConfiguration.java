// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kinesis.outputs;

import com.pulumi.aws.kinesis.outputs.FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions;
import com.pulumi.aws.kinesis.outputs.FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FirehoseDeliveryStreamSplunkConfiguration {
    /**
     * @return The CloudWatch Logging Options for the delivery stream. More details are given below.
     * 
     */
    private final @Nullable FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions cloudwatchLoggingOptions;
    /**
     * @return The amount of time, in seconds between 180 and 600, that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data.
     * 
     */
    private final @Nullable Integer hecAcknowledgmentTimeout;
    /**
     * @return The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
     * 
     */
    private final String hecEndpoint;
    /**
     * @return The HEC endpoint type. Valid values are `Raw` or `Event`. The default value is `Raw`.
     * 
     */
    private final @Nullable String hecEndpointType;
    /**
     * @return The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
     * 
     */
    private final String hecToken;
    /**
     * @return The data processing configuration.  More details are given below.
     * 
     */
    private final @Nullable FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration processingConfiguration;
    /**
     * @return After an initial failure to deliver to Splunk, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
     * 
     */
    private final @Nullable Integer retryDuration;
    /**
     * @return Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
     * 
     */
    private final @Nullable String s3BackupMode;

    @CustomType.Constructor
    private FirehoseDeliveryStreamSplunkConfiguration(
        @CustomType.Parameter("cloudwatchLoggingOptions") @Nullable FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions cloudwatchLoggingOptions,
        @CustomType.Parameter("hecAcknowledgmentTimeout") @Nullable Integer hecAcknowledgmentTimeout,
        @CustomType.Parameter("hecEndpoint") String hecEndpoint,
        @CustomType.Parameter("hecEndpointType") @Nullable String hecEndpointType,
        @CustomType.Parameter("hecToken") String hecToken,
        @CustomType.Parameter("processingConfiguration") @Nullable FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration processingConfiguration,
        @CustomType.Parameter("retryDuration") @Nullable Integer retryDuration,
        @CustomType.Parameter("s3BackupMode") @Nullable String s3BackupMode) {
        this.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
        this.hecAcknowledgmentTimeout = hecAcknowledgmentTimeout;
        this.hecEndpoint = hecEndpoint;
        this.hecEndpointType = hecEndpointType;
        this.hecToken = hecToken;
        this.processingConfiguration = processingConfiguration;
        this.retryDuration = retryDuration;
        this.s3BackupMode = s3BackupMode;
    }

    /**
     * @return The CloudWatch Logging Options for the delivery stream. More details are given below.
     * 
     */
    public Optional<FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions> cloudwatchLoggingOptions() {
        return Optional.ofNullable(this.cloudwatchLoggingOptions);
    }
    /**
     * @return The amount of time, in seconds between 180 and 600, that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data.
     * 
     */
    public Optional<Integer> hecAcknowledgmentTimeout() {
        return Optional.ofNullable(this.hecAcknowledgmentTimeout);
    }
    /**
     * @return The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
     * 
     */
    public String hecEndpoint() {
        return this.hecEndpoint;
    }
    /**
     * @return The HEC endpoint type. Valid values are `Raw` or `Event`. The default value is `Raw`.
     * 
     */
    public Optional<String> hecEndpointType() {
        return Optional.ofNullable(this.hecEndpointType);
    }
    /**
     * @return The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
     * 
     */
    public String hecToken() {
        return this.hecToken;
    }
    /**
     * @return The data processing configuration.  More details are given below.
     * 
     */
    public Optional<FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration> processingConfiguration() {
        return Optional.ofNullable(this.processingConfiguration);
    }
    /**
     * @return After an initial failure to deliver to Splunk, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
     * 
     */
    public Optional<Integer> retryDuration() {
        return Optional.ofNullable(this.retryDuration);
    }
    /**
     * @return Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
     * 
     */
    public Optional<String> s3BackupMode() {
        return Optional.ofNullable(this.s3BackupMode);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FirehoseDeliveryStreamSplunkConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions cloudwatchLoggingOptions;
        private @Nullable Integer hecAcknowledgmentTimeout;
        private String hecEndpoint;
        private @Nullable String hecEndpointType;
        private String hecToken;
        private @Nullable FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration processingConfiguration;
        private @Nullable Integer retryDuration;
        private @Nullable String s3BackupMode;

        public Builder() {
    	      // Empty
        }

        public Builder(FirehoseDeliveryStreamSplunkConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudwatchLoggingOptions = defaults.cloudwatchLoggingOptions;
    	      this.hecAcknowledgmentTimeout = defaults.hecAcknowledgmentTimeout;
    	      this.hecEndpoint = defaults.hecEndpoint;
    	      this.hecEndpointType = defaults.hecEndpointType;
    	      this.hecToken = defaults.hecToken;
    	      this.processingConfiguration = defaults.processingConfiguration;
    	      this.retryDuration = defaults.retryDuration;
    	      this.s3BackupMode = defaults.s3BackupMode;
        }

        public Builder cloudwatchLoggingOptions(@Nullable FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions cloudwatchLoggingOptions) {
            this.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
            return this;
        }
        public Builder hecAcknowledgmentTimeout(@Nullable Integer hecAcknowledgmentTimeout) {
            this.hecAcknowledgmentTimeout = hecAcknowledgmentTimeout;
            return this;
        }
        public Builder hecEndpoint(String hecEndpoint) {
            this.hecEndpoint = Objects.requireNonNull(hecEndpoint);
            return this;
        }
        public Builder hecEndpointType(@Nullable String hecEndpointType) {
            this.hecEndpointType = hecEndpointType;
            return this;
        }
        public Builder hecToken(String hecToken) {
            this.hecToken = Objects.requireNonNull(hecToken);
            return this;
        }
        public Builder processingConfiguration(@Nullable FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration processingConfiguration) {
            this.processingConfiguration = processingConfiguration;
            return this;
        }
        public Builder retryDuration(@Nullable Integer retryDuration) {
            this.retryDuration = retryDuration;
            return this;
        }
        public Builder s3BackupMode(@Nullable String s3BackupMode) {
            this.s3BackupMode = s3BackupMode;
            return this;
        }        public FirehoseDeliveryStreamSplunkConfiguration build() {
            return new FirehoseDeliveryStreamSplunkConfiguration(cloudwatchLoggingOptions, hecAcknowledgmentTimeout, hecEndpoint, hecEndpointType, hecToken, processingConfiguration, retryDuration, s3BackupMode);
        }
    }
}
