// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CrawlerMongodbTarget {
    /**
     * @return The name of the connection to use to connect to the Delta table target.
     * 
     */
    private final String connectionName;
    /**
     * @return The path of the Amazon DocumentDB or MongoDB target (database/collection).
     * 
     */
    private final String path;
    /**
     * @return Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table. Default value is `true`.
     * 
     */
    private final @Nullable Boolean scanAll;

    @CustomType.Constructor
    private CrawlerMongodbTarget(
        @CustomType.Parameter("connectionName") String connectionName,
        @CustomType.Parameter("path") String path,
        @CustomType.Parameter("scanAll") @Nullable Boolean scanAll) {
        this.connectionName = connectionName;
        this.path = path;
        this.scanAll = scanAll;
    }

    /**
     * @return The name of the connection to use to connect to the Delta table target.
     * 
     */
    public String connectionName() {
        return this.connectionName;
    }
    /**
     * @return The path of the Amazon DocumentDB or MongoDB target (database/collection).
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table. Default value is `true`.
     * 
     */
    public Optional<Boolean> scanAll() {
        return Optional.ofNullable(this.scanAll);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CrawlerMongodbTarget defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String connectionName;
        private String path;
        private @Nullable Boolean scanAll;

        public Builder() {
    	      // Empty
        }

        public Builder(CrawlerMongodbTarget defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionName = defaults.connectionName;
    	      this.path = defaults.path;
    	      this.scanAll = defaults.scanAll;
        }

        public Builder connectionName(String connectionName) {
            this.connectionName = Objects.requireNonNull(connectionName);
            return this;
        }
        public Builder path(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        public Builder scanAll(@Nullable Boolean scanAll) {
            this.scanAll = scanAll;
            return this;
        }        public CrawlerMongodbTarget build() {
            return new CrawlerMongodbTarget(connectionName, path, scanAll);
        }
    }
}
