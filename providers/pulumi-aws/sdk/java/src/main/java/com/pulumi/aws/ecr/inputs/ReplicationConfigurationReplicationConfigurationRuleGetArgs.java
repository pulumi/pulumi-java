// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecr.inputs;

import com.pulumi.aws.ecr.inputs.ReplicationConfigurationReplicationConfigurationRuleDestinationGetArgs;
import com.pulumi.aws.ecr.inputs.ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReplicationConfigurationReplicationConfigurationRuleGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReplicationConfigurationReplicationConfigurationRuleGetArgs Empty = new ReplicationConfigurationReplicationConfigurationRuleGetArgs();

    /**
     * the details of a replication destination. A maximum of 25 are allowed per `rule`. See Destination.
     * 
     */
    @Import(name="destinations", required=true)
    private Output<List<ReplicationConfigurationReplicationConfigurationRuleDestinationGetArgs>> destinations;

    public Output<List<ReplicationConfigurationReplicationConfigurationRuleDestinationGetArgs>> destinations() {
        return this.destinations;
    }

    /**
     * filters for a replication rule. See Repository Filter.
     * 
     */
    @Import(name="repositoryFilters")
    private @Nullable Output<List<ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterGetArgs>> repositoryFilters;

    public Optional<Output<List<ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterGetArgs>>> repositoryFilters() {
        return Optional.ofNullable(this.repositoryFilters);
    }

    private ReplicationConfigurationReplicationConfigurationRuleGetArgs() {}

    private ReplicationConfigurationReplicationConfigurationRuleGetArgs(ReplicationConfigurationReplicationConfigurationRuleGetArgs $) {
        this.destinations = $.destinations;
        this.repositoryFilters = $.repositoryFilters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReplicationConfigurationReplicationConfigurationRuleGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReplicationConfigurationReplicationConfigurationRuleGetArgs $;

        public Builder() {
            $ = new ReplicationConfigurationReplicationConfigurationRuleGetArgs();
        }

        public Builder(ReplicationConfigurationReplicationConfigurationRuleGetArgs defaults) {
            $ = new ReplicationConfigurationReplicationConfigurationRuleGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder destinations(Output<List<ReplicationConfigurationReplicationConfigurationRuleDestinationGetArgs>> destinations) {
            $.destinations = destinations;
            return this;
        }

        public Builder destinations(List<ReplicationConfigurationReplicationConfigurationRuleDestinationGetArgs> destinations) {
            return destinations(Output.of(destinations));
        }

        public Builder destinations(ReplicationConfigurationReplicationConfigurationRuleDestinationGetArgs... destinations) {
            return destinations(List.of(destinations));
        }

        public Builder repositoryFilters(@Nullable Output<List<ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterGetArgs>> repositoryFilters) {
            $.repositoryFilters = repositoryFilters;
            return this;
        }

        public Builder repositoryFilters(List<ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterGetArgs> repositoryFilters) {
            return repositoryFilters(Output.of(repositoryFilters));
        }

        public Builder repositoryFilters(ReplicationConfigurationReplicationConfigurationRuleRepositoryFilterGetArgs... repositoryFilters) {
            return repositoryFilters(List.of(repositoryFilters));
        }

        public ReplicationConfigurationReplicationConfigurationRuleGetArgs build() {
            $.destinations = Objects.requireNonNull($.destinations, "expected parameter 'destinations' to be non-null");
            return $;
        }
    }

}
