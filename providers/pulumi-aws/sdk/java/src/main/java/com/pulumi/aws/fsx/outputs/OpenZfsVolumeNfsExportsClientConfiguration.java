// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.fsx.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class OpenZfsVolumeNfsExportsClientConfiguration {
    /**
     * @return - A value that specifies who can mount the file system. You can provide a wildcard character (*), an IP address (0.0.0.0), or a CIDR address (192.0.2.0/24. By default, Amazon FSx uses the wildcard character when specifying the client.
     * 
     */
    private final String clients;
    /**
     * @return -  The options to use when mounting the file system. Maximum of 20 items. See the [Linix NFS exports man page](https://linux.die.net/man/5/exports) for more information. `crossmount` and `sync` are used by default.
     * 
     */
    private final List<String> options;

    @CustomType.Constructor
    private OpenZfsVolumeNfsExportsClientConfiguration(
        @CustomType.Parameter("clients") String clients,
        @CustomType.Parameter("options") List<String> options) {
        this.clients = clients;
        this.options = options;
    }

    /**
     * @return - A value that specifies who can mount the file system. You can provide a wildcard character (*), an IP address (0.0.0.0), or a CIDR address (192.0.2.0/24. By default, Amazon FSx uses the wildcard character when specifying the client.
     * 
     */
    public String clients() {
        return this.clients;
    }
    /**
     * @return -  The options to use when mounting the file system. Maximum of 20 items. See the [Linix NFS exports man page](https://linux.die.net/man/5/exports) for more information. `crossmount` and `sync` are used by default.
     * 
     */
    public List<String> options() {
        return this.options;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OpenZfsVolumeNfsExportsClientConfiguration defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String clients;
        private List<String> options;

        public Builder() {
    	      // Empty
        }

        public Builder(OpenZfsVolumeNfsExportsClientConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clients = defaults.clients;
    	      this.options = defaults.options;
        }

        public Builder clients(String clients) {
            this.clients = Objects.requireNonNull(clients);
            return this;
        }
        public Builder options(List<String> options) {
            this.options = Objects.requireNonNull(options);
            return this;
        }
        public Builder options(String... options) {
            return options(List.of(options));
        }        public OpenZfsVolumeNfsExportsClientConfiguration build() {
            return new OpenZfsVolumeNfsExportsClientConfiguration(clients, options);
        }
    }
}
