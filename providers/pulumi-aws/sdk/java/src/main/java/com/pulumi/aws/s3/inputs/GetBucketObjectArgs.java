// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetBucketObjectArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetBucketObjectArgs Empty = new GetBucketObjectArgs();

    /**
     * The name of the bucket to read the object from. Alternatively, an [S3 access point](https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html) ARN can be specified
     * 
     */
    @Import(name="bucket", required=true)
      private final String bucket;

    public String bucket() {
        return this.bucket;
    }

    /**
     * The full path to the object inside the bucket
     * 
     */
    @Import(name="key", required=true)
      private final String key;

    public String key() {
        return this.key;
    }

    @Import(name="range")
      private final @Nullable String range;

    public Optional<String> range() {
        return this.range == null ? Optional.empty() : Optional.ofNullable(this.range);
    }

    /**
     * A map of tags assigned to the object.
     * 
     */
    @Import(name="tags")
      private final @Nullable Map<String,String> tags;

    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }

    /**
     * Specific version ID of the object returned (defaults to latest version)
     * 
     */
    @Import(name="versionId")
      private final @Nullable String versionId;

    public Optional<String> versionId() {
        return this.versionId == null ? Optional.empty() : Optional.ofNullable(this.versionId);
    }

    public GetBucketObjectArgs(
        String bucket,
        String key,
        @Nullable String range,
        @Nullable Map<String,String> tags,
        @Nullable String versionId) {
        this.bucket = Objects.requireNonNull(bucket, "expected parameter 'bucket' to be non-null");
        this.key = Objects.requireNonNull(key, "expected parameter 'key' to be non-null");
        this.range = range;
        this.tags = tags;
        this.versionId = versionId;
    }

    private GetBucketObjectArgs() {
        this.bucket = null;
        this.key = null;
        this.range = null;
        this.tags = Map.of();
        this.versionId = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBucketObjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String bucket;
        private String key;
        private @Nullable String range;
        private @Nullable Map<String,String> tags;
        private @Nullable String versionId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBucketObjectArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.key = defaults.key;
    	      this.range = defaults.range;
    	      this.tags = defaults.tags;
    	      this.versionId = defaults.versionId;
        }

        public Builder bucket(String bucket) {
            this.bucket = Objects.requireNonNull(bucket);
            return this;
        }
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        public Builder range(@Nullable String range) {
            this.range = range;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder versionId(@Nullable String versionId) {
            this.versionId = versionId;
            return this;
        }        public GetBucketObjectArgs build() {
            return new GetBucketObjectArgs(bucket, key, range, tags, versionId);
        }
    }
}
