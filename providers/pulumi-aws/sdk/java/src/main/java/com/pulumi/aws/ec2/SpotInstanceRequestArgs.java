// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2;

import com.pulumi.aws.ec2.inputs.SpotInstanceRequestCapacityReservationSpecificationArgs;
import com.pulumi.aws.ec2.inputs.SpotInstanceRequestCreditSpecificationArgs;
import com.pulumi.aws.ec2.inputs.SpotInstanceRequestEbsBlockDeviceArgs;
import com.pulumi.aws.ec2.inputs.SpotInstanceRequestEnclaveOptionsArgs;
import com.pulumi.aws.ec2.inputs.SpotInstanceRequestEphemeralBlockDeviceArgs;
import com.pulumi.aws.ec2.inputs.SpotInstanceRequestLaunchTemplateArgs;
import com.pulumi.aws.ec2.inputs.SpotInstanceRequestMetadataOptionsArgs;
import com.pulumi.aws.ec2.inputs.SpotInstanceRequestNetworkInterfaceArgs;
import com.pulumi.aws.ec2.inputs.SpotInstanceRequestRootBlockDeviceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SpotInstanceRequestArgs extends com.pulumi.resources.ResourceArgs {

    public static final SpotInstanceRequestArgs Empty = new SpotInstanceRequestArgs();

    /**
     * AMI to use for the instance. Required unless `launch_template` is specified and the Launch Template specifes an AMI. If an AMI is specified in the Launch Template, setting `ami` will override the AMI specified in the Launch Template.
     * 
     */
    @Import(name="ami")
    private @Nullable Output<String> ami;

    public Optional<Output<String>> ami() {
        return Optional.ofNullable(this.ami);
    }

    /**
     * Whether to associate a public IP address with an instance in a VPC.
     * 
     */
    @Import(name="associatePublicIpAddress")
    private @Nullable Output<Boolean> associatePublicIpAddress;

    public Optional<Output<Boolean>> associatePublicIpAddress() {
        return Optional.ofNullable(this.associatePublicIpAddress);
    }

    /**
     * AZ to start the instance in.
     * 
     */
    @Import(name="availabilityZone")
    private @Nullable Output<String> availabilityZone;

    public Optional<Output<String>> availabilityZone() {
        return Optional.ofNullable(this.availabilityZone);
    }

    /**
     * The required duration for the Spot instances, in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
     * The duration period starts as soon as your Spot instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
     * Note that you can&#39;t specify an Availability Zone group or a launch group if you specify a duration.
     * 
     */
    @Import(name="blockDurationMinutes")
    private @Nullable Output<Integer> blockDurationMinutes;

    public Optional<Output<Integer>> blockDurationMinutes() {
        return Optional.ofNullable(this.blockDurationMinutes);
    }

    /**
     * Describes an instance&#39;s Capacity Reservation targeting option. See Capacity Reservation Specification below for more details.
     * 
     */
    @Import(name="capacityReservationSpecification")
    private @Nullable Output<SpotInstanceRequestCapacityReservationSpecificationArgs> capacityReservationSpecification;

    public Optional<Output<SpotInstanceRequestCapacityReservationSpecificationArgs>> capacityReservationSpecification() {
        return Optional.ofNullable(this.capacityReservationSpecification);
    }

    /**
     * Sets the number of CPU cores for an instance. This option is only supported on creation of instance type that support CPU Options [CPU Cores and Threads Per CPU Core Per Instance Type](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html#cpu-options-supported-instances-values) - specifying this option for unsupported instance types will return an error from the EC2 API.
     * 
     */
    @Import(name="cpuCoreCount")
    private @Nullable Output<Integer> cpuCoreCount;

    public Optional<Output<Integer>> cpuCoreCount() {
        return Optional.ofNullable(this.cpuCoreCount);
    }

    /**
     * If set to to 1, hyperthreading is disabled on the launched instance. Defaults to 2 if not set. See [Optimizing CPU Options](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html) for more information.
     * 
     */
    @Import(name="cpuThreadsPerCore")
    private @Nullable Output<Integer> cpuThreadsPerCore;

    public Optional<Output<Integer>> cpuThreadsPerCore() {
        return Optional.ofNullable(this.cpuThreadsPerCore);
    }

    /**
     * Configuration block for customizing the credit specification of the instance. See Credit Specification below for more details. the provider will only perform drift detection of its value when present in a configuration. Removing this configuration on existing instances will only stop managing it. It will not change the configuration back to the default for the instance type.
     * 
     */
    @Import(name="creditSpecification")
    private @Nullable Output<SpotInstanceRequestCreditSpecificationArgs> creditSpecification;

    public Optional<Output<SpotInstanceRequestCreditSpecificationArgs>> creditSpecification() {
        return Optional.ofNullable(this.creditSpecification);
    }

    /**
     * If true, enables [EC2 Instance Termination Protection](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingDisableAPITermination).
     * 
     */
    @Import(name="disableApiTermination")
    private @Nullable Output<Boolean> disableApiTermination;

    public Optional<Output<Boolean>> disableApiTermination() {
        return Optional.ofNullable(this.disableApiTermination);
    }

    /**
     * One or more configuration blocks with additional EBS block devices to attach to the instance. Block device configurations only apply on resource creation. See Block Devices below for details on attributes and drift detection. When accessing this as an attribute reference, it is a set of objects.
     * 
     */
    @Import(name="ebsBlockDevices")
    private @Nullable Output<List<SpotInstanceRequestEbsBlockDeviceArgs>> ebsBlockDevices;

    public Optional<Output<List<SpotInstanceRequestEbsBlockDeviceArgs>>> ebsBlockDevices() {
        return Optional.ofNullable(this.ebsBlockDevices);
    }

    /**
     * If true, the launched EC2 instance will be EBS-optimized. Note that if this is not set on an instance type that is optimized by default then this will show as disabled but if the instance type is optimized by default then there is no need to set this and there is no effect to disabling it. See the [EBS Optimized section](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html) of the AWS User Guide for more information.
     * 
     */
    @Import(name="ebsOptimized")
    private @Nullable Output<Boolean> ebsOptimized;

    public Optional<Output<Boolean>> ebsOptimized() {
        return Optional.ofNullable(this.ebsOptimized);
    }

    /**
     * Enable Nitro Enclaves on launched instances. See Enclave Options below for more details.
     * 
     */
    @Import(name="enclaveOptions")
    private @Nullable Output<SpotInstanceRequestEnclaveOptionsArgs> enclaveOptions;

    public Optional<Output<SpotInstanceRequestEnclaveOptionsArgs>> enclaveOptions() {
        return Optional.ofNullable(this.enclaveOptions);
    }

    /**
     * One or more configuration blocks to customize Ephemeral (also known as &#34;Instance Store&#34;) volumes on the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a set of objects.
     * 
     */
    @Import(name="ephemeralBlockDevices")
    private @Nullable Output<List<SpotInstanceRequestEphemeralBlockDeviceArgs>> ephemeralBlockDevices;

    public Optional<Output<List<SpotInstanceRequestEphemeralBlockDeviceArgs>>> ephemeralBlockDevices() {
        return Optional.ofNullable(this.ephemeralBlockDevices);
    }

    /**
     * If true, wait for password data to become available and retrieve it. Useful for getting the administrator password for instances running Microsoft Windows. The password data is exported to the `password_data` attribute. See [GetPasswordData](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetPasswordData.html) for more information.
     * 
     */
    @Import(name="getPasswordData")
    private @Nullable Output<Boolean> getPasswordData;

    public Optional<Output<Boolean>> getPasswordData() {
        return Optional.ofNullable(this.getPasswordData);
    }

    /**
     * If true, the launched EC2 instance will support hibernation.
     * 
     */
    @Import(name="hibernation")
    private @Nullable Output<Boolean> hibernation;

    public Optional<Output<Boolean>> hibernation() {
        return Optional.ofNullable(this.hibernation);
    }

    /**
     * ID of a dedicated host that the instance will be assigned to. Use when an instance is to be launched on a specific dedicated host.
     * 
     */
    @Import(name="hostId")
    private @Nullable Output<String> hostId;

    public Optional<Output<String>> hostId() {
        return Optional.ofNullable(this.hostId);
    }

    /**
     * IAM Instance Profile to launch the instance with. Specified as the name of the Instance Profile. Ensure your credentials have the correct permission to assign the instance profile according to the [EC2 documentation](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html#roles-usingrole-ec2instance-permissions), notably `iam:PassRole`.
     * 
     */
    @Import(name="iamInstanceProfile")
    private @Nullable Output<String> iamInstanceProfile;

    public Optional<Output<String>> iamInstanceProfile() {
        return Optional.ofNullable(this.iamInstanceProfile);
    }

    /**
     * Shutdown behavior for the instance. Amazon defaults this to `stop` for EBS-backed instances and `terminate` for instance-store instances. Cannot be set on instance-store instances. See [Shutdown Behavior](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingInstanceInitiatedShutdownBehavior) for more information.
     * 
     */
    @Import(name="instanceInitiatedShutdownBehavior")
    private @Nullable Output<String> instanceInitiatedShutdownBehavior;

    public Optional<Output<String>> instanceInitiatedShutdownBehavior() {
        return Optional.ofNullable(this.instanceInitiatedShutdownBehavior);
    }

    /**
     * Indicates Spot instance behavior when it is interrupted. Valid values are `terminate`, `stop`, or `hibernate`. Default value is `terminate`.
     * 
     */
    @Import(name="instanceInterruptionBehavior")
    private @Nullable Output<String> instanceInterruptionBehavior;

    public Optional<Output<String>> instanceInterruptionBehavior() {
        return Optional.ofNullable(this.instanceInterruptionBehavior);
    }

    /**
     * Indicates Spot instance behavior when it is interrupted. Valid values are `terminate`, `stop`, or `hibernate`. Default value is `terminate`. Use the argument `instance_interruption_behavior` instead.
     * 
     * @deprecated
     * Use the parameter &#34;instance_interruption_behavior&#34; instead.
     * 
     */
    @Deprecated /* Use the parameter ""instance_interruption_behavior"" instead. */
    @Import(name="instanceInterruptionBehaviour")
    private @Nullable Output<String> instanceInterruptionBehaviour;

    @Deprecated /* Use the parameter ""instance_interruption_behavior"" instead. */
    public Optional<Output<String>> instanceInterruptionBehaviour() {
        return Optional.ofNullable(this.instanceInterruptionBehaviour);
    }

    /**
     * The instance type to use for the instance. Updates to this field will trigger a stop/start of the EC2 instance.
     * 
     */
    @Import(name="instanceType")
    private @Nullable Output<String> instanceType;

    public Optional<Output<String>> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }

    /**
     * A number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet.
     * 
     */
    @Import(name="ipv6AddressCount")
    private @Nullable Output<Integer> ipv6AddressCount;

    public Optional<Output<Integer>> ipv6AddressCount() {
        return Optional.ofNullable(this.ipv6AddressCount);
    }

    /**
     * Specify one or more IPv6 addresses from the range of the subnet to associate with the primary network interface
     * 
     */
    @Import(name="ipv6Addresses")
    private @Nullable Output<List<String>> ipv6Addresses;

    public Optional<Output<List<String>>> ipv6Addresses() {
        return Optional.ofNullable(this.ipv6Addresses);
    }

    /**
     * Key name of the Key Pair to use for the instance; which can be managed using the `aws.ec2.KeyPair` resource.
     * 
     */
    @Import(name="keyName")
    private @Nullable Output<String> keyName;

    public Optional<Output<String>> keyName() {
        return Optional.ofNullable(this.keyName);
    }

    /**
     * A launch group is a group of spot instances that launch together and terminate together.
     * If left empty instances are launched and terminated individually.
     * 
     */
    @Import(name="launchGroup")
    private @Nullable Output<String> launchGroup;

    public Optional<Output<String>> launchGroup() {
        return Optional.ofNullable(this.launchGroup);
    }

    /**
     * Specifies a Launch Template to configure the instance. Parameters configured on this resource will override the corresponding parameters in the Launch Template.
     * See Launch Template Specification below for more details.
     * 
     */
    @Import(name="launchTemplate")
    private @Nullable Output<SpotInstanceRequestLaunchTemplateArgs> launchTemplate;

    public Optional<Output<SpotInstanceRequestLaunchTemplateArgs>> launchTemplate() {
        return Optional.ofNullable(this.launchTemplate);
    }

    /**
     * Customize the metadata options of the instance. See Metadata Options below for more details.
     * 
     */
    @Import(name="metadataOptions")
    private @Nullable Output<SpotInstanceRequestMetadataOptionsArgs> metadataOptions;

    public Optional<Output<SpotInstanceRequestMetadataOptionsArgs>> metadataOptions() {
        return Optional.ofNullable(this.metadataOptions);
    }

    /**
     * If true, the launched EC2 instance will have detailed monitoring enabled. (Available since v0.6.0)
     * 
     */
    @Import(name="monitoring")
    private @Nullable Output<Boolean> monitoring;

    public Optional<Output<Boolean>> monitoring() {
        return Optional.ofNullable(this.monitoring);
    }

    /**
     * Customize network interfaces to be attached at instance boot time. See Network Interfaces below for more details.
     * 
     */
    @Import(name="networkInterfaces")
    private @Nullable Output<List<SpotInstanceRequestNetworkInterfaceArgs>> networkInterfaces;

    public Optional<Output<List<SpotInstanceRequestNetworkInterfaceArgs>>> networkInterfaces() {
        return Optional.ofNullable(this.networkInterfaces);
    }

    /**
     * Placement Group to start the instance in.
     * 
     */
    @Import(name="placementGroup")
    private @Nullable Output<String> placementGroup;

    public Optional<Output<String>> placementGroup() {
        return Optional.ofNullable(this.placementGroup);
    }

    /**
     * The number of the partition the instance is in. Valid only if the `aws.ec2.PlacementGroup` resource&#39;s `strategy` argument is set to `&#34;partition&#34;`.
     * 
     */
    @Import(name="placementPartitionNumber")
    private @Nullable Output<Integer> placementPartitionNumber;

    public Optional<Output<Integer>> placementPartitionNumber() {
        return Optional.ofNullable(this.placementPartitionNumber);
    }

    /**
     * Private IP address to associate with the instance in a VPC.
     * 
     */
    @Import(name="privateIp")
    private @Nullable Output<String> privateIp;

    public Optional<Output<String>> privateIp() {
        return Optional.ofNullable(this.privateIp);
    }

    /**
     * Configuration block to customize details about the root block device of the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a list containing one object.
     * 
     */
    @Import(name="rootBlockDevice")
    private @Nullable Output<SpotInstanceRequestRootBlockDeviceArgs> rootBlockDevice;

    public Optional<Output<SpotInstanceRequestRootBlockDeviceArgs>> rootBlockDevice() {
        return Optional.ofNullable(this.rootBlockDevice);
    }

    /**
     * A list of secondary private IPv4 addresses to assign to the instance&#39;s primary network interface (eth0) in a VPC. Can only be assigned to the primary network interface (eth0) attached at instance creation, not a pre-existing network interface i.e., referenced in a `network_interface` block. Refer to the [Elastic network interfaces documentation](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI) to see the maximum number of private IP addresses allowed per instance type.
     * 
     */
    @Import(name="secondaryPrivateIps")
    private @Nullable Output<List<String>> secondaryPrivateIps;

    public Optional<Output<List<String>>> secondaryPrivateIps() {
        return Optional.ofNullable(this.secondaryPrivateIps);
    }

    /**
     * A list of security group names to associate with.
     * 
     */
    @Import(name="securityGroups")
    private @Nullable Output<List<String>> securityGroups;

    public Optional<Output<List<String>>> securityGroups() {
        return Optional.ofNullable(this.securityGroups);
    }

    /**
     * Controls if traffic is routed to the instance when the destination address does not match the instance. Used for NAT or VPNs. Defaults true.
     * 
     */
    @Import(name="sourceDestCheck")
    private @Nullable Output<Boolean> sourceDestCheck;

    public Optional<Output<Boolean>> sourceDestCheck() {
        return Optional.ofNullable(this.sourceDestCheck);
    }

    /**
     * The maximum price to request on the spot market.
     * 
     */
    @Import(name="spotPrice")
    private @Nullable Output<String> spotPrice;

    public Optional<Output<String>> spotPrice() {
        return Optional.ofNullable(this.spotPrice);
    }

    /**
     * If set to `one-time`, after
     * the instance is terminated, the spot request will be closed.
     * 
     */
    @Import(name="spotType")
    private @Nullable Output<String> spotType;

    public Optional<Output<String>> spotType() {
        return Optional.ofNullable(this.spotType);
    }

    /**
     * VPC Subnet ID to launch in.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * A map of tags to assign to the resource. Note that these tags apply to the instance and not block storage devices. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware. The host tenancy is not supported for the import-instance command.
     * 
     */
    @Import(name="tenancy")
    private @Nullable Output<String> tenancy;

    public Optional<Output<String>> tenancy() {
        return Optional.ofNullable(this.tenancy);
    }

    /**
     * User data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see `user_data_base64` instead.
     * 
     */
    @Import(name="userData")
    private @Nullable Output<String> userData;

    public Optional<Output<String>> userData() {
        return Optional.ofNullable(this.userData);
    }

    /**
     * Can be used instead of `user_data` to pass base64-encoded binary data directly. Use this instead of `user_data` whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption.
     * 
     */
    @Import(name="userDataBase64")
    private @Nullable Output<String> userDataBase64;

    public Optional<Output<String>> userDataBase64() {
        return Optional.ofNullable(this.userDataBase64);
    }

    /**
     * The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
     * 
     */
    @Import(name="validFrom")
    private @Nullable Output<String> validFrom;

    public Optional<Output<String>> validFrom() {
        return Optional.ofNullable(this.validFrom);
    }

    /**
     * The end date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request. The default end date is 7 days from the current date.
     * 
     */
    @Import(name="validUntil")
    private @Nullable Output<String> validUntil;

    public Optional<Output<String>> validUntil() {
        return Optional.ofNullable(this.validUntil);
    }

    /**
     * A map of tags to assign, at instance-creation time, to root and EBS volumes.
     * 
     */
    @Import(name="volumeTags")
    private @Nullable Output<Map<String,String>> volumeTags;

    public Optional<Output<Map<String,String>>> volumeTags() {
        return Optional.ofNullable(this.volumeTags);
    }

    /**
     * A list of security group IDs to associate with.
     * 
     */
    @Import(name="vpcSecurityGroupIds")
    private @Nullable Output<List<String>> vpcSecurityGroupIds;

    public Optional<Output<List<String>>> vpcSecurityGroupIds() {
        return Optional.ofNullable(this.vpcSecurityGroupIds);
    }

    /**
     * If set, this provider will
     * wait for the Spot Request to be fulfilled, and will throw an error if the
     * timeout of 10m is reached.
     * 
     */
    @Import(name="waitForFulfillment")
    private @Nullable Output<Boolean> waitForFulfillment;

    public Optional<Output<Boolean>> waitForFulfillment() {
        return Optional.ofNullable(this.waitForFulfillment);
    }

    private SpotInstanceRequestArgs() {}

    private SpotInstanceRequestArgs(SpotInstanceRequestArgs $) {
        this.ami = $.ami;
        this.associatePublicIpAddress = $.associatePublicIpAddress;
        this.availabilityZone = $.availabilityZone;
        this.blockDurationMinutes = $.blockDurationMinutes;
        this.capacityReservationSpecification = $.capacityReservationSpecification;
        this.cpuCoreCount = $.cpuCoreCount;
        this.cpuThreadsPerCore = $.cpuThreadsPerCore;
        this.creditSpecification = $.creditSpecification;
        this.disableApiTermination = $.disableApiTermination;
        this.ebsBlockDevices = $.ebsBlockDevices;
        this.ebsOptimized = $.ebsOptimized;
        this.enclaveOptions = $.enclaveOptions;
        this.ephemeralBlockDevices = $.ephemeralBlockDevices;
        this.getPasswordData = $.getPasswordData;
        this.hibernation = $.hibernation;
        this.hostId = $.hostId;
        this.iamInstanceProfile = $.iamInstanceProfile;
        this.instanceInitiatedShutdownBehavior = $.instanceInitiatedShutdownBehavior;
        this.instanceInterruptionBehavior = $.instanceInterruptionBehavior;
        this.instanceInterruptionBehaviour = $.instanceInterruptionBehaviour;
        this.instanceType = $.instanceType;
        this.ipv6AddressCount = $.ipv6AddressCount;
        this.ipv6Addresses = $.ipv6Addresses;
        this.keyName = $.keyName;
        this.launchGroup = $.launchGroup;
        this.launchTemplate = $.launchTemplate;
        this.metadataOptions = $.metadataOptions;
        this.monitoring = $.monitoring;
        this.networkInterfaces = $.networkInterfaces;
        this.placementGroup = $.placementGroup;
        this.placementPartitionNumber = $.placementPartitionNumber;
        this.privateIp = $.privateIp;
        this.rootBlockDevice = $.rootBlockDevice;
        this.secondaryPrivateIps = $.secondaryPrivateIps;
        this.securityGroups = $.securityGroups;
        this.sourceDestCheck = $.sourceDestCheck;
        this.spotPrice = $.spotPrice;
        this.spotType = $.spotType;
        this.subnetId = $.subnetId;
        this.tags = $.tags;
        this.tenancy = $.tenancy;
        this.userData = $.userData;
        this.userDataBase64 = $.userDataBase64;
        this.validFrom = $.validFrom;
        this.validUntil = $.validUntil;
        this.volumeTags = $.volumeTags;
        this.vpcSecurityGroupIds = $.vpcSecurityGroupIds;
        this.waitForFulfillment = $.waitForFulfillment;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SpotInstanceRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SpotInstanceRequestArgs $;

        public Builder() {
            $ = new SpotInstanceRequestArgs();
        }

        public Builder(SpotInstanceRequestArgs defaults) {
            $ = new SpotInstanceRequestArgs(Objects.requireNonNull(defaults));
        }

        public Builder ami(@Nullable Output<String> ami) {
            $.ami = ami;
            return this;
        }

        public Builder ami(String ami) {
            return ami(Output.of(ami));
        }

        public Builder associatePublicIpAddress(@Nullable Output<Boolean> associatePublicIpAddress) {
            $.associatePublicIpAddress = associatePublicIpAddress;
            return this;
        }

        public Builder associatePublicIpAddress(Boolean associatePublicIpAddress) {
            return associatePublicIpAddress(Output.of(associatePublicIpAddress));
        }

        public Builder availabilityZone(@Nullable Output<String> availabilityZone) {
            $.availabilityZone = availabilityZone;
            return this;
        }

        public Builder availabilityZone(String availabilityZone) {
            return availabilityZone(Output.of(availabilityZone));
        }

        public Builder blockDurationMinutes(@Nullable Output<Integer> blockDurationMinutes) {
            $.blockDurationMinutes = blockDurationMinutes;
            return this;
        }

        public Builder blockDurationMinutes(Integer blockDurationMinutes) {
            return blockDurationMinutes(Output.of(blockDurationMinutes));
        }

        public Builder capacityReservationSpecification(@Nullable Output<SpotInstanceRequestCapacityReservationSpecificationArgs> capacityReservationSpecification) {
            $.capacityReservationSpecification = capacityReservationSpecification;
            return this;
        }

        public Builder capacityReservationSpecification(SpotInstanceRequestCapacityReservationSpecificationArgs capacityReservationSpecification) {
            return capacityReservationSpecification(Output.of(capacityReservationSpecification));
        }

        public Builder cpuCoreCount(@Nullable Output<Integer> cpuCoreCount) {
            $.cpuCoreCount = cpuCoreCount;
            return this;
        }

        public Builder cpuCoreCount(Integer cpuCoreCount) {
            return cpuCoreCount(Output.of(cpuCoreCount));
        }

        public Builder cpuThreadsPerCore(@Nullable Output<Integer> cpuThreadsPerCore) {
            $.cpuThreadsPerCore = cpuThreadsPerCore;
            return this;
        }

        public Builder cpuThreadsPerCore(Integer cpuThreadsPerCore) {
            return cpuThreadsPerCore(Output.of(cpuThreadsPerCore));
        }

        public Builder creditSpecification(@Nullable Output<SpotInstanceRequestCreditSpecificationArgs> creditSpecification) {
            $.creditSpecification = creditSpecification;
            return this;
        }

        public Builder creditSpecification(SpotInstanceRequestCreditSpecificationArgs creditSpecification) {
            return creditSpecification(Output.of(creditSpecification));
        }

        public Builder disableApiTermination(@Nullable Output<Boolean> disableApiTermination) {
            $.disableApiTermination = disableApiTermination;
            return this;
        }

        public Builder disableApiTermination(Boolean disableApiTermination) {
            return disableApiTermination(Output.of(disableApiTermination));
        }

        public Builder ebsBlockDevices(@Nullable Output<List<SpotInstanceRequestEbsBlockDeviceArgs>> ebsBlockDevices) {
            $.ebsBlockDevices = ebsBlockDevices;
            return this;
        }

        public Builder ebsBlockDevices(List<SpotInstanceRequestEbsBlockDeviceArgs> ebsBlockDevices) {
            return ebsBlockDevices(Output.of(ebsBlockDevices));
        }

        public Builder ebsBlockDevices(SpotInstanceRequestEbsBlockDeviceArgs... ebsBlockDevices) {
            return ebsBlockDevices(List.of(ebsBlockDevices));
        }

        public Builder ebsOptimized(@Nullable Output<Boolean> ebsOptimized) {
            $.ebsOptimized = ebsOptimized;
            return this;
        }

        public Builder ebsOptimized(Boolean ebsOptimized) {
            return ebsOptimized(Output.of(ebsOptimized));
        }

        public Builder enclaveOptions(@Nullable Output<SpotInstanceRequestEnclaveOptionsArgs> enclaveOptions) {
            $.enclaveOptions = enclaveOptions;
            return this;
        }

        public Builder enclaveOptions(SpotInstanceRequestEnclaveOptionsArgs enclaveOptions) {
            return enclaveOptions(Output.of(enclaveOptions));
        }

        public Builder ephemeralBlockDevices(@Nullable Output<List<SpotInstanceRequestEphemeralBlockDeviceArgs>> ephemeralBlockDevices) {
            $.ephemeralBlockDevices = ephemeralBlockDevices;
            return this;
        }

        public Builder ephemeralBlockDevices(List<SpotInstanceRequestEphemeralBlockDeviceArgs> ephemeralBlockDevices) {
            return ephemeralBlockDevices(Output.of(ephemeralBlockDevices));
        }

        public Builder ephemeralBlockDevices(SpotInstanceRequestEphemeralBlockDeviceArgs... ephemeralBlockDevices) {
            return ephemeralBlockDevices(List.of(ephemeralBlockDevices));
        }

        public Builder getPasswordData(@Nullable Output<Boolean> getPasswordData) {
            $.getPasswordData = getPasswordData;
            return this;
        }

        public Builder getPasswordData(Boolean getPasswordData) {
            return getPasswordData(Output.of(getPasswordData));
        }

        public Builder hibernation(@Nullable Output<Boolean> hibernation) {
            $.hibernation = hibernation;
            return this;
        }

        public Builder hibernation(Boolean hibernation) {
            return hibernation(Output.of(hibernation));
        }

        public Builder hostId(@Nullable Output<String> hostId) {
            $.hostId = hostId;
            return this;
        }

        public Builder hostId(String hostId) {
            return hostId(Output.of(hostId));
        }

        public Builder iamInstanceProfile(@Nullable Output<String> iamInstanceProfile) {
            $.iamInstanceProfile = iamInstanceProfile;
            return this;
        }

        public Builder iamInstanceProfile(String iamInstanceProfile) {
            return iamInstanceProfile(Output.of(iamInstanceProfile));
        }

        public Builder instanceInitiatedShutdownBehavior(@Nullable Output<String> instanceInitiatedShutdownBehavior) {
            $.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior;
            return this;
        }

        public Builder instanceInitiatedShutdownBehavior(String instanceInitiatedShutdownBehavior) {
            return instanceInitiatedShutdownBehavior(Output.of(instanceInitiatedShutdownBehavior));
        }

        public Builder instanceInterruptionBehavior(@Nullable Output<String> instanceInterruptionBehavior) {
            $.instanceInterruptionBehavior = instanceInterruptionBehavior;
            return this;
        }

        public Builder instanceInterruptionBehavior(String instanceInterruptionBehavior) {
            return instanceInterruptionBehavior(Output.of(instanceInterruptionBehavior));
        }

        public Builder instanceInterruptionBehaviour(@Nullable Output<String> instanceInterruptionBehaviour) {
            $.instanceInterruptionBehaviour = instanceInterruptionBehaviour;
            return this;
        }

        public Builder instanceInterruptionBehaviour(String instanceInterruptionBehaviour) {
            return instanceInterruptionBehaviour(Output.of(instanceInterruptionBehaviour));
        }

        public Builder instanceType(@Nullable Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        public Builder ipv6AddressCount(@Nullable Output<Integer> ipv6AddressCount) {
            $.ipv6AddressCount = ipv6AddressCount;
            return this;
        }

        public Builder ipv6AddressCount(Integer ipv6AddressCount) {
            return ipv6AddressCount(Output.of(ipv6AddressCount));
        }

        public Builder ipv6Addresses(@Nullable Output<List<String>> ipv6Addresses) {
            $.ipv6Addresses = ipv6Addresses;
            return this;
        }

        public Builder ipv6Addresses(List<String> ipv6Addresses) {
            return ipv6Addresses(Output.of(ipv6Addresses));
        }

        public Builder ipv6Addresses(String... ipv6Addresses) {
            return ipv6Addresses(List.of(ipv6Addresses));
        }

        public Builder keyName(@Nullable Output<String> keyName) {
            $.keyName = keyName;
            return this;
        }

        public Builder keyName(String keyName) {
            return keyName(Output.of(keyName));
        }

        public Builder launchGroup(@Nullable Output<String> launchGroup) {
            $.launchGroup = launchGroup;
            return this;
        }

        public Builder launchGroup(String launchGroup) {
            return launchGroup(Output.of(launchGroup));
        }

        public Builder launchTemplate(@Nullable Output<SpotInstanceRequestLaunchTemplateArgs> launchTemplate) {
            $.launchTemplate = launchTemplate;
            return this;
        }

        public Builder launchTemplate(SpotInstanceRequestLaunchTemplateArgs launchTemplate) {
            return launchTemplate(Output.of(launchTemplate));
        }

        public Builder metadataOptions(@Nullable Output<SpotInstanceRequestMetadataOptionsArgs> metadataOptions) {
            $.metadataOptions = metadataOptions;
            return this;
        }

        public Builder metadataOptions(SpotInstanceRequestMetadataOptionsArgs metadataOptions) {
            return metadataOptions(Output.of(metadataOptions));
        }

        public Builder monitoring(@Nullable Output<Boolean> monitoring) {
            $.monitoring = monitoring;
            return this;
        }

        public Builder monitoring(Boolean monitoring) {
            return monitoring(Output.of(monitoring));
        }

        public Builder networkInterfaces(@Nullable Output<List<SpotInstanceRequestNetworkInterfaceArgs>> networkInterfaces) {
            $.networkInterfaces = networkInterfaces;
            return this;
        }

        public Builder networkInterfaces(List<SpotInstanceRequestNetworkInterfaceArgs> networkInterfaces) {
            return networkInterfaces(Output.of(networkInterfaces));
        }

        public Builder networkInterfaces(SpotInstanceRequestNetworkInterfaceArgs... networkInterfaces) {
            return networkInterfaces(List.of(networkInterfaces));
        }

        public Builder placementGroup(@Nullable Output<String> placementGroup) {
            $.placementGroup = placementGroup;
            return this;
        }

        public Builder placementGroup(String placementGroup) {
            return placementGroup(Output.of(placementGroup));
        }

        public Builder placementPartitionNumber(@Nullable Output<Integer> placementPartitionNumber) {
            $.placementPartitionNumber = placementPartitionNumber;
            return this;
        }

        public Builder placementPartitionNumber(Integer placementPartitionNumber) {
            return placementPartitionNumber(Output.of(placementPartitionNumber));
        }

        public Builder privateIp(@Nullable Output<String> privateIp) {
            $.privateIp = privateIp;
            return this;
        }

        public Builder privateIp(String privateIp) {
            return privateIp(Output.of(privateIp));
        }

        public Builder rootBlockDevice(@Nullable Output<SpotInstanceRequestRootBlockDeviceArgs> rootBlockDevice) {
            $.rootBlockDevice = rootBlockDevice;
            return this;
        }

        public Builder rootBlockDevice(SpotInstanceRequestRootBlockDeviceArgs rootBlockDevice) {
            return rootBlockDevice(Output.of(rootBlockDevice));
        }

        public Builder secondaryPrivateIps(@Nullable Output<List<String>> secondaryPrivateIps) {
            $.secondaryPrivateIps = secondaryPrivateIps;
            return this;
        }

        public Builder secondaryPrivateIps(List<String> secondaryPrivateIps) {
            return secondaryPrivateIps(Output.of(secondaryPrivateIps));
        }

        public Builder secondaryPrivateIps(String... secondaryPrivateIps) {
            return secondaryPrivateIps(List.of(secondaryPrivateIps));
        }

        public Builder securityGroups(@Nullable Output<List<String>> securityGroups) {
            $.securityGroups = securityGroups;
            return this;
        }

        public Builder securityGroups(List<String> securityGroups) {
            return securityGroups(Output.of(securityGroups));
        }

        public Builder securityGroups(String... securityGroups) {
            return securityGroups(List.of(securityGroups));
        }

        public Builder sourceDestCheck(@Nullable Output<Boolean> sourceDestCheck) {
            $.sourceDestCheck = sourceDestCheck;
            return this;
        }

        public Builder sourceDestCheck(Boolean sourceDestCheck) {
            return sourceDestCheck(Output.of(sourceDestCheck));
        }

        public Builder spotPrice(@Nullable Output<String> spotPrice) {
            $.spotPrice = spotPrice;
            return this;
        }

        public Builder spotPrice(String spotPrice) {
            return spotPrice(Output.of(spotPrice));
        }

        public Builder spotType(@Nullable Output<String> spotType) {
            $.spotType = spotType;
            return this;
        }

        public Builder spotType(String spotType) {
            return spotType(Output.of(spotType));
        }

        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tenancy(@Nullable Output<String> tenancy) {
            $.tenancy = tenancy;
            return this;
        }

        public Builder tenancy(String tenancy) {
            return tenancy(Output.of(tenancy));
        }

        public Builder userData(@Nullable Output<String> userData) {
            $.userData = userData;
            return this;
        }

        public Builder userData(String userData) {
            return userData(Output.of(userData));
        }

        public Builder userDataBase64(@Nullable Output<String> userDataBase64) {
            $.userDataBase64 = userDataBase64;
            return this;
        }

        public Builder userDataBase64(String userDataBase64) {
            return userDataBase64(Output.of(userDataBase64));
        }

        public Builder validFrom(@Nullable Output<String> validFrom) {
            $.validFrom = validFrom;
            return this;
        }

        public Builder validFrom(String validFrom) {
            return validFrom(Output.of(validFrom));
        }

        public Builder validUntil(@Nullable Output<String> validUntil) {
            $.validUntil = validUntil;
            return this;
        }

        public Builder validUntil(String validUntil) {
            return validUntil(Output.of(validUntil));
        }

        public Builder volumeTags(@Nullable Output<Map<String,String>> volumeTags) {
            $.volumeTags = volumeTags;
            return this;
        }

        public Builder volumeTags(Map<String,String> volumeTags) {
            return volumeTags(Output.of(volumeTags));
        }

        public Builder vpcSecurityGroupIds(@Nullable Output<List<String>> vpcSecurityGroupIds) {
            $.vpcSecurityGroupIds = vpcSecurityGroupIds;
            return this;
        }

        public Builder vpcSecurityGroupIds(List<String> vpcSecurityGroupIds) {
            return vpcSecurityGroupIds(Output.of(vpcSecurityGroupIds));
        }

        public Builder vpcSecurityGroupIds(String... vpcSecurityGroupIds) {
            return vpcSecurityGroupIds(List.of(vpcSecurityGroupIds));
        }

        public Builder waitForFulfillment(@Nullable Output<Boolean> waitForFulfillment) {
            $.waitForFulfillment = waitForFulfillment;
            return this;
        }

        public Builder waitForFulfillment(Boolean waitForFulfillment) {
            return waitForFulfillment(Output.of(waitForFulfillment));
        }

        public SpotInstanceRequestArgs build() {
            return $;
        }
    }

}
