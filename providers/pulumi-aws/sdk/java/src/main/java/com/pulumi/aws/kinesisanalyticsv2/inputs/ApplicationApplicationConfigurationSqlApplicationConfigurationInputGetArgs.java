// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kinesisanalyticsv2.inputs;

import com.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismGetArgs;
import com.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationGetArgs;
import com.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaGetArgs;
import com.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationGetArgs;
import com.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputGetArgs;
import com.pulumi.aws.kinesisanalyticsv2.inputs.ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationApplicationConfigurationSqlApplicationConfigurationInputGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationApplicationConfigurationSqlApplicationConfigurationInputGetArgs Empty = new ApplicationApplicationConfigurationSqlApplicationConfigurationInputGetArgs();

    @Import(name="inAppStreamNames")
    private @Nullable Output<List<String>> inAppStreamNames;

    public Optional<Output<List<String>>> inAppStreamNames() {
        return Optional.ofNullable(this.inAppStreamNames);
    }

    @Import(name="inputId")
    private @Nullable Output<String> inputId;

    public Optional<Output<String>> inputId() {
        return Optional.ofNullable(this.inputId);
    }

    /**
     * Describes the number of in-application streams to create.
     * 
     */
    @Import(name="inputParallelism")
    private @Nullable Output<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismGetArgs> inputParallelism;

    /**
     * @return Describes the number of in-application streams to create.
     * 
     */
    public Optional<Output<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismGetArgs>> inputParallelism() {
        return Optional.ofNullable(this.inputParallelism);
    }

    /**
     * The input processing configuration for the input.
     * An input processor transforms records as they are received from the stream, before the application&#39;s SQL code executes.
     * 
     */
    @Import(name="inputProcessingConfiguration")
    private @Nullable Output<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationGetArgs> inputProcessingConfiguration;

    /**
     * @return The input processing configuration for the input.
     * An input processor transforms records as they are received from the stream, before the application&#39;s SQL code executes.
     * 
     */
    public Optional<Output<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationGetArgs>> inputProcessingConfiguration() {
        return Optional.ofNullable(this.inputProcessingConfiguration);
    }

    /**
     * Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.
     * 
     */
    @Import(name="inputSchema", required=true)
    private Output<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaGetArgs> inputSchema;

    /**
     * @return Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.
     * 
     */
    public Output<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaGetArgs> inputSchema() {
        return this.inputSchema;
    }

    /**
     * The point at which the application starts processing records from the streaming source.
     * 
     */
    @Import(name="inputStartingPositionConfigurations")
    private @Nullable Output<List<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationGetArgs>> inputStartingPositionConfigurations;

    /**
     * @return The point at which the application starts processing records from the streaming source.
     * 
     */
    public Optional<Output<List<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationGetArgs>>> inputStartingPositionConfigurations() {
        return Optional.ofNullable(this.inputStartingPositionConfigurations);
    }

    /**
     * If the streaming source is a Kinesis Data Firehose delivery stream, identifies the delivery stream&#39;s ARN.
     * 
     */
    @Import(name="kinesisFirehoseInput")
    private @Nullable Output<ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputGetArgs> kinesisFirehoseInput;

    /**
     * @return If the streaming source is a Kinesis Data Firehose delivery stream, identifies the delivery stream&#39;s ARN.
     * 
     */
    public Optional<Output<ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputGetArgs>> kinesisFirehoseInput() {
        return Optional.ofNullable(this.kinesisFirehoseInput);
    }

    /**
     * If the streaming source is a Kinesis data stream, identifies the stream&#39;s Amazon Resource Name (ARN).
     * 
     */
    @Import(name="kinesisStreamsInput")
    private @Nullable Output<ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputGetArgs> kinesisStreamsInput;

    /**
     * @return If the streaming source is a Kinesis data stream, identifies the stream&#39;s Amazon Resource Name (ARN).
     * 
     */
    public Optional<Output<ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputGetArgs>> kinesisStreamsInput() {
        return Optional.ofNullable(this.kinesisStreamsInput);
    }

    /**
     * The name prefix to use when creating an in-application stream.
     * 
     */
    @Import(name="namePrefix", required=true)
    private Output<String> namePrefix;

    /**
     * @return The name prefix to use when creating an in-application stream.
     * 
     */
    public Output<String> namePrefix() {
        return this.namePrefix;
    }

    private ApplicationApplicationConfigurationSqlApplicationConfigurationInputGetArgs() {}

    private ApplicationApplicationConfigurationSqlApplicationConfigurationInputGetArgs(ApplicationApplicationConfigurationSqlApplicationConfigurationInputGetArgs $) {
        this.inAppStreamNames = $.inAppStreamNames;
        this.inputId = $.inputId;
        this.inputParallelism = $.inputParallelism;
        this.inputProcessingConfiguration = $.inputProcessingConfiguration;
        this.inputSchema = $.inputSchema;
        this.inputStartingPositionConfigurations = $.inputStartingPositionConfigurations;
        this.kinesisFirehoseInput = $.kinesisFirehoseInput;
        this.kinesisStreamsInput = $.kinesisStreamsInput;
        this.namePrefix = $.namePrefix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationApplicationConfigurationSqlApplicationConfigurationInputGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationApplicationConfigurationSqlApplicationConfigurationInputGetArgs $;

        public Builder() {
            $ = new ApplicationApplicationConfigurationSqlApplicationConfigurationInputGetArgs();
        }

        public Builder(ApplicationApplicationConfigurationSqlApplicationConfigurationInputGetArgs defaults) {
            $ = new ApplicationApplicationConfigurationSqlApplicationConfigurationInputGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder inAppStreamNames(@Nullable Output<List<String>> inAppStreamNames) {
            $.inAppStreamNames = inAppStreamNames;
            return this;
        }

        public Builder inAppStreamNames(List<String> inAppStreamNames) {
            return inAppStreamNames(Output.of(inAppStreamNames));
        }

        public Builder inAppStreamNames(String... inAppStreamNames) {
            return inAppStreamNames(List.of(inAppStreamNames));
        }

        public Builder inputId(@Nullable Output<String> inputId) {
            $.inputId = inputId;
            return this;
        }

        public Builder inputId(String inputId) {
            return inputId(Output.of(inputId));
        }

        /**
         * @param inputParallelism Describes the number of in-application streams to create.
         * 
         * @return builder
         * 
         */
        public Builder inputParallelism(@Nullable Output<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismGetArgs> inputParallelism) {
            $.inputParallelism = inputParallelism;
            return this;
        }

        /**
         * @param inputParallelism Describes the number of in-application streams to create.
         * 
         * @return builder
         * 
         */
        public Builder inputParallelism(ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelismGetArgs inputParallelism) {
            return inputParallelism(Output.of(inputParallelism));
        }

        /**
         * @param inputProcessingConfiguration The input processing configuration for the input.
         * An input processor transforms records as they are received from the stream, before the application&#39;s SQL code executes.
         * 
         * @return builder
         * 
         */
        public Builder inputProcessingConfiguration(@Nullable Output<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationGetArgs> inputProcessingConfiguration) {
            $.inputProcessingConfiguration = inputProcessingConfiguration;
            return this;
        }

        /**
         * @param inputProcessingConfiguration The input processing configuration for the input.
         * An input processor transforms records as they are received from the stream, before the application&#39;s SQL code executes.
         * 
         * @return builder
         * 
         */
        public Builder inputProcessingConfiguration(ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationGetArgs inputProcessingConfiguration) {
            return inputProcessingConfiguration(Output.of(inputProcessingConfiguration));
        }

        /**
         * @param inputSchema Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.
         * 
         * @return builder
         * 
         */
        public Builder inputSchema(Output<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaGetArgs> inputSchema) {
            $.inputSchema = inputSchema;
            return this;
        }

        /**
         * @param inputSchema Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.
         * 
         * @return builder
         * 
         */
        public Builder inputSchema(ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaGetArgs inputSchema) {
            return inputSchema(Output.of(inputSchema));
        }

        /**
         * @param inputStartingPositionConfigurations The point at which the application starts processing records from the streaming source.
         * 
         * @return builder
         * 
         */
        public Builder inputStartingPositionConfigurations(@Nullable Output<List<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationGetArgs>> inputStartingPositionConfigurations) {
            $.inputStartingPositionConfigurations = inputStartingPositionConfigurations;
            return this;
        }

        /**
         * @param inputStartingPositionConfigurations The point at which the application starts processing records from the streaming source.
         * 
         * @return builder
         * 
         */
        public Builder inputStartingPositionConfigurations(List<ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationGetArgs> inputStartingPositionConfigurations) {
            return inputStartingPositionConfigurations(Output.of(inputStartingPositionConfigurations));
        }

        /**
         * @param inputStartingPositionConfigurations The point at which the application starts processing records from the streaming source.
         * 
         * @return builder
         * 
         */
        public Builder inputStartingPositionConfigurations(ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfigurationGetArgs... inputStartingPositionConfigurations) {
            return inputStartingPositionConfigurations(List.of(inputStartingPositionConfigurations));
        }

        /**
         * @param kinesisFirehoseInput If the streaming source is a Kinesis Data Firehose delivery stream, identifies the delivery stream&#39;s ARN.
         * 
         * @return builder
         * 
         */
        public Builder kinesisFirehoseInput(@Nullable Output<ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputGetArgs> kinesisFirehoseInput) {
            $.kinesisFirehoseInput = kinesisFirehoseInput;
            return this;
        }

        /**
         * @param kinesisFirehoseInput If the streaming source is a Kinesis Data Firehose delivery stream, identifies the delivery stream&#39;s ARN.
         * 
         * @return builder
         * 
         */
        public Builder kinesisFirehoseInput(ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInputGetArgs kinesisFirehoseInput) {
            return kinesisFirehoseInput(Output.of(kinesisFirehoseInput));
        }

        /**
         * @param kinesisStreamsInput If the streaming source is a Kinesis data stream, identifies the stream&#39;s Amazon Resource Name (ARN).
         * 
         * @return builder
         * 
         */
        public Builder kinesisStreamsInput(@Nullable Output<ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputGetArgs> kinesisStreamsInput) {
            $.kinesisStreamsInput = kinesisStreamsInput;
            return this;
        }

        /**
         * @param kinesisStreamsInput If the streaming source is a Kinesis data stream, identifies the stream&#39;s Amazon Resource Name (ARN).
         * 
         * @return builder
         * 
         */
        public Builder kinesisStreamsInput(ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInputGetArgs kinesisStreamsInput) {
            return kinesisStreamsInput(Output.of(kinesisStreamsInput));
        }

        /**
         * @param namePrefix The name prefix to use when creating an in-application stream.
         * 
         * @return builder
         * 
         */
        public Builder namePrefix(Output<String> namePrefix) {
            $.namePrefix = namePrefix;
            return this;
        }

        /**
         * @param namePrefix The name prefix to use when creating an in-application stream.
         * 
         * @return builder
         * 
         */
        public Builder namePrefix(String namePrefix) {
            return namePrefix(Output.of(namePrefix));
        }

        public ApplicationApplicationConfigurationSqlApplicationConfigurationInputGetArgs build() {
            $.inputSchema = Objects.requireNonNull($.inputSchema, "expected parameter 'inputSchema' to be non-null");
            $.namePrefix = Objects.requireNonNull($.namePrefix, "expected parameter 'namePrefix' to be non-null");
            return $;
        }
    }

}
