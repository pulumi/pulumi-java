// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.msk.inputs;

import com.pulumi.aws.msk.inputs.ClusterBrokerNodeGroupInfoGetArgs;
import com.pulumi.aws.msk.inputs.ClusterClientAuthenticationGetArgs;
import com.pulumi.aws.msk.inputs.ClusterConfigurationInfoGetArgs;
import com.pulumi.aws.msk.inputs.ClusterEncryptionInfoGetArgs;
import com.pulumi.aws.msk.inputs.ClusterLoggingInfoGetArgs;
import com.pulumi.aws.msk.inputs.ClusterOpenMonitoringGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterState extends com.pulumi.resources.ResourceArgs {

    public static final ClusterState Empty = new ClusterState();

    /**
     * Amazon Resource Name (ARN) of the MSK Configuration to use in the cluster.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Comma separated list of one or more hostname:port pairs of kafka brokers suitable to bootstrap connectivity to the kafka cluster. Contains a value if `encryption_info.0.encryption_in_transit.0.client_broker` is set to `PLAINTEXT` or `TLS_PLAINTEXT`. The resource sorts values alphabetically. AWS may not always return all endpoints so this value is not guaranteed to be stable across applies.
     * 
     */
    @Import(name="bootstrapBrokers")
    private @Nullable Output<String> bootstrapBrokers;

    public Optional<Output<String>> bootstrapBrokers() {
        return Optional.ofNullable(this.bootstrapBrokers);
    }

    /**
     * One or more DNS names (or IP addresses) and SASL IAM port pairs. For example, `b-1.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9098,b-2.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9098,b-3.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9098`. This attribute will have a value if `encryption_info.0.encryption_in_transit.0.client_broker` is set to `TLS_PLAINTEXT` or `TLS` and `client_authentication.0.sasl.0.iam` is set to `true`. The resource sorts the list alphabetically. AWS may not always return all endpoints so the values may not be stable across applies.
     * 
     */
    @Import(name="bootstrapBrokersSaslIam")
    private @Nullable Output<String> bootstrapBrokersSaslIam;

    public Optional<Output<String>> bootstrapBrokersSaslIam() {
        return Optional.ofNullable(this.bootstrapBrokersSaslIam);
    }

    /**
     * One or more DNS names (or IP addresses) and SASL SCRAM port pairs. For example, `b-1.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9096,b-2.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9096,b-3.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9096`. This attribute will have a value if `encryption_info.0.encryption_in_transit.0.client_broker` is set to `TLS_PLAINTEXT` or `TLS` and `client_authentication.0.sasl.0.scram` is set to `true`. The resource sorts the list alphabetically. AWS may not always return all endpoints so the values may not be stable across applies.
     * 
     */
    @Import(name="bootstrapBrokersSaslScram")
    private @Nullable Output<String> bootstrapBrokersSaslScram;

    public Optional<Output<String>> bootstrapBrokersSaslScram() {
        return Optional.ofNullable(this.bootstrapBrokersSaslScram);
    }

    /**
     * One or more DNS names (or IP addresses) and TLS port pairs. For example, `b-1.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9094,b-2.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9094,b-3.exampleClusterName.abcde.c2.kafka.us-east-1.amazonaws.com:9094`. This attribute will have a value if `encryption_info.0.encryption_in_transit.0.client_broker` is set to `TLS_PLAINTEXT` or `TLS`. The resource sorts the list alphabetically. AWS may not always return all endpoints so the values may not be stable across applies.
     * 
     */
    @Import(name="bootstrapBrokersTls")
    private @Nullable Output<String> bootstrapBrokersTls;

    public Optional<Output<String>> bootstrapBrokersTls() {
        return Optional.ofNullable(this.bootstrapBrokersTls);
    }

    /**
     * Configuration block for the broker nodes of the Kafka cluster.
     * 
     */
    @Import(name="brokerNodeGroupInfo")
    private @Nullable Output<ClusterBrokerNodeGroupInfoGetArgs> brokerNodeGroupInfo;

    public Optional<Output<ClusterBrokerNodeGroupInfoGetArgs>> brokerNodeGroupInfo() {
        return Optional.ofNullable(this.brokerNodeGroupInfo);
    }

    /**
     * Configuration block for specifying a client authentication. See below.
     * 
     */
    @Import(name="clientAuthentication")
    private @Nullable Output<ClusterClientAuthenticationGetArgs> clientAuthentication;

    public Optional<Output<ClusterClientAuthenticationGetArgs>> clientAuthentication() {
        return Optional.ofNullable(this.clientAuthentication);
    }

    /**
     * Name of the MSK cluster.
     * 
     */
    @Import(name="clusterName")
    private @Nullable Output<String> clusterName;

    public Optional<Output<String>> clusterName() {
        return Optional.ofNullable(this.clusterName);
    }

    /**
     * Configuration block for specifying a MSK Configuration to attach to Kafka brokers. See below.
     * 
     */
    @Import(name="configurationInfo")
    private @Nullable Output<ClusterConfigurationInfoGetArgs> configurationInfo;

    public Optional<Output<ClusterConfigurationInfoGetArgs>> configurationInfo() {
        return Optional.ofNullable(this.configurationInfo);
    }

    /**
     * Current version of the MSK Cluster used for updates, e.g., `K13V1IB3VIYZZH`
     * * `encryption_info.0.encryption_at_rest_kms_key_arn` - The ARN of the KMS key used for encryption at rest of the broker data volumes.
     * 
     */
    @Import(name="currentVersion")
    private @Nullable Output<String> currentVersion;

    public Optional<Output<String>> currentVersion() {
        return Optional.ofNullable(this.currentVersion);
    }

    /**
     * Configuration block for specifying encryption. See below.
     * 
     */
    @Import(name="encryptionInfo")
    private @Nullable Output<ClusterEncryptionInfoGetArgs> encryptionInfo;

    public Optional<Output<ClusterEncryptionInfoGetArgs>> encryptionInfo() {
        return Optional.ofNullable(this.encryptionInfo);
    }

    /**
     * Specify the desired enhanced MSK CloudWatch monitoring level.  See [Monitoring Amazon MSK with Amazon CloudWatch](https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html)
     * 
     */
    @Import(name="enhancedMonitoring")
    private @Nullable Output<String> enhancedMonitoring;

    public Optional<Output<String>> enhancedMonitoring() {
        return Optional.ofNullable(this.enhancedMonitoring);
    }

    /**
     * Specify the desired Kafka software version.
     * 
     */
    @Import(name="kafkaVersion")
    private @Nullable Output<String> kafkaVersion;

    public Optional<Output<String>> kafkaVersion() {
        return Optional.ofNullable(this.kafkaVersion);
    }

    /**
     * Configuration block for streaming broker logs to Cloudwatch/S3/Kinesis Firehose. See below.
     * 
     */
    @Import(name="loggingInfo")
    private @Nullable Output<ClusterLoggingInfoGetArgs> loggingInfo;

    public Optional<Output<ClusterLoggingInfoGetArgs>> loggingInfo() {
        return Optional.ofNullable(this.loggingInfo);
    }

    /**
     * The desired total number of broker nodes in the kafka cluster.  It must be a multiple of the number of specified client subnets.
     * 
     */
    @Import(name="numberOfBrokerNodes")
    private @Nullable Output<Integer> numberOfBrokerNodes;

    public Optional<Output<Integer>> numberOfBrokerNodes() {
        return Optional.ofNullable(this.numberOfBrokerNodes);
    }

    /**
     * Configuration block for JMX and Node monitoring for the MSK cluster. See below.
     * 
     */
    @Import(name="openMonitoring")
    private @Nullable Output<ClusterOpenMonitoringGetArgs> openMonitoring;

    public Optional<Output<ClusterOpenMonitoringGetArgs>> openMonitoring() {
        return Optional.ofNullable(this.openMonitoring);
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * A comma separated list of one or more hostname:port pairs to use to connect to the Apache Zookeeper cluster. The returned values are sorted alphbetically. The AWS API may not return all endpoints, so this value is not guaranteed to be stable across applies.
     * 
     */
    @Import(name="zookeeperConnectString")
    private @Nullable Output<String> zookeeperConnectString;

    public Optional<Output<String>> zookeeperConnectString() {
        return Optional.ofNullable(this.zookeeperConnectString);
    }

    /**
     * A comma separated list of one or more hostname:port pairs to use to connect to the Apache Zookeeper cluster via TLS. The returned values are sorted alphbetically. The AWS API may not return all endpoints, so this value is not guaranteed to be stable across applies.
     * 
     */
    @Import(name="zookeeperConnectStringTls")
    private @Nullable Output<String> zookeeperConnectStringTls;

    public Optional<Output<String>> zookeeperConnectStringTls() {
        return Optional.ofNullable(this.zookeeperConnectStringTls);
    }

    private ClusterState() {}

    private ClusterState(ClusterState $) {
        this.arn = $.arn;
        this.bootstrapBrokers = $.bootstrapBrokers;
        this.bootstrapBrokersSaslIam = $.bootstrapBrokersSaslIam;
        this.bootstrapBrokersSaslScram = $.bootstrapBrokersSaslScram;
        this.bootstrapBrokersTls = $.bootstrapBrokersTls;
        this.brokerNodeGroupInfo = $.brokerNodeGroupInfo;
        this.clientAuthentication = $.clientAuthentication;
        this.clusterName = $.clusterName;
        this.configurationInfo = $.configurationInfo;
        this.currentVersion = $.currentVersion;
        this.encryptionInfo = $.encryptionInfo;
        this.enhancedMonitoring = $.enhancedMonitoring;
        this.kafkaVersion = $.kafkaVersion;
        this.loggingInfo = $.loggingInfo;
        this.numberOfBrokerNodes = $.numberOfBrokerNodes;
        this.openMonitoring = $.openMonitoring;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.zookeeperConnectString = $.zookeeperConnectString;
        this.zookeeperConnectStringTls = $.zookeeperConnectStringTls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterState $;

        public Builder() {
            $ = new ClusterState();
        }

        public Builder(ClusterState defaults) {
            $ = new ClusterState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder bootstrapBrokers(@Nullable Output<String> bootstrapBrokers) {
            $.bootstrapBrokers = bootstrapBrokers;
            return this;
        }

        public Builder bootstrapBrokers(String bootstrapBrokers) {
            return bootstrapBrokers(Output.of(bootstrapBrokers));
        }

        public Builder bootstrapBrokersSaslIam(@Nullable Output<String> bootstrapBrokersSaslIam) {
            $.bootstrapBrokersSaslIam = bootstrapBrokersSaslIam;
            return this;
        }

        public Builder bootstrapBrokersSaslIam(String bootstrapBrokersSaslIam) {
            return bootstrapBrokersSaslIam(Output.of(bootstrapBrokersSaslIam));
        }

        public Builder bootstrapBrokersSaslScram(@Nullable Output<String> bootstrapBrokersSaslScram) {
            $.bootstrapBrokersSaslScram = bootstrapBrokersSaslScram;
            return this;
        }

        public Builder bootstrapBrokersSaslScram(String bootstrapBrokersSaslScram) {
            return bootstrapBrokersSaslScram(Output.of(bootstrapBrokersSaslScram));
        }

        public Builder bootstrapBrokersTls(@Nullable Output<String> bootstrapBrokersTls) {
            $.bootstrapBrokersTls = bootstrapBrokersTls;
            return this;
        }

        public Builder bootstrapBrokersTls(String bootstrapBrokersTls) {
            return bootstrapBrokersTls(Output.of(bootstrapBrokersTls));
        }

        public Builder brokerNodeGroupInfo(@Nullable Output<ClusterBrokerNodeGroupInfoGetArgs> brokerNodeGroupInfo) {
            $.brokerNodeGroupInfo = brokerNodeGroupInfo;
            return this;
        }

        public Builder brokerNodeGroupInfo(ClusterBrokerNodeGroupInfoGetArgs brokerNodeGroupInfo) {
            return brokerNodeGroupInfo(Output.of(brokerNodeGroupInfo));
        }

        public Builder clientAuthentication(@Nullable Output<ClusterClientAuthenticationGetArgs> clientAuthentication) {
            $.clientAuthentication = clientAuthentication;
            return this;
        }

        public Builder clientAuthentication(ClusterClientAuthenticationGetArgs clientAuthentication) {
            return clientAuthentication(Output.of(clientAuthentication));
        }

        public Builder clusterName(@Nullable Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        public Builder configurationInfo(@Nullable Output<ClusterConfigurationInfoGetArgs> configurationInfo) {
            $.configurationInfo = configurationInfo;
            return this;
        }

        public Builder configurationInfo(ClusterConfigurationInfoGetArgs configurationInfo) {
            return configurationInfo(Output.of(configurationInfo));
        }

        public Builder currentVersion(@Nullable Output<String> currentVersion) {
            $.currentVersion = currentVersion;
            return this;
        }

        public Builder currentVersion(String currentVersion) {
            return currentVersion(Output.of(currentVersion));
        }

        public Builder encryptionInfo(@Nullable Output<ClusterEncryptionInfoGetArgs> encryptionInfo) {
            $.encryptionInfo = encryptionInfo;
            return this;
        }

        public Builder encryptionInfo(ClusterEncryptionInfoGetArgs encryptionInfo) {
            return encryptionInfo(Output.of(encryptionInfo));
        }

        public Builder enhancedMonitoring(@Nullable Output<String> enhancedMonitoring) {
            $.enhancedMonitoring = enhancedMonitoring;
            return this;
        }

        public Builder enhancedMonitoring(String enhancedMonitoring) {
            return enhancedMonitoring(Output.of(enhancedMonitoring));
        }

        public Builder kafkaVersion(@Nullable Output<String> kafkaVersion) {
            $.kafkaVersion = kafkaVersion;
            return this;
        }

        public Builder kafkaVersion(String kafkaVersion) {
            return kafkaVersion(Output.of(kafkaVersion));
        }

        public Builder loggingInfo(@Nullable Output<ClusterLoggingInfoGetArgs> loggingInfo) {
            $.loggingInfo = loggingInfo;
            return this;
        }

        public Builder loggingInfo(ClusterLoggingInfoGetArgs loggingInfo) {
            return loggingInfo(Output.of(loggingInfo));
        }

        public Builder numberOfBrokerNodes(@Nullable Output<Integer> numberOfBrokerNodes) {
            $.numberOfBrokerNodes = numberOfBrokerNodes;
            return this;
        }

        public Builder numberOfBrokerNodes(Integer numberOfBrokerNodes) {
            return numberOfBrokerNodes(Output.of(numberOfBrokerNodes));
        }

        public Builder openMonitoring(@Nullable Output<ClusterOpenMonitoringGetArgs> openMonitoring) {
            $.openMonitoring = openMonitoring;
            return this;
        }

        public Builder openMonitoring(ClusterOpenMonitoringGetArgs openMonitoring) {
            return openMonitoring(Output.of(openMonitoring));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder zookeeperConnectString(@Nullable Output<String> zookeeperConnectString) {
            $.zookeeperConnectString = zookeeperConnectString;
            return this;
        }

        public Builder zookeeperConnectString(String zookeeperConnectString) {
            return zookeeperConnectString(Output.of(zookeeperConnectString));
        }

        public Builder zookeeperConnectStringTls(@Nullable Output<String> zookeeperConnectStringTls) {
            $.zookeeperConnectStringTls = zookeeperConnectStringTls;
            return this;
        }

        public Builder zookeeperConnectStringTls(String zookeeperConnectStringTls) {
            return zookeeperConnectStringTls(Output.of(zookeeperConnectStringTls));
        }

        public ClusterState build() {
            return $;
        }
    }

}
