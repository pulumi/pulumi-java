// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class CatalogDatabaseTargetDatabaseGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final CatalogDatabaseTargetDatabaseGetArgs Empty = new CatalogDatabaseTargetDatabaseGetArgs();

    /**
     * ID of the Data Catalog in which the database resides.
     * 
     */
    @Import(name="catalogId", required=true)
    private Output<String> catalogId;

    /**
     * @return ID of the Data Catalog in which the database resides.
     * 
     */
    public Output<String> catalogId() {
        return this.catalogId;
    }

    /**
     * Name of the catalog database.
     * 
     */
    @Import(name="databaseName", required=true)
    private Output<String> databaseName;

    /**
     * @return Name of the catalog database.
     * 
     */
    public Output<String> databaseName() {
        return this.databaseName;
    }

    private CatalogDatabaseTargetDatabaseGetArgs() {}

    private CatalogDatabaseTargetDatabaseGetArgs(CatalogDatabaseTargetDatabaseGetArgs $) {
        this.catalogId = $.catalogId;
        this.databaseName = $.databaseName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CatalogDatabaseTargetDatabaseGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CatalogDatabaseTargetDatabaseGetArgs $;

        public Builder() {
            $ = new CatalogDatabaseTargetDatabaseGetArgs();
        }

        public Builder(CatalogDatabaseTargetDatabaseGetArgs defaults) {
            $ = new CatalogDatabaseTargetDatabaseGetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param catalogId ID of the Data Catalog in which the database resides.
         * 
         * @return builder
         * 
         */
        public Builder catalogId(Output<String> catalogId) {
            $.catalogId = catalogId;
            return this;
        }

        /**
         * @param catalogId ID of the Data Catalog in which the database resides.
         * 
         * @return builder
         * 
         */
        public Builder catalogId(String catalogId) {
            return catalogId(Output.of(catalogId));
        }

        /**
         * @param databaseName Name of the catalog database.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName Name of the catalog database.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        public CatalogDatabaseTargetDatabaseGetArgs build() {
            $.catalogId = Objects.requireNonNull($.catalogId, "expected parameter 'catalogId' to be non-null");
            $.databaseName = Objects.requireNonNull($.databaseName, "expected parameter 'databaseName' to be non-null");
            return $;
        }
    }

}
