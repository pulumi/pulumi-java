// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.memorydb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterArgs Empty = new ClusterArgs();

    /**
     * The name of the Access Control List to associate with the cluster.
     * 
     */
    @Import(name="aclName", required=true)
      private final Output<String> aclName;

    public Output<String> aclName() {
        return this.aclName;
    }

    /**
     * When set to `true`, the cluster will automatically receive minor engine version upgrades after launch. Defaults to `true`.
     * 
     */
    @Import(name="autoMinorVersionUpgrade")
      private final @Nullable Output<Boolean> autoMinorVersionUpgrade;

    public Output<Boolean> autoMinorVersionUpgrade() {
        return this.autoMinorVersionUpgrade == null ? Codegen.empty() : this.autoMinorVersionUpgrade;
    }

    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Version number of the Redis engine to be used for the cluster. Downgrades are not supported.
     * 
     */
    @Import(name="engineVersion")
      private final @Nullable Output<String> engineVersion;

    public Output<String> engineVersion() {
        return this.engineVersion == null ? Codegen.empty() : this.engineVersion;
    }

    /**
     * Name of the final cluster snapshot to be created when this resource is deleted. If omitted, no final snapshot will be made.
     * 
     */
    @Import(name="finalSnapshotName")
      private final @Nullable Output<String> finalSnapshotName;

    public Output<String> finalSnapshotName() {
        return this.finalSnapshotName == null ? Codegen.empty() : this.finalSnapshotName;
    }

    /**
     * ARN of the KMS key used to encrypt the cluster at rest.
     * 
     */
    @Import(name="kmsKeyArn")
      private final @Nullable Output<String> kmsKeyArn;

    public Output<String> kmsKeyArn() {
        return this.kmsKeyArn == null ? Codegen.empty() : this.kmsKeyArn;
    }

    /**
     * Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format `ddd:hh24:mi-ddd:hh24:mi` (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example: `sun:23:00-mon:01:30`.
     * 
     */
    @Import(name="maintenanceWindow")
      private final @Nullable Output<String> maintenanceWindow;

    public Output<String> maintenanceWindow() {
        return this.maintenanceWindow == null ? Codegen.empty() : this.maintenanceWindow;
    }

    /**
     * Name of this node.
     * * `endpoint`
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`.
     * 
     */
    @Import(name="namePrefix")
      private final @Nullable Output<String> namePrefix;

    public Output<String> namePrefix() {
        return this.namePrefix == null ? Codegen.empty() : this.namePrefix;
    }

    /**
     * The compute and memory capacity of the nodes in the cluster. See AWS documentation on [supported node types](https://docs.aws.amazon.com/memorydb/latest/devguide/nodes.supportedtypes.html) as well as [vertical scaling](https://docs.aws.amazon.com/memorydb/latest/devguide/cluster-vertical-scaling.html).
     * 
     */
    @Import(name="nodeType", required=true)
      private final Output<String> nodeType;

    public Output<String> nodeType() {
        return this.nodeType;
    }

    /**
     * The number of replicas to apply to each shard, up to a maximum of 5. Defaults to `1` (i.e. 2 nodes per shard).
     * 
     */
    @Import(name="numReplicasPerShard")
      private final @Nullable Output<Integer> numReplicasPerShard;

    public Output<Integer> numReplicasPerShard() {
        return this.numReplicasPerShard == null ? Codegen.empty() : this.numReplicasPerShard;
    }

    /**
     * The number of shards in the cluster. Defaults to `1`.
     * 
     */
    @Import(name="numShards")
      private final @Nullable Output<Integer> numShards;

    public Output<Integer> numShards() {
        return this.numShards == null ? Codegen.empty() : this.numShards;
    }

    /**
     * The name of the parameter group associated with the cluster.
     * 
     */
    @Import(name="parameterGroupName")
      private final @Nullable Output<String> parameterGroupName;

    public Output<String> parameterGroupName() {
        return this.parameterGroupName == null ? Codegen.empty() : this.parameterGroupName;
    }

    /**
     * The port number on which each of the nodes accepts connections. Defaults to `6379`.
     * 
     */
    @Import(name="port")
      private final @Nullable Output<Integer> port;

    public Output<Integer> port() {
        return this.port == null ? Codegen.empty() : this.port;
    }

    /**
     * Set of VPC Security Group ID-s to associate with this cluster.
     * 
     */
    @Import(name="securityGroupIds")
      private final @Nullable Output<List<String>> securityGroupIds;

    public Output<List<String>> securityGroupIds() {
        return this.securityGroupIds == null ? Codegen.empty() : this.securityGroupIds;
    }

    /**
     * List of ARN-s that uniquely identify RDB snapshot files stored in S3. The snapshot files will be used to populate the new cluster. Object names in the ARN-s cannot contain any commas.
     * 
     */
    @Import(name="snapshotArns")
      private final @Nullable Output<String> snapshotArns;

    public Output<String> snapshotArns() {
        return this.snapshotArns == null ? Codegen.empty() : this.snapshotArns;
    }

    /**
     * The name of a snapshot from which to restore data into the new cluster.
     * 
     */
    @Import(name="snapshotName")
      private final @Nullable Output<String> snapshotName;

    public Output<String> snapshotName() {
        return this.snapshotName == null ? Codegen.empty() : this.snapshotName;
    }

    /**
     * The number of days for which MemoryDB retains automatic snapshots before deleting them. When set to `0`, automatic backups are disabled. Defaults to `0`.
     * 
     */
    @Import(name="snapshotRetentionLimit")
      private final @Nullable Output<Integer> snapshotRetentionLimit;

    public Output<Integer> snapshotRetentionLimit() {
        return this.snapshotRetentionLimit == null ? Codegen.empty() : this.snapshotRetentionLimit;
    }

    /**
     * The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your shard. Example: `05:00-09:00`.
     * 
     */
    @Import(name="snapshotWindow")
      private final @Nullable Output<String> snapshotWindow;

    public Output<String> snapshotWindow() {
        return this.snapshotWindow == null ? Codegen.empty() : this.snapshotWindow;
    }

    /**
     * ARN of the SNS topic to which cluster notifications are sent.
     * 
     */
    @Import(name="snsTopicArn")
      private final @Nullable Output<String> snsTopicArn;

    public Output<String> snsTopicArn() {
        return this.snsTopicArn == null ? Codegen.empty() : this.snsTopicArn;
    }

    /**
     * The name of the subnet group to be used for the cluster. Defaults to a subnet group consisting of default VPC subnets.
     * 
     */
    @Import(name="subnetGroupName")
      private final @Nullable Output<String> subnetGroupName;

    public Output<String> subnetGroupName() {
        return this.subnetGroupName == null ? Codegen.empty() : this.subnetGroupName;
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll == null ? Codegen.empty() : this.tagsAll;
    }

    /**
     * A flag to enable in-transit encryption on the cluster. When set to `false`, the `acl_name` must be `open-access`. Defaults to `true`.
     * 
     */
    @Import(name="tlsEnabled")
      private final @Nullable Output<Boolean> tlsEnabled;

    public Output<Boolean> tlsEnabled() {
        return this.tlsEnabled == null ? Codegen.empty() : this.tlsEnabled;
    }

    public ClusterArgs(
        Output<String> aclName,
        @Nullable Output<Boolean> autoMinorVersionUpgrade,
        @Nullable Output<String> description,
        @Nullable Output<String> engineVersion,
        @Nullable Output<String> finalSnapshotName,
        @Nullable Output<String> kmsKeyArn,
        @Nullable Output<String> maintenanceWindow,
        @Nullable Output<String> name,
        @Nullable Output<String> namePrefix,
        Output<String> nodeType,
        @Nullable Output<Integer> numReplicasPerShard,
        @Nullable Output<Integer> numShards,
        @Nullable Output<String> parameterGroupName,
        @Nullable Output<Integer> port,
        @Nullable Output<List<String>> securityGroupIds,
        @Nullable Output<String> snapshotArns,
        @Nullable Output<String> snapshotName,
        @Nullable Output<Integer> snapshotRetentionLimit,
        @Nullable Output<String> snapshotWindow,
        @Nullable Output<String> snsTopicArn,
        @Nullable Output<String> subnetGroupName,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll,
        @Nullable Output<Boolean> tlsEnabled) {
        this.aclName = Objects.requireNonNull(aclName, "expected parameter 'aclName' to be non-null");
        this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
        this.description = description;
        this.engineVersion = engineVersion;
        this.finalSnapshotName = finalSnapshotName;
        this.kmsKeyArn = kmsKeyArn;
        this.maintenanceWindow = maintenanceWindow;
        this.name = name;
        this.namePrefix = namePrefix;
        this.nodeType = Objects.requireNonNull(nodeType, "expected parameter 'nodeType' to be non-null");
        this.numReplicasPerShard = numReplicasPerShard;
        this.numShards = numShards;
        this.parameterGroupName = parameterGroupName;
        this.port = port;
        this.securityGroupIds = securityGroupIds;
        this.snapshotArns = snapshotArns;
        this.snapshotName = snapshotName;
        this.snapshotRetentionLimit = snapshotRetentionLimit;
        this.snapshotWindow = snapshotWindow;
        this.snsTopicArn = snsTopicArn;
        this.subnetGroupName = subnetGroupName;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.tlsEnabled = tlsEnabled;
    }

    private ClusterArgs() {
        this.aclName = Codegen.empty();
        this.autoMinorVersionUpgrade = Codegen.empty();
        this.description = Codegen.empty();
        this.engineVersion = Codegen.empty();
        this.finalSnapshotName = Codegen.empty();
        this.kmsKeyArn = Codegen.empty();
        this.maintenanceWindow = Codegen.empty();
        this.name = Codegen.empty();
        this.namePrefix = Codegen.empty();
        this.nodeType = Codegen.empty();
        this.numReplicasPerShard = Codegen.empty();
        this.numShards = Codegen.empty();
        this.parameterGroupName = Codegen.empty();
        this.port = Codegen.empty();
        this.securityGroupIds = Codegen.empty();
        this.snapshotArns = Codegen.empty();
        this.snapshotName = Codegen.empty();
        this.snapshotRetentionLimit = Codegen.empty();
        this.snapshotWindow = Codegen.empty();
        this.snsTopicArn = Codegen.empty();
        this.subnetGroupName = Codegen.empty();
        this.tags = Codegen.empty();
        this.tagsAll = Codegen.empty();
        this.tlsEnabled = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> aclName;
        private @Nullable Output<Boolean> autoMinorVersionUpgrade;
        private @Nullable Output<String> description;
        private @Nullable Output<String> engineVersion;
        private @Nullable Output<String> finalSnapshotName;
        private @Nullable Output<String> kmsKeyArn;
        private @Nullable Output<String> maintenanceWindow;
        private @Nullable Output<String> name;
        private @Nullable Output<String> namePrefix;
        private Output<String> nodeType;
        private @Nullable Output<Integer> numReplicasPerShard;
        private @Nullable Output<Integer> numShards;
        private @Nullable Output<String> parameterGroupName;
        private @Nullable Output<Integer> port;
        private @Nullable Output<List<String>> securityGroupIds;
        private @Nullable Output<String> snapshotArns;
        private @Nullable Output<String> snapshotName;
        private @Nullable Output<Integer> snapshotRetentionLimit;
        private @Nullable Output<String> snapshotWindow;
        private @Nullable Output<String> snsTopicArn;
        private @Nullable Output<String> subnetGroupName;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;
        private @Nullable Output<Boolean> tlsEnabled;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aclName = defaults.aclName;
    	      this.autoMinorVersionUpgrade = defaults.autoMinorVersionUpgrade;
    	      this.description = defaults.description;
    	      this.engineVersion = defaults.engineVersion;
    	      this.finalSnapshotName = defaults.finalSnapshotName;
    	      this.kmsKeyArn = defaults.kmsKeyArn;
    	      this.maintenanceWindow = defaults.maintenanceWindow;
    	      this.name = defaults.name;
    	      this.namePrefix = defaults.namePrefix;
    	      this.nodeType = defaults.nodeType;
    	      this.numReplicasPerShard = defaults.numReplicasPerShard;
    	      this.numShards = defaults.numShards;
    	      this.parameterGroupName = defaults.parameterGroupName;
    	      this.port = defaults.port;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.snapshotArns = defaults.snapshotArns;
    	      this.snapshotName = defaults.snapshotName;
    	      this.snapshotRetentionLimit = defaults.snapshotRetentionLimit;
    	      this.snapshotWindow = defaults.snapshotWindow;
    	      this.snsTopicArn = defaults.snsTopicArn;
    	      this.subnetGroupName = defaults.subnetGroupName;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.tlsEnabled = defaults.tlsEnabled;
        }

        public Builder aclName(Output<String> aclName) {
            this.aclName = Objects.requireNonNull(aclName);
            return this;
        }
        public Builder aclName(String aclName) {
            this.aclName = Output.of(Objects.requireNonNull(aclName));
            return this;
        }
        public Builder autoMinorVersionUpgrade(@Nullable Output<Boolean> autoMinorVersionUpgrade) {
            this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
            return this;
        }
        public Builder autoMinorVersionUpgrade(@Nullable Boolean autoMinorVersionUpgrade) {
            this.autoMinorVersionUpgrade = Codegen.ofNullable(autoMinorVersionUpgrade);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder engineVersion(@Nullable Output<String> engineVersion) {
            this.engineVersion = engineVersion;
            return this;
        }
        public Builder engineVersion(@Nullable String engineVersion) {
            this.engineVersion = Codegen.ofNullable(engineVersion);
            return this;
        }
        public Builder finalSnapshotName(@Nullable Output<String> finalSnapshotName) {
            this.finalSnapshotName = finalSnapshotName;
            return this;
        }
        public Builder finalSnapshotName(@Nullable String finalSnapshotName) {
            this.finalSnapshotName = Codegen.ofNullable(finalSnapshotName);
            return this;
        }
        public Builder kmsKeyArn(@Nullable Output<String> kmsKeyArn) {
            this.kmsKeyArn = kmsKeyArn;
            return this;
        }
        public Builder kmsKeyArn(@Nullable String kmsKeyArn) {
            this.kmsKeyArn = Codegen.ofNullable(kmsKeyArn);
            return this;
        }
        public Builder maintenanceWindow(@Nullable Output<String> maintenanceWindow) {
            this.maintenanceWindow = maintenanceWindow;
            return this;
        }
        public Builder maintenanceWindow(@Nullable String maintenanceWindow) {
            this.maintenanceWindow = Codegen.ofNullable(maintenanceWindow);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder namePrefix(@Nullable Output<String> namePrefix) {
            this.namePrefix = namePrefix;
            return this;
        }
        public Builder namePrefix(@Nullable String namePrefix) {
            this.namePrefix = Codegen.ofNullable(namePrefix);
            return this;
        }
        public Builder nodeType(Output<String> nodeType) {
            this.nodeType = Objects.requireNonNull(nodeType);
            return this;
        }
        public Builder nodeType(String nodeType) {
            this.nodeType = Output.of(Objects.requireNonNull(nodeType));
            return this;
        }
        public Builder numReplicasPerShard(@Nullable Output<Integer> numReplicasPerShard) {
            this.numReplicasPerShard = numReplicasPerShard;
            return this;
        }
        public Builder numReplicasPerShard(@Nullable Integer numReplicasPerShard) {
            this.numReplicasPerShard = Codegen.ofNullable(numReplicasPerShard);
            return this;
        }
        public Builder numShards(@Nullable Output<Integer> numShards) {
            this.numShards = numShards;
            return this;
        }
        public Builder numShards(@Nullable Integer numShards) {
            this.numShards = Codegen.ofNullable(numShards);
            return this;
        }
        public Builder parameterGroupName(@Nullable Output<String> parameterGroupName) {
            this.parameterGroupName = parameterGroupName;
            return this;
        }
        public Builder parameterGroupName(@Nullable String parameterGroupName) {
            this.parameterGroupName = Codegen.ofNullable(parameterGroupName);
            return this;
        }
        public Builder port(@Nullable Output<Integer> port) {
            this.port = port;
            return this;
        }
        public Builder port(@Nullable Integer port) {
            this.port = Codegen.ofNullable(port);
            return this;
        }
        public Builder securityGroupIds(@Nullable Output<List<String>> securityGroupIds) {
            this.securityGroupIds = securityGroupIds;
            return this;
        }
        public Builder securityGroupIds(@Nullable List<String> securityGroupIds) {
            this.securityGroupIds = Codegen.ofNullable(securityGroupIds);
            return this;
        }
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }
        public Builder snapshotArns(@Nullable Output<String> snapshotArns) {
            this.snapshotArns = snapshotArns;
            return this;
        }
        public Builder snapshotArns(@Nullable String snapshotArns) {
            this.snapshotArns = Codegen.ofNullable(snapshotArns);
            return this;
        }
        public Builder snapshotName(@Nullable Output<String> snapshotName) {
            this.snapshotName = snapshotName;
            return this;
        }
        public Builder snapshotName(@Nullable String snapshotName) {
            this.snapshotName = Codegen.ofNullable(snapshotName);
            return this;
        }
        public Builder snapshotRetentionLimit(@Nullable Output<Integer> snapshotRetentionLimit) {
            this.snapshotRetentionLimit = snapshotRetentionLimit;
            return this;
        }
        public Builder snapshotRetentionLimit(@Nullable Integer snapshotRetentionLimit) {
            this.snapshotRetentionLimit = Codegen.ofNullable(snapshotRetentionLimit);
            return this;
        }
        public Builder snapshotWindow(@Nullable Output<String> snapshotWindow) {
            this.snapshotWindow = snapshotWindow;
            return this;
        }
        public Builder snapshotWindow(@Nullable String snapshotWindow) {
            this.snapshotWindow = Codegen.ofNullable(snapshotWindow);
            return this;
        }
        public Builder snsTopicArn(@Nullable Output<String> snsTopicArn) {
            this.snsTopicArn = snsTopicArn;
            return this;
        }
        public Builder snsTopicArn(@Nullable String snsTopicArn) {
            this.snsTopicArn = Codegen.ofNullable(snsTopicArn);
            return this;
        }
        public Builder subnetGroupName(@Nullable Output<String> subnetGroupName) {
            this.subnetGroupName = subnetGroupName;
            return this;
        }
        public Builder subnetGroupName(@Nullable String subnetGroupName) {
            this.subnetGroupName = Codegen.ofNullable(subnetGroupName);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Codegen.ofNullable(tagsAll);
            return this;
        }
        public Builder tlsEnabled(@Nullable Output<Boolean> tlsEnabled) {
            this.tlsEnabled = tlsEnabled;
            return this;
        }
        public Builder tlsEnabled(@Nullable Boolean tlsEnabled) {
            this.tlsEnabled = Codegen.ofNullable(tlsEnabled);
            return this;
        }        public ClusterArgs build() {
            return new ClusterArgs(aclName, autoMinorVersionUpgrade, description, engineVersion, finalSnapshotName, kmsKeyArn, maintenanceWindow, name, namePrefix, nodeType, numReplicasPerShard, numShards, parameterGroupName, port, securityGroupIds, snapshotArns, snapshotName, snapshotRetentionLimit, snapshotWindow, snsTopicArn, subnetGroupName, tags, tagsAll, tlsEnabled);
        }
    }
}
