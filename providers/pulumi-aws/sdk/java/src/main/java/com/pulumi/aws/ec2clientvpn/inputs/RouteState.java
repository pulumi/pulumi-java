// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2clientvpn.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RouteState extends com.pulumi.resources.ResourceArgs {

    public static final RouteState Empty = new RouteState();

    /**
     * The ID of the Client VPN endpoint.
     * 
     */
    @Import(name="clientVpnEndpointId")
      private final @Nullable Output<String> clientVpnEndpointId;

    public Output<String> clientVpnEndpointId() {
        return this.clientVpnEndpointId == null ? Codegen.empty() : this.clientVpnEndpointId;
    }

    /**
     * A brief description of the authorization rule.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The IPv4 address range, in CIDR notation, of the route destination.
     * 
     */
    @Import(name="destinationCidrBlock")
      private final @Nullable Output<String> destinationCidrBlock;

    public Output<String> destinationCidrBlock() {
        return this.destinationCidrBlock == null ? Codegen.empty() : this.destinationCidrBlock;
    }

    /**
     * Indicates how the Client VPN route was added. Will be `add-route` for routes created by this resource.
     * 
     */
    @Import(name="origin")
      private final @Nullable Output<String> origin;

    public Output<String> origin() {
        return this.origin == null ? Codegen.empty() : this.origin;
    }

    /**
     * The ID of the Subnet to route the traffic through. It must already be attached to the Client VPN.
     * 
     */
    @Import(name="targetVpcSubnetId")
      private final @Nullable Output<String> targetVpcSubnetId;

    public Output<String> targetVpcSubnetId() {
        return this.targetVpcSubnetId == null ? Codegen.empty() : this.targetVpcSubnetId;
    }

    /**
     * The type of the route.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> type() {
        return this.type == null ? Codegen.empty() : this.type;
    }

    public RouteState(
        @Nullable Output<String> clientVpnEndpointId,
        @Nullable Output<String> description,
        @Nullable Output<String> destinationCidrBlock,
        @Nullable Output<String> origin,
        @Nullable Output<String> targetVpcSubnetId,
        @Nullable Output<String> type) {
        this.clientVpnEndpointId = clientVpnEndpointId;
        this.description = description;
        this.destinationCidrBlock = destinationCidrBlock;
        this.origin = origin;
        this.targetVpcSubnetId = targetVpcSubnetId;
        this.type = type;
    }

    private RouteState() {
        this.clientVpnEndpointId = Codegen.empty();
        this.description = Codegen.empty();
        this.destinationCidrBlock = Codegen.empty();
        this.origin = Codegen.empty();
        this.targetVpcSubnetId = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouteState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> clientVpnEndpointId;
        private @Nullable Output<String> description;
        private @Nullable Output<String> destinationCidrBlock;
        private @Nullable Output<String> origin;
        private @Nullable Output<String> targetVpcSubnetId;
        private @Nullable Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(RouteState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientVpnEndpointId = defaults.clientVpnEndpointId;
    	      this.description = defaults.description;
    	      this.destinationCidrBlock = defaults.destinationCidrBlock;
    	      this.origin = defaults.origin;
    	      this.targetVpcSubnetId = defaults.targetVpcSubnetId;
    	      this.type = defaults.type;
        }

        public Builder clientVpnEndpointId(@Nullable Output<String> clientVpnEndpointId) {
            this.clientVpnEndpointId = clientVpnEndpointId;
            return this;
        }
        public Builder clientVpnEndpointId(@Nullable String clientVpnEndpointId) {
            this.clientVpnEndpointId = Codegen.ofNullable(clientVpnEndpointId);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder destinationCidrBlock(@Nullable Output<String> destinationCidrBlock) {
            this.destinationCidrBlock = destinationCidrBlock;
            return this;
        }
        public Builder destinationCidrBlock(@Nullable String destinationCidrBlock) {
            this.destinationCidrBlock = Codegen.ofNullable(destinationCidrBlock);
            return this;
        }
        public Builder origin(@Nullable Output<String> origin) {
            this.origin = origin;
            return this;
        }
        public Builder origin(@Nullable String origin) {
            this.origin = Codegen.ofNullable(origin);
            return this;
        }
        public Builder targetVpcSubnetId(@Nullable Output<String> targetVpcSubnetId) {
            this.targetVpcSubnetId = targetVpcSubnetId;
            return this;
        }
        public Builder targetVpcSubnetId(@Nullable String targetVpcSubnetId) {
            this.targetVpcSubnetId = Codegen.ofNullable(targetVpcSubnetId);
            return this;
        }
        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = Codegen.ofNullable(type);
            return this;
        }        public RouteState build() {
            return new RouteState(clientVpnEndpointId, description, destinationCidrBlock, origin, targetVpcSubnetId, type);
        }
    }
}
