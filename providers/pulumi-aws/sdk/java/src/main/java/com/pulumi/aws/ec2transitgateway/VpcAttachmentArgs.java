// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2transitgateway;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VpcAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpcAttachmentArgs Empty = new VpcAttachmentArgs();

    /**
     * Whether Appliance Mode support is enabled. If enabled, a traffic flow between a source and destination uses the same Availability Zone for the VPC attachment for the lifetime of that flow. Valid values: `disable`, `enable`. Default value: `disable`.
     * 
     */
    @Import(name="applianceModeSupport")
      private final @Nullable Output<String> applianceModeSupport;

    public Output<String> applianceModeSupport() {
        return this.applianceModeSupport == null ? Codegen.empty() : this.applianceModeSupport;
    }

    /**
     * Whether DNS support is enabled. Valid values: `disable`, `enable`. Default value: `enable`.
     * 
     */
    @Import(name="dnsSupport")
      private final @Nullable Output<String> dnsSupport;

    public Output<String> dnsSupport() {
        return this.dnsSupport == null ? Codegen.empty() : this.dnsSupport;
    }

    /**
     * Whether IPv6 support is enabled. Valid values: `disable`, `enable`. Default value: `disable`.
     * 
     */
    @Import(name="ipv6Support")
      private final @Nullable Output<String> ipv6Support;

    public Output<String> ipv6Support() {
        return this.ipv6Support == null ? Codegen.empty() : this.ipv6Support;
    }

    /**
     * Identifiers of EC2 Subnets.
     * 
     */
    @Import(name="subnetIds", required=true)
      private final Output<List<String>> subnetIds;

    public Output<List<String>> subnetIds() {
        return this.subnetIds;
    }

    /**
     * Key-value tags for the EC2 Transit Gateway VPC Attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * Boolean whether the VPC Attachment should be associated with the EC2 Transit Gateway association default route table. This cannot be configured or perform drift detection with Resource Access Manager shared EC2 Transit Gateways. Default value: `true`.
     * 
     */
    @Import(name="transitGatewayDefaultRouteTableAssociation")
      private final @Nullable Output<Boolean> transitGatewayDefaultRouteTableAssociation;

    public Output<Boolean> transitGatewayDefaultRouteTableAssociation() {
        return this.transitGatewayDefaultRouteTableAssociation == null ? Codegen.empty() : this.transitGatewayDefaultRouteTableAssociation;
    }

    /**
     * Boolean whether the VPC Attachment should propagate routes with the EC2 Transit Gateway propagation default route table. This cannot be configured or perform drift detection with Resource Access Manager shared EC2 Transit Gateways. Default value: `true`.
     * 
     */
    @Import(name="transitGatewayDefaultRouteTablePropagation")
      private final @Nullable Output<Boolean> transitGatewayDefaultRouteTablePropagation;

    public Output<Boolean> transitGatewayDefaultRouteTablePropagation() {
        return this.transitGatewayDefaultRouteTablePropagation == null ? Codegen.empty() : this.transitGatewayDefaultRouteTablePropagation;
    }

    /**
     * Identifier of EC2 Transit Gateway.
     * 
     */
    @Import(name="transitGatewayId", required=true)
      private final Output<String> transitGatewayId;

    public Output<String> transitGatewayId() {
        return this.transitGatewayId;
    }

    /**
     * Identifier of EC2 VPC.
     * 
     */
    @Import(name="vpcId", required=true)
      private final Output<String> vpcId;

    public Output<String> vpcId() {
        return this.vpcId;
    }

    public VpcAttachmentArgs(
        @Nullable Output<String> applianceModeSupport,
        @Nullable Output<String> dnsSupport,
        @Nullable Output<String> ipv6Support,
        Output<List<String>> subnetIds,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Boolean> transitGatewayDefaultRouteTableAssociation,
        @Nullable Output<Boolean> transitGatewayDefaultRouteTablePropagation,
        Output<String> transitGatewayId,
        Output<String> vpcId) {
        this.applianceModeSupport = applianceModeSupport;
        this.dnsSupport = dnsSupport;
        this.ipv6Support = ipv6Support;
        this.subnetIds = Objects.requireNonNull(subnetIds, "expected parameter 'subnetIds' to be non-null");
        this.tags = tags;
        this.transitGatewayDefaultRouteTableAssociation = transitGatewayDefaultRouteTableAssociation;
        this.transitGatewayDefaultRouteTablePropagation = transitGatewayDefaultRouteTablePropagation;
        this.transitGatewayId = Objects.requireNonNull(transitGatewayId, "expected parameter 'transitGatewayId' to be non-null");
        this.vpcId = Objects.requireNonNull(vpcId, "expected parameter 'vpcId' to be non-null");
    }

    private VpcAttachmentArgs() {
        this.applianceModeSupport = Codegen.empty();
        this.dnsSupport = Codegen.empty();
        this.ipv6Support = Codegen.empty();
        this.subnetIds = Codegen.empty();
        this.tags = Codegen.empty();
        this.transitGatewayDefaultRouteTableAssociation = Codegen.empty();
        this.transitGatewayDefaultRouteTablePropagation = Codegen.empty();
        this.transitGatewayId = Codegen.empty();
        this.vpcId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VpcAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> applianceModeSupport;
        private @Nullable Output<String> dnsSupport;
        private @Nullable Output<String> ipv6Support;
        private Output<List<String>> subnetIds;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Boolean> transitGatewayDefaultRouteTableAssociation;
        private @Nullable Output<Boolean> transitGatewayDefaultRouteTablePropagation;
        private Output<String> transitGatewayId;
        private Output<String> vpcId;

        public Builder() {
    	      // Empty
        }

        public Builder(VpcAttachmentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applianceModeSupport = defaults.applianceModeSupport;
    	      this.dnsSupport = defaults.dnsSupport;
    	      this.ipv6Support = defaults.ipv6Support;
    	      this.subnetIds = defaults.subnetIds;
    	      this.tags = defaults.tags;
    	      this.transitGatewayDefaultRouteTableAssociation = defaults.transitGatewayDefaultRouteTableAssociation;
    	      this.transitGatewayDefaultRouteTablePropagation = defaults.transitGatewayDefaultRouteTablePropagation;
    	      this.transitGatewayId = defaults.transitGatewayId;
    	      this.vpcId = defaults.vpcId;
        }

        public Builder applianceModeSupport(@Nullable Output<String> applianceModeSupport) {
            this.applianceModeSupport = applianceModeSupport;
            return this;
        }
        public Builder applianceModeSupport(@Nullable String applianceModeSupport) {
            this.applianceModeSupport = Codegen.ofNullable(applianceModeSupport);
            return this;
        }
        public Builder dnsSupport(@Nullable Output<String> dnsSupport) {
            this.dnsSupport = dnsSupport;
            return this;
        }
        public Builder dnsSupport(@Nullable String dnsSupport) {
            this.dnsSupport = Codegen.ofNullable(dnsSupport);
            return this;
        }
        public Builder ipv6Support(@Nullable Output<String> ipv6Support) {
            this.ipv6Support = ipv6Support;
            return this;
        }
        public Builder ipv6Support(@Nullable String ipv6Support) {
            this.ipv6Support = Codegen.ofNullable(ipv6Support);
            return this;
        }
        public Builder subnetIds(Output<List<String>> subnetIds) {
            this.subnetIds = Objects.requireNonNull(subnetIds);
            return this;
        }
        public Builder subnetIds(List<String> subnetIds) {
            this.subnetIds = Output.of(Objects.requireNonNull(subnetIds));
            return this;
        }
        public Builder subnetIds(String... subnetIds) {
            return subnetIds(List.of(subnetIds));
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder transitGatewayDefaultRouteTableAssociation(@Nullable Output<Boolean> transitGatewayDefaultRouteTableAssociation) {
            this.transitGatewayDefaultRouteTableAssociation = transitGatewayDefaultRouteTableAssociation;
            return this;
        }
        public Builder transitGatewayDefaultRouteTableAssociation(@Nullable Boolean transitGatewayDefaultRouteTableAssociation) {
            this.transitGatewayDefaultRouteTableAssociation = Codegen.ofNullable(transitGatewayDefaultRouteTableAssociation);
            return this;
        }
        public Builder transitGatewayDefaultRouteTablePropagation(@Nullable Output<Boolean> transitGatewayDefaultRouteTablePropagation) {
            this.transitGatewayDefaultRouteTablePropagation = transitGatewayDefaultRouteTablePropagation;
            return this;
        }
        public Builder transitGatewayDefaultRouteTablePropagation(@Nullable Boolean transitGatewayDefaultRouteTablePropagation) {
            this.transitGatewayDefaultRouteTablePropagation = Codegen.ofNullable(transitGatewayDefaultRouteTablePropagation);
            return this;
        }
        public Builder transitGatewayId(Output<String> transitGatewayId) {
            this.transitGatewayId = Objects.requireNonNull(transitGatewayId);
            return this;
        }
        public Builder transitGatewayId(String transitGatewayId) {
            this.transitGatewayId = Output.of(Objects.requireNonNull(transitGatewayId));
            return this;
        }
        public Builder vpcId(Output<String> vpcId) {
            this.vpcId = Objects.requireNonNull(vpcId);
            return this;
        }
        public Builder vpcId(String vpcId) {
            this.vpcId = Output.of(Objects.requireNonNull(vpcId));
            return this;
        }        public VpcAttachmentArgs build() {
            return new VpcAttachmentArgs(applianceModeSupport, dnsSupport, ipv6Support, subnetIds, tags, transitGatewayDefaultRouteTableAssociation, transitGatewayDefaultRouteTablePropagation, transitGatewayId, vpcId);
        }
    }
}
