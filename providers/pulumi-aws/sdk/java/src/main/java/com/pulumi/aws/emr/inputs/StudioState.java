// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.emr.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class StudioState extends com.pulumi.resources.ResourceArgs {

    public static final StudioState Empty = new StudioState();

    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> arn() {
        return this.arn == null ? Codegen.empty() : this.arn;
    }

    /**
     * Specifies whether the Studio authenticates users using IAM or Amazon Web Services SSO. Valid values are `SSO` or `IAM`.
     * 
     */
    @Import(name="authMode")
      private final @Nullable Output<String> authMode;

    public Output<String> authMode() {
        return this.authMode == null ? Codegen.empty() : this.authMode;
    }

    /**
     * The Amazon S3 location to back up Amazon EMR Studio Workspaces and notebook files.
     * 
     */
    @Import(name="defaultS3Location")
      private final @Nullable Output<String> defaultS3Location;

    public Output<String> defaultS3Location() {
        return this.defaultS3Location == null ? Codegen.empty() : this.defaultS3Location;
    }

    /**
     * A detailed description of the Amazon EMR Studio.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The ID of the Amazon EMR Studio Engine security group. The Engine security group allows inbound network traffic from the Workspace security group, and it must be in the same VPC specified by `vpc_id`.
     * 
     */
    @Import(name="engineSecurityGroupId")
      private final @Nullable Output<String> engineSecurityGroupId;

    public Output<String> engineSecurityGroupId() {
        return this.engineSecurityGroupId == null ? Codegen.empty() : this.engineSecurityGroupId;
    }

    /**
     * The authentication endpoint of your identity provider (IdP). Specify this value when you use IAM authentication and want to let federated users log in to a Studio with the Studio URL and credentials from your IdP. Amazon EMR Studio redirects users to this endpoint to enter credentials.
     * 
     */
    @Import(name="idpAuthUrl")
      private final @Nullable Output<String> idpAuthUrl;

    public Output<String> idpAuthUrl() {
        return this.idpAuthUrl == null ? Codegen.empty() : this.idpAuthUrl;
    }

    /**
     * The name that your identity provider (IdP) uses for its RelayState parameter. For example, RelayState or TargetSource. Specify this value when you use IAM authentication and want to let federated users log in to a Studio using the Studio URL. The RelayState parameter differs by IdP.
     * 
     */
    @Import(name="idpRelayStateParameterName")
      private final @Nullable Output<String> idpRelayStateParameterName;

    public Output<String> idpRelayStateParameterName() {
        return this.idpRelayStateParameterName == null ? Codegen.empty() : this.idpRelayStateParameterName;
    }

    /**
     * A descriptive name for the Amazon EMR Studio.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The IAM role that the Amazon EMR Studio assumes. The service role provides a way for Amazon EMR Studio to interoperate with other Amazon Web Services services.
     * 
     */
    @Import(name="serviceRole")
      private final @Nullable Output<String> serviceRole;

    public Output<String> serviceRole() {
        return this.serviceRole == null ? Codegen.empty() : this.serviceRole;
    }

    /**
     * A list of subnet IDs to associate with the Amazon EMR Studio. A Studio can have a maximum of 5 subnets. The subnets must belong to the VPC specified by `vpc_id`. Studio users can create a Workspace in any of the specified subnets.
     * 
     */
    @Import(name="subnetIds")
      private final @Nullable Output<List<String>> subnetIds;

    public Output<List<String>> subnetIds() {
        return this.subnetIds == null ? Codegen.empty() : this.subnetIds;
    }

    /**
     * list of tags to apply to the EMR Cluster. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll == null ? Codegen.empty() : this.tagsAll;
    }

    /**
     * The unique access URL of the Amazon EMR Studio.
     * 
     */
    @Import(name="url")
      private final @Nullable Output<String> url;

    public Output<String> url() {
        return this.url == null ? Codegen.empty() : this.url;
    }

    /**
     * - The IAM user role that users and groups assume when logged in to an Amazon EMR Studio. Only specify a User Role when you use Amazon Web Services SSO authentication. The permissions attached to the User Role can be scoped down for each user or group using session policies.
     * 
     */
    @Import(name="userRole")
      private final @Nullable Output<String> userRole;

    public Output<String> userRole() {
        return this.userRole == null ? Codegen.empty() : this.userRole;
    }

    /**
     * The ID of the Amazon Virtual Private Cloud (Amazon VPC) to associate with the Studio.
     * 
     */
    @Import(name="vpcId")
      private final @Nullable Output<String> vpcId;

    public Output<String> vpcId() {
        return this.vpcId == null ? Codegen.empty() : this.vpcId;
    }

    /**
     * The ID of the Amazon EMR Studio Workspace security group. The Workspace security group allows outbound network traffic to resources in the Engine security group, and it must be in the same VPC specified by `vpc_id`.
     * 
     */
    @Import(name="workspaceSecurityGroupId")
      private final @Nullable Output<String> workspaceSecurityGroupId;

    public Output<String> workspaceSecurityGroupId() {
        return this.workspaceSecurityGroupId == null ? Codegen.empty() : this.workspaceSecurityGroupId;
    }

    public StudioState(
        @Nullable Output<String> arn,
        @Nullable Output<String> authMode,
        @Nullable Output<String> defaultS3Location,
        @Nullable Output<String> description,
        @Nullable Output<String> engineSecurityGroupId,
        @Nullable Output<String> idpAuthUrl,
        @Nullable Output<String> idpRelayStateParameterName,
        @Nullable Output<String> name,
        @Nullable Output<String> serviceRole,
        @Nullable Output<List<String>> subnetIds,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll,
        @Nullable Output<String> url,
        @Nullable Output<String> userRole,
        @Nullable Output<String> vpcId,
        @Nullable Output<String> workspaceSecurityGroupId) {
        this.arn = arn;
        this.authMode = authMode;
        this.defaultS3Location = defaultS3Location;
        this.description = description;
        this.engineSecurityGroupId = engineSecurityGroupId;
        this.idpAuthUrl = idpAuthUrl;
        this.idpRelayStateParameterName = idpRelayStateParameterName;
        this.name = name;
        this.serviceRole = serviceRole;
        this.subnetIds = subnetIds;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.url = url;
        this.userRole = userRole;
        this.vpcId = vpcId;
        this.workspaceSecurityGroupId = workspaceSecurityGroupId;
    }

    private StudioState() {
        this.arn = Codegen.empty();
        this.authMode = Codegen.empty();
        this.defaultS3Location = Codegen.empty();
        this.description = Codegen.empty();
        this.engineSecurityGroupId = Codegen.empty();
        this.idpAuthUrl = Codegen.empty();
        this.idpRelayStateParameterName = Codegen.empty();
        this.name = Codegen.empty();
        this.serviceRole = Codegen.empty();
        this.subnetIds = Codegen.empty();
        this.tags = Codegen.empty();
        this.tagsAll = Codegen.empty();
        this.url = Codegen.empty();
        this.userRole = Codegen.empty();
        this.vpcId = Codegen.empty();
        this.workspaceSecurityGroupId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StudioState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> arn;
        private @Nullable Output<String> authMode;
        private @Nullable Output<String> defaultS3Location;
        private @Nullable Output<String> description;
        private @Nullable Output<String> engineSecurityGroupId;
        private @Nullable Output<String> idpAuthUrl;
        private @Nullable Output<String> idpRelayStateParameterName;
        private @Nullable Output<String> name;
        private @Nullable Output<String> serviceRole;
        private @Nullable Output<List<String>> subnetIds;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;
        private @Nullable Output<String> url;
        private @Nullable Output<String> userRole;
        private @Nullable Output<String> vpcId;
        private @Nullable Output<String> workspaceSecurityGroupId;

        public Builder() {
    	      // Empty
        }

        public Builder(StudioState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.authMode = defaults.authMode;
    	      this.defaultS3Location = defaults.defaultS3Location;
    	      this.description = defaults.description;
    	      this.engineSecurityGroupId = defaults.engineSecurityGroupId;
    	      this.idpAuthUrl = defaults.idpAuthUrl;
    	      this.idpRelayStateParameterName = defaults.idpRelayStateParameterName;
    	      this.name = defaults.name;
    	      this.serviceRole = defaults.serviceRole;
    	      this.subnetIds = defaults.subnetIds;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.url = defaults.url;
    	      this.userRole = defaults.userRole;
    	      this.vpcId = defaults.vpcId;
    	      this.workspaceSecurityGroupId = defaults.workspaceSecurityGroupId;
        }

        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }
        public Builder arn(@Nullable String arn) {
            this.arn = Codegen.ofNullable(arn);
            return this;
        }
        public Builder authMode(@Nullable Output<String> authMode) {
            this.authMode = authMode;
            return this;
        }
        public Builder authMode(@Nullable String authMode) {
            this.authMode = Codegen.ofNullable(authMode);
            return this;
        }
        public Builder defaultS3Location(@Nullable Output<String> defaultS3Location) {
            this.defaultS3Location = defaultS3Location;
            return this;
        }
        public Builder defaultS3Location(@Nullable String defaultS3Location) {
            this.defaultS3Location = Codegen.ofNullable(defaultS3Location);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder engineSecurityGroupId(@Nullable Output<String> engineSecurityGroupId) {
            this.engineSecurityGroupId = engineSecurityGroupId;
            return this;
        }
        public Builder engineSecurityGroupId(@Nullable String engineSecurityGroupId) {
            this.engineSecurityGroupId = Codegen.ofNullable(engineSecurityGroupId);
            return this;
        }
        public Builder idpAuthUrl(@Nullable Output<String> idpAuthUrl) {
            this.idpAuthUrl = idpAuthUrl;
            return this;
        }
        public Builder idpAuthUrl(@Nullable String idpAuthUrl) {
            this.idpAuthUrl = Codegen.ofNullable(idpAuthUrl);
            return this;
        }
        public Builder idpRelayStateParameterName(@Nullable Output<String> idpRelayStateParameterName) {
            this.idpRelayStateParameterName = idpRelayStateParameterName;
            return this;
        }
        public Builder idpRelayStateParameterName(@Nullable String idpRelayStateParameterName) {
            this.idpRelayStateParameterName = Codegen.ofNullable(idpRelayStateParameterName);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder serviceRole(@Nullable Output<String> serviceRole) {
            this.serviceRole = serviceRole;
            return this;
        }
        public Builder serviceRole(@Nullable String serviceRole) {
            this.serviceRole = Codegen.ofNullable(serviceRole);
            return this;
        }
        public Builder subnetIds(@Nullable Output<List<String>> subnetIds) {
            this.subnetIds = subnetIds;
            return this;
        }
        public Builder subnetIds(@Nullable List<String> subnetIds) {
            this.subnetIds = Codegen.ofNullable(subnetIds);
            return this;
        }
        public Builder subnetIds(String... subnetIds) {
            return subnetIds(List.of(subnetIds));
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Codegen.ofNullable(tagsAll);
            return this;
        }
        public Builder url(@Nullable Output<String> url) {
            this.url = url;
            return this;
        }
        public Builder url(@Nullable String url) {
            this.url = Codegen.ofNullable(url);
            return this;
        }
        public Builder userRole(@Nullable Output<String> userRole) {
            this.userRole = userRole;
            return this;
        }
        public Builder userRole(@Nullable String userRole) {
            this.userRole = Codegen.ofNullable(userRole);
            return this;
        }
        public Builder vpcId(@Nullable Output<String> vpcId) {
            this.vpcId = vpcId;
            return this;
        }
        public Builder vpcId(@Nullable String vpcId) {
            this.vpcId = Codegen.ofNullable(vpcId);
            return this;
        }
        public Builder workspaceSecurityGroupId(@Nullable Output<String> workspaceSecurityGroupId) {
            this.workspaceSecurityGroupId = workspaceSecurityGroupId;
            return this;
        }
        public Builder workspaceSecurityGroupId(@Nullable String workspaceSecurityGroupId) {
            this.workspaceSecurityGroupId = Codegen.ofNullable(workspaceSecurityGroupId);
            return this;
        }        public StudioState build() {
            return new StudioState(arn, authMode, defaultS3Location, description, engineSecurityGroupId, idpAuthUrl, idpRelayStateParameterName, name, serviceRole, subnetIds, tags, tagsAll, url, userRole, vpcId, workspaceSecurityGroupId);
        }
    }
}
