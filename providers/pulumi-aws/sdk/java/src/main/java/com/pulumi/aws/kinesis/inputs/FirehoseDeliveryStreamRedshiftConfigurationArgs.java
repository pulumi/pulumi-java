// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.kinesis.inputs;

import com.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsArgs;
import com.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs;
import com.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class FirehoseDeliveryStreamRedshiftConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final FirehoseDeliveryStreamRedshiftConfigurationArgs Empty = new FirehoseDeliveryStreamRedshiftConfigurationArgs();

    /**
     * The CloudWatch Logging Options for the delivery stream. More details are given below
     * 
     */
    @Import(name="cloudwatchLoggingOptions")
      private final @Nullable Output<FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions;

    public Output<FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions() {
        return this.cloudwatchLoggingOptions == null ? Codegen.empty() : this.cloudwatchLoggingOptions;
    }

    /**
     * The jdbcurl of the redshift cluster.
     * 
     */
    @Import(name="clusterJdbcurl", required=true)
      private final Output<String> clusterJdbcurl;

    public Output<String> clusterJdbcurl() {
        return this.clusterJdbcurl;
    }

    /**
     * Copy options for copying the data from the s3 intermediate bucket into redshift, for example to change the default delimiter. For valid values, see the [AWS documentation](http://docs.aws.amazon.com/firehose/latest/APIReference/API_CopyCommand.html)
     * 
     */
    @Import(name="copyOptions")
      private final @Nullable Output<String> copyOptions;

    public Output<String> copyOptions() {
        return this.copyOptions == null ? Codegen.empty() : this.copyOptions;
    }

    /**
     * The data table columns that will be targeted by the copy command.
     * 
     */
    @Import(name="dataTableColumns")
      private final @Nullable Output<String> dataTableColumns;

    public Output<String> dataTableColumns() {
        return this.dataTableColumns == null ? Codegen.empty() : this.dataTableColumns;
    }

    /**
     * The name of the table in the redshift cluster that the s3 bucket will copy to.
     * 
     */
    @Import(name="dataTableName", required=true)
      private final Output<String> dataTableName;

    public Output<String> dataTableName() {
        return this.dataTableName;
    }

    /**
     * The password for the username above.
     * 
     */
    @Import(name="password", required=true)
      private final Output<String> password;

    public Output<String> password() {
        return this.password;
    }

    /**
     * The data processing configuration.  More details are given below.
     * 
     */
    @Import(name="processingConfiguration")
      private final @Nullable Output<FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs> processingConfiguration;

    public Output<FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs> processingConfiguration() {
        return this.processingConfiguration == null ? Codegen.empty() : this.processingConfiguration;
    }

    /**
     * The length of time during which Firehose retries delivery after a failure, starting from the initial request and including the first attempt. The default value is 3600 seconds (60 minutes). Firehose does not retry if the value of DurationInSeconds is 0 (zero) or if the first delivery attempt takes longer than the current value.
     * 
     */
    @Import(name="retryDuration")
      private final @Nullable Output<Integer> retryDuration;

    public Output<Integer> retryDuration() {
        return this.retryDuration == null ? Codegen.empty() : this.retryDuration;
    }

    /**
     * The arn of the role the stream assumes.
     * 
     */
    @Import(name="roleArn", required=true)
      private final Output<String> roleArn;

    public Output<String> roleArn() {
        return this.roleArn;
    }

    /**
     * The configuration for backup in Amazon S3. Required if `s3_backup_mode` is `Enabled`. Supports the same fields as `s3_configuration` object.
     * 
     */
    @Import(name="s3BackupConfiguration")
      private final @Nullable Output<FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationArgs> s3BackupConfiguration;

    public Output<FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationArgs> s3BackupConfiguration() {
        return this.s3BackupConfiguration == null ? Codegen.empty() : this.s3BackupConfiguration;
    }

    /**
     * The Amazon S3 backup mode.  Valid values are `Disabled` and `Enabled`.  Default value is `Disabled`.
     * 
     */
    @Import(name="s3BackupMode")
      private final @Nullable Output<String> s3BackupMode;

    public Output<String> s3BackupMode() {
        return this.s3BackupMode == null ? Codegen.empty() : this.s3BackupMode;
    }

    /**
     * The username that the firehose delivery stream will assume. It is strongly recommended that the username and password provided is used exclusively for Amazon Kinesis Firehose purposes, and that the permissions for the account are restricted for Amazon Redshift INSERT permissions.
     * 
     */
    @Import(name="username", required=true)
      private final Output<String> username;

    public Output<String> username() {
        return this.username;
    }

    public FirehoseDeliveryStreamRedshiftConfigurationArgs(
        @Nullable Output<FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions,
        Output<String> clusterJdbcurl,
        @Nullable Output<String> copyOptions,
        @Nullable Output<String> dataTableColumns,
        Output<String> dataTableName,
        Output<String> password,
        @Nullable Output<FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs> processingConfiguration,
        @Nullable Output<Integer> retryDuration,
        Output<String> roleArn,
        @Nullable Output<FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationArgs> s3BackupConfiguration,
        @Nullable Output<String> s3BackupMode,
        Output<String> username) {
        this.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
        this.clusterJdbcurl = Objects.requireNonNull(clusterJdbcurl, "expected parameter 'clusterJdbcurl' to be non-null");
        this.copyOptions = copyOptions;
        this.dataTableColumns = dataTableColumns;
        this.dataTableName = Objects.requireNonNull(dataTableName, "expected parameter 'dataTableName' to be non-null");
        this.password = Objects.requireNonNull(password, "expected parameter 'password' to be non-null");
        this.processingConfiguration = processingConfiguration;
        this.retryDuration = retryDuration;
        this.roleArn = Objects.requireNonNull(roleArn, "expected parameter 'roleArn' to be non-null");
        this.s3BackupConfiguration = s3BackupConfiguration;
        this.s3BackupMode = s3BackupMode;
        this.username = Objects.requireNonNull(username, "expected parameter 'username' to be non-null");
    }

    private FirehoseDeliveryStreamRedshiftConfigurationArgs() {
        this.cloudwatchLoggingOptions = Codegen.empty();
        this.clusterJdbcurl = Codegen.empty();
        this.copyOptions = Codegen.empty();
        this.dataTableColumns = Codegen.empty();
        this.dataTableName = Codegen.empty();
        this.password = Codegen.empty();
        this.processingConfiguration = Codegen.empty();
        this.retryDuration = Codegen.empty();
        this.roleArn = Codegen.empty();
        this.s3BackupConfiguration = Codegen.empty();
        this.s3BackupMode = Codegen.empty();
        this.username = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FirehoseDeliveryStreamRedshiftConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions;
        private Output<String> clusterJdbcurl;
        private @Nullable Output<String> copyOptions;
        private @Nullable Output<String> dataTableColumns;
        private Output<String> dataTableName;
        private Output<String> password;
        private @Nullable Output<FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs> processingConfiguration;
        private @Nullable Output<Integer> retryDuration;
        private Output<String> roleArn;
        private @Nullable Output<FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationArgs> s3BackupConfiguration;
        private @Nullable Output<String> s3BackupMode;
        private Output<String> username;

        public Builder() {
    	      // Empty
        }

        public Builder(FirehoseDeliveryStreamRedshiftConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudwatchLoggingOptions = defaults.cloudwatchLoggingOptions;
    	      this.clusterJdbcurl = defaults.clusterJdbcurl;
    	      this.copyOptions = defaults.copyOptions;
    	      this.dataTableColumns = defaults.dataTableColumns;
    	      this.dataTableName = defaults.dataTableName;
    	      this.password = defaults.password;
    	      this.processingConfiguration = defaults.processingConfiguration;
    	      this.retryDuration = defaults.retryDuration;
    	      this.roleArn = defaults.roleArn;
    	      this.s3BackupConfiguration = defaults.s3BackupConfiguration;
    	      this.s3BackupMode = defaults.s3BackupMode;
    	      this.username = defaults.username;
        }

        public Builder cloudwatchLoggingOptions(@Nullable Output<FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsArgs> cloudwatchLoggingOptions) {
            this.cloudwatchLoggingOptions = cloudwatchLoggingOptions;
            return this;
        }
        public Builder cloudwatchLoggingOptions(@Nullable FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptionsArgs cloudwatchLoggingOptions) {
            this.cloudwatchLoggingOptions = Codegen.ofNullable(cloudwatchLoggingOptions);
            return this;
        }
        public Builder clusterJdbcurl(Output<String> clusterJdbcurl) {
            this.clusterJdbcurl = Objects.requireNonNull(clusterJdbcurl);
            return this;
        }
        public Builder clusterJdbcurl(String clusterJdbcurl) {
            this.clusterJdbcurl = Output.of(Objects.requireNonNull(clusterJdbcurl));
            return this;
        }
        public Builder copyOptions(@Nullable Output<String> copyOptions) {
            this.copyOptions = copyOptions;
            return this;
        }
        public Builder copyOptions(@Nullable String copyOptions) {
            this.copyOptions = Codegen.ofNullable(copyOptions);
            return this;
        }
        public Builder dataTableColumns(@Nullable Output<String> dataTableColumns) {
            this.dataTableColumns = dataTableColumns;
            return this;
        }
        public Builder dataTableColumns(@Nullable String dataTableColumns) {
            this.dataTableColumns = Codegen.ofNullable(dataTableColumns);
            return this;
        }
        public Builder dataTableName(Output<String> dataTableName) {
            this.dataTableName = Objects.requireNonNull(dataTableName);
            return this;
        }
        public Builder dataTableName(String dataTableName) {
            this.dataTableName = Output.of(Objects.requireNonNull(dataTableName));
            return this;
        }
        public Builder password(Output<String> password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }
        public Builder password(String password) {
            this.password = Output.of(Objects.requireNonNull(password));
            return this;
        }
        public Builder processingConfiguration(@Nullable Output<FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs> processingConfiguration) {
            this.processingConfiguration = processingConfiguration;
            return this;
        }
        public Builder processingConfiguration(@Nullable FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationArgs processingConfiguration) {
            this.processingConfiguration = Codegen.ofNullable(processingConfiguration);
            return this;
        }
        public Builder retryDuration(@Nullable Output<Integer> retryDuration) {
            this.retryDuration = retryDuration;
            return this;
        }
        public Builder retryDuration(@Nullable Integer retryDuration) {
            this.retryDuration = Codegen.ofNullable(retryDuration);
            return this;
        }
        public Builder roleArn(Output<String> roleArn) {
            this.roleArn = Objects.requireNonNull(roleArn);
            return this;
        }
        public Builder roleArn(String roleArn) {
            this.roleArn = Output.of(Objects.requireNonNull(roleArn));
            return this;
        }
        public Builder s3BackupConfiguration(@Nullable Output<FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationArgs> s3BackupConfiguration) {
            this.s3BackupConfiguration = s3BackupConfiguration;
            return this;
        }
        public Builder s3BackupConfiguration(@Nullable FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationArgs s3BackupConfiguration) {
            this.s3BackupConfiguration = Codegen.ofNullable(s3BackupConfiguration);
            return this;
        }
        public Builder s3BackupMode(@Nullable Output<String> s3BackupMode) {
            this.s3BackupMode = s3BackupMode;
            return this;
        }
        public Builder s3BackupMode(@Nullable String s3BackupMode) {
            this.s3BackupMode = Codegen.ofNullable(s3BackupMode);
            return this;
        }
        public Builder username(Output<String> username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        public Builder username(String username) {
            this.username = Output.of(Objects.requireNonNull(username));
            return this;
        }        public FirehoseDeliveryStreamRedshiftConfigurationArgs build() {
            return new FirehoseDeliveryStreamRedshiftConfigurationArgs(cloudwatchLoggingOptions, clusterJdbcurl, copyOptions, dataTableColumns, dataTableName, password, processingConfiguration, retryDuration, roleArn, s3BackupConfiguration, s3BackupMode, username);
        }
    }
}
