// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2transitgateway.outputs;

import com.pulumi.aws.ec2transitgateway.outputs.GetTransitGatewayFilter;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetTransitGatewayResult {
    /**
     * @return Private Autonomous System Number (ASN) for the Amazon side of a BGP session
     * 
     */
    private final Integer amazonSideAsn;
    /**
     * @return EC2 Transit Gateway Amazon Resource Name (ARN)
     * 
     */
    private final String arn;
    /**
     * @return Identifier of the default association route table
     * 
     */
    private final String associationDefaultRouteTableId;
    /**
     * @return Whether resource attachment requests are automatically accepted
     * 
     */
    private final String autoAcceptSharedAttachments;
    /**
     * @return Whether resource attachments are automatically associated with the default association route table
     * 
     */
    private final String defaultRouteTableAssociation;
    /**
     * @return Whether resource attachments automatically propagate routes to the default propagation route table
     * 
     */
    private final String defaultRouteTablePropagation;
    /**
     * @return Description of the EC2 Transit Gateway
     * 
     */
    private final String description;
    /**
     * @return Whether DNS support is enabled
     * 
     */
    private final String dnsSupport;
    private final @Nullable List<GetTransitGatewayFilter> filters;
    /**
     * @return EC2 Transit Gateway identifier
     * 
     */
    private final String id;
    /**
     * @return Whether Multicast support is enabled
     * 
     */
    private final String multicastSupport;
    /**
     * @return Identifier of the AWS account that owns the EC2 Transit Gateway
     * 
     */
    private final String ownerId;
    /**
     * @return Identifier of the default propagation route table
     * 
     */
    private final String propagationDefaultRouteTableId;
    /**
     * @return Key-value tags for the EC2 Transit Gateway
     * 
     */
    private final Map<String,String> tags;
    /**
     * @return The list of associated CIDR blocks
     * 
     */
    private final List<String> transitGatewayCidrBlocks;
    /**
     * @return Whether VPN Equal Cost Multipath Protocol support is enabled
     * 
     */
    private final String vpnEcmpSupport;

    @CustomType.Constructor
    private GetTransitGatewayResult(
        @CustomType.Parameter("amazonSideAsn") Integer amazonSideAsn,
        @CustomType.Parameter("arn") String arn,
        @CustomType.Parameter("associationDefaultRouteTableId") String associationDefaultRouteTableId,
        @CustomType.Parameter("autoAcceptSharedAttachments") String autoAcceptSharedAttachments,
        @CustomType.Parameter("defaultRouteTableAssociation") String defaultRouteTableAssociation,
        @CustomType.Parameter("defaultRouteTablePropagation") String defaultRouteTablePropagation,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("dnsSupport") String dnsSupport,
        @CustomType.Parameter("filters") @Nullable List<GetTransitGatewayFilter> filters,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("multicastSupport") String multicastSupport,
        @CustomType.Parameter("ownerId") String ownerId,
        @CustomType.Parameter("propagationDefaultRouteTableId") String propagationDefaultRouteTableId,
        @CustomType.Parameter("tags") Map<String,String> tags,
        @CustomType.Parameter("transitGatewayCidrBlocks") List<String> transitGatewayCidrBlocks,
        @CustomType.Parameter("vpnEcmpSupport") String vpnEcmpSupport) {
        this.amazonSideAsn = amazonSideAsn;
        this.arn = arn;
        this.associationDefaultRouteTableId = associationDefaultRouteTableId;
        this.autoAcceptSharedAttachments = autoAcceptSharedAttachments;
        this.defaultRouteTableAssociation = defaultRouteTableAssociation;
        this.defaultRouteTablePropagation = defaultRouteTablePropagation;
        this.description = description;
        this.dnsSupport = dnsSupport;
        this.filters = filters;
        this.id = id;
        this.multicastSupport = multicastSupport;
        this.ownerId = ownerId;
        this.propagationDefaultRouteTableId = propagationDefaultRouteTableId;
        this.tags = tags;
        this.transitGatewayCidrBlocks = transitGatewayCidrBlocks;
        this.vpnEcmpSupport = vpnEcmpSupport;
    }

    /**
     * @return Private Autonomous System Number (ASN) for the Amazon side of a BGP session
     * 
     */
    public Integer amazonSideAsn() {
        return this.amazonSideAsn;
    }
    /**
     * @return EC2 Transit Gateway Amazon Resource Name (ARN)
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return Identifier of the default association route table
     * 
     */
    public String associationDefaultRouteTableId() {
        return this.associationDefaultRouteTableId;
    }
    /**
     * @return Whether resource attachment requests are automatically accepted
     * 
     */
    public String autoAcceptSharedAttachments() {
        return this.autoAcceptSharedAttachments;
    }
    /**
     * @return Whether resource attachments are automatically associated with the default association route table
     * 
     */
    public String defaultRouteTableAssociation() {
        return this.defaultRouteTableAssociation;
    }
    /**
     * @return Whether resource attachments automatically propagate routes to the default propagation route table
     * 
     */
    public String defaultRouteTablePropagation() {
        return this.defaultRouteTablePropagation;
    }
    /**
     * @return Description of the EC2 Transit Gateway
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Whether DNS support is enabled
     * 
     */
    public String dnsSupport() {
        return this.dnsSupport;
    }
    public List<GetTransitGatewayFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return EC2 Transit Gateway identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Whether Multicast support is enabled
     * 
     */
    public String multicastSupport() {
        return this.multicastSupport;
    }
    /**
     * @return Identifier of the AWS account that owns the EC2 Transit Gateway
     * 
     */
    public String ownerId() {
        return this.ownerId;
    }
    /**
     * @return Identifier of the default propagation route table
     * 
     */
    public String propagationDefaultRouteTableId() {
        return this.propagationDefaultRouteTableId;
    }
    /**
     * @return Key-value tags for the EC2 Transit Gateway
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The list of associated CIDR blocks
     * 
     */
    public List<String> transitGatewayCidrBlocks() {
        return this.transitGatewayCidrBlocks;
    }
    /**
     * @return Whether VPN Equal Cost Multipath Protocol support is enabled
     * 
     */
    public String vpnEcmpSupport() {
        return this.vpnEcmpSupport;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTransitGatewayResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer amazonSideAsn;
        private String arn;
        private String associationDefaultRouteTableId;
        private String autoAcceptSharedAttachments;
        private String defaultRouteTableAssociation;
        private String defaultRouteTablePropagation;
        private String description;
        private String dnsSupport;
        private @Nullable List<GetTransitGatewayFilter> filters;
        private String id;
        private String multicastSupport;
        private String ownerId;
        private String propagationDefaultRouteTableId;
        private Map<String,String> tags;
        private List<String> transitGatewayCidrBlocks;
        private String vpnEcmpSupport;

        public Builder() {
    	      // Empty
        }

        public Builder(GetTransitGatewayResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.amazonSideAsn = defaults.amazonSideAsn;
    	      this.arn = defaults.arn;
    	      this.associationDefaultRouteTableId = defaults.associationDefaultRouteTableId;
    	      this.autoAcceptSharedAttachments = defaults.autoAcceptSharedAttachments;
    	      this.defaultRouteTableAssociation = defaults.defaultRouteTableAssociation;
    	      this.defaultRouteTablePropagation = defaults.defaultRouteTablePropagation;
    	      this.description = defaults.description;
    	      this.dnsSupport = defaults.dnsSupport;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.multicastSupport = defaults.multicastSupport;
    	      this.ownerId = defaults.ownerId;
    	      this.propagationDefaultRouteTableId = defaults.propagationDefaultRouteTableId;
    	      this.tags = defaults.tags;
    	      this.transitGatewayCidrBlocks = defaults.transitGatewayCidrBlocks;
    	      this.vpnEcmpSupport = defaults.vpnEcmpSupport;
        }

        public Builder amazonSideAsn(Integer amazonSideAsn) {
            this.amazonSideAsn = Objects.requireNonNull(amazonSideAsn);
            return this;
        }
        public Builder arn(String arn) {
            this.arn = Objects.requireNonNull(arn);
            return this;
        }
        public Builder associationDefaultRouteTableId(String associationDefaultRouteTableId) {
            this.associationDefaultRouteTableId = Objects.requireNonNull(associationDefaultRouteTableId);
            return this;
        }
        public Builder autoAcceptSharedAttachments(String autoAcceptSharedAttachments) {
            this.autoAcceptSharedAttachments = Objects.requireNonNull(autoAcceptSharedAttachments);
            return this;
        }
        public Builder defaultRouteTableAssociation(String defaultRouteTableAssociation) {
            this.defaultRouteTableAssociation = Objects.requireNonNull(defaultRouteTableAssociation);
            return this;
        }
        public Builder defaultRouteTablePropagation(String defaultRouteTablePropagation) {
            this.defaultRouteTablePropagation = Objects.requireNonNull(defaultRouteTablePropagation);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder dnsSupport(String dnsSupport) {
            this.dnsSupport = Objects.requireNonNull(dnsSupport);
            return this;
        }
        public Builder filters(@Nullable List<GetTransitGatewayFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetTransitGatewayFilter... filters) {
            return filters(List.of(filters));
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder multicastSupport(String multicastSupport) {
            this.multicastSupport = Objects.requireNonNull(multicastSupport);
            return this;
        }
        public Builder ownerId(String ownerId) {
            this.ownerId = Objects.requireNonNull(ownerId);
            return this;
        }
        public Builder propagationDefaultRouteTableId(String propagationDefaultRouteTableId) {
            this.propagationDefaultRouteTableId = Objects.requireNonNull(propagationDefaultRouteTableId);
            return this;
        }
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder transitGatewayCidrBlocks(List<String> transitGatewayCidrBlocks) {
            this.transitGatewayCidrBlocks = Objects.requireNonNull(transitGatewayCidrBlocks);
            return this;
        }
        public Builder transitGatewayCidrBlocks(String... transitGatewayCidrBlocks) {
            return transitGatewayCidrBlocks(List.of(transitGatewayCidrBlocks));
        }
        public Builder vpnEcmpSupport(String vpnEcmpSupport) {
            this.vpnEcmpSupport = Objects.requireNonNull(vpnEcmpSupport);
            return this;
        }        public GetTransitGatewayResult build() {
            return new GetTransitGatewayResult(amazonSideAsn, arn, associationDefaultRouteTableId, autoAcceptSharedAttachments, defaultRouteTableAssociation, defaultRouteTablePropagation, description, dnsSupport, filters, id, multicastSupport, ownerId, propagationDefaultRouteTableId, tags, transitGatewayCidrBlocks, vpnEcmpSupport);
        }
    }
}
