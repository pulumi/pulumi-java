// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lambda.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetLayerVersionArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetLayerVersionArgs Empty = new GetLayerVersionArgs();

    /**
     * Specific architecture the layer version could support. Conflicts with `version`. If specified, the latest available layer version supporting the provided architecture will be used.
     * 
     */
    @Import(name="compatibleArchitecture")
    private Output</* @Nullable */ String> compatibleArchitecture;

    /**
     * @return Specific architecture the layer version could support. Conflicts with `version`. If specified, the latest available layer version supporting the provided architecture will be used.
     * 
     */
    public Output</* @Nullable */ String> compatibleArchitecture() {
        return this.compatibleArchitecture;
    }

    /**
     * Specific runtime the layer version must support. Conflicts with `version`. If specified, the latest available layer version supporting the provided runtime will be used.
     * 
     */
    @Import(name="compatibleRuntime")
    private Output</* @Nullable */ String> compatibleRuntime;

    /**
     * @return Specific runtime the layer version must support. Conflicts with `version`. If specified, the latest available layer version supporting the provided runtime will be used.
     * 
     */
    public Output</* @Nullable */ String> compatibleRuntime() {
        return this.compatibleRuntime;
    }

    /**
     * Name of the lambda layer.
     * 
     */
    @Import(name="layerName", required=true)
    private Output<String> layerName;

    /**
     * @return Name of the lambda layer.
     * 
     */
    public Output<String> layerName() {
        return this.layerName;
    }

    /**
     * Specific layer version. Conflicts with `compatible_runtime` and `compatible_architecture`. If omitted, the latest available layer version will be used.
     * 
     */
    @Import(name="version")
    private Output</* @Nullable */ Integer> version;

    /**
     * @return Specific layer version. Conflicts with `compatible_runtime` and `compatible_architecture`. If omitted, the latest available layer version will be used.
     * 
     */
    public Output</* @Nullable */ Integer> version() {
        return this.version;
    }

    private GetLayerVersionArgs() {}

    private GetLayerVersionArgs(GetLayerVersionArgs $) {
        this.compatibleArchitecture = $.compatibleArchitecture;
        this.compatibleRuntime = $.compatibleRuntime;
        this.layerName = $.layerName;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLayerVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLayerVersionArgs $;

        public Builder() {
            $ = new GetLayerVersionArgs();
        }

        public Builder(GetLayerVersionArgs defaults) {
            $ = new GetLayerVersionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compatibleArchitecture Specific architecture the layer version could support. Conflicts with `version`. If specified, the latest available layer version supporting the provided architecture will be used.
         * 
         * @return builder
         * 
         */
        public Builder compatibleArchitecture(Output</* @Nullable */ String> compatibleArchitecture) {
            $.compatibleArchitecture = compatibleArchitecture;
            return this;
        }

        /**
         * @param compatibleArchitecture Specific architecture the layer version could support. Conflicts with `version`. If specified, the latest available layer version supporting the provided architecture will be used.
         * 
         * @return builder
         * 
         */
        public Builder compatibleArchitecture(@Nullable String compatibleArchitecture) {
            return compatibleArchitecture(Output.of(compatibleArchitecture));
        }

        /**
         * @param compatibleRuntime Specific runtime the layer version must support. Conflicts with `version`. If specified, the latest available layer version supporting the provided runtime will be used.
         * 
         * @return builder
         * 
         */
        public Builder compatibleRuntime(Output</* @Nullable */ String> compatibleRuntime) {
            $.compatibleRuntime = compatibleRuntime;
            return this;
        }

        /**
         * @param compatibleRuntime Specific runtime the layer version must support. Conflicts with `version`. If specified, the latest available layer version supporting the provided runtime will be used.
         * 
         * @return builder
         * 
         */
        public Builder compatibleRuntime(@Nullable String compatibleRuntime) {
            return compatibleRuntime(Output.of(compatibleRuntime));
        }

        /**
         * @param layerName Name of the lambda layer.
         * 
         * @return builder
         * 
         */
        public Builder layerName(Output<String> layerName) {
            $.layerName = layerName;
            return this;
        }

        /**
         * @param layerName Name of the lambda layer.
         * 
         * @return builder
         * 
         */
        public Builder layerName(String layerName) {
            return layerName(Output.of(layerName));
        }

        /**
         * @param version Specific layer version. Conflicts with `compatible_runtime` and `compatible_architecture`. If omitted, the latest available layer version will be used.
         * 
         * @return builder
         * 
         */
        public Builder version(Output</* @Nullable */ Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Specific layer version. Conflicts with `compatible_runtime` and `compatible_architecture`. If omitted, the latest available layer version will be used.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Integer version) {
            return version(Output.of(version));
        }

        public GetLayerVersionArgs build() {
            $.layerName = Objects.requireNonNull($.layerName, "expected parameter 'layerName' to be non-null");
            return $;
        }
    }

}
