// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.budgets.inputs;

import com.pulumi.aws.budgets.inputs.BudgetCostTypesGetArgs;
import com.pulumi.aws.budgets.inputs.BudgetNotificationGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BudgetState extends com.pulumi.resources.ResourceArgs {

    public static final BudgetState Empty = new BudgetState();

    /**
     * The ID of the target account for budget. Will use current user&#39;s account_id by default if omitted.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The ARN of the budget.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Whether this budget tracks monetary cost or usage.
     * 
     */
    @Import(name="budgetType")
    private @Nullable Output<String> budgetType;

    public Optional<Output<String>> budgetType() {
        return Optional.ofNullable(this.budgetType);
    }

    /**
     * Map of CostFilters key/value pairs to apply to the budget.
     * 
     */
    @Import(name="costFilters")
    private @Nullable Output<Map<String,String>> costFilters;

    public Optional<Output<Map<String,String>>> costFilters() {
        return Optional.ofNullable(this.costFilters);
    }

    /**
     * Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions.
     * 
     */
    @Import(name="costTypes")
    private @Nullable Output<BudgetCostTypesGetArgs> costTypes;

    public Optional<Output<BudgetCostTypesGetArgs>> costTypes() {
        return Optional.ofNullable(this.costTypes);
    }

    /**
     * The amount of cost or usage being measured for a budget.
     * 
     */
    @Import(name="limitAmount")
    private @Nullable Output<String> limitAmount;

    public Optional<Output<String>> limitAmount() {
        return Optional.ofNullable(this.limitAmount);
    }

    /**
     * The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See [Spend](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-spend.html) documentation.
     * 
     */
    @Import(name="limitUnit")
    private @Nullable Output<String> limitUnit;

    public Optional<Output<String>> limitUnit() {
        return Optional.ofNullable(this.limitUnit);
    }

    /**
     * The name of a budget. Unique within accounts.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The prefix of the name of a budget. Unique within accounts.
     * 
     */
    @Import(name="namePrefix")
    private @Nullable Output<String> namePrefix;

    public Optional<Output<String>> namePrefix() {
        return Optional.ofNullable(this.namePrefix);
    }

    /**
     * Object containing Budget Notifications. Can be used multiple times to define more than one budget notification
     * 
     */
    @Import(name="notifications")
    private @Nullable Output<List<BudgetNotificationGetArgs>> notifications;

    public Optional<Output<List<BudgetNotificationGetArgs>>> notifications() {
        return Optional.ofNullable(this.notifications);
    }

    /**
     * The end of the time period covered by the budget. There are no restrictions on the end date. Format: `2017-01-01_12:00`.
     * 
     */
    @Import(name="timePeriodEnd")
    private @Nullable Output<String> timePeriodEnd;

    public Optional<Output<String>> timePeriodEnd() {
        return Optional.ofNullable(this.timePeriodEnd);
    }

    /**
     * The start of the time period covered by the budget. If you don&#39;t specify a start date, AWS defaults to the start of your chosen time period. The start date must come before the end date. Format: `2017-01-01_12:00`.
     * 
     */
    @Import(name="timePeriodStart")
    private @Nullable Output<String> timePeriodStart;

    public Optional<Output<String>> timePeriodStart() {
        return Optional.ofNullable(this.timePeriodStart);
    }

    /**
     * The length of time until a budget resets the actual and forecasted spend. Valid values: `MONTHLY`, `QUARTERLY`, `ANNUALLY`, and `DAILY`.
     * 
     */
    @Import(name="timeUnit")
    private @Nullable Output<String> timeUnit;

    public Optional<Output<String>> timeUnit() {
        return Optional.ofNullable(this.timeUnit);
    }

    private BudgetState() {}

    private BudgetState(BudgetState $) {
        this.accountId = $.accountId;
        this.arn = $.arn;
        this.budgetType = $.budgetType;
        this.costFilters = $.costFilters;
        this.costTypes = $.costTypes;
        this.limitAmount = $.limitAmount;
        this.limitUnit = $.limitUnit;
        this.name = $.name;
        this.namePrefix = $.namePrefix;
        this.notifications = $.notifications;
        this.timePeriodEnd = $.timePeriodEnd;
        this.timePeriodStart = $.timePeriodStart;
        this.timeUnit = $.timeUnit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BudgetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BudgetState $;

        public Builder() {
            $ = new BudgetState();
        }

        public Builder(BudgetState defaults) {
            $ = new BudgetState(Objects.requireNonNull(defaults));
        }

        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder budgetType(@Nullable Output<String> budgetType) {
            $.budgetType = budgetType;
            return this;
        }

        public Builder budgetType(String budgetType) {
            return budgetType(Output.of(budgetType));
        }

        public Builder costFilters(@Nullable Output<Map<String,String>> costFilters) {
            $.costFilters = costFilters;
            return this;
        }

        public Builder costFilters(Map<String,String> costFilters) {
            return costFilters(Output.of(costFilters));
        }

        public Builder costTypes(@Nullable Output<BudgetCostTypesGetArgs> costTypes) {
            $.costTypes = costTypes;
            return this;
        }

        public Builder costTypes(BudgetCostTypesGetArgs costTypes) {
            return costTypes(Output.of(costTypes));
        }

        public Builder limitAmount(@Nullable Output<String> limitAmount) {
            $.limitAmount = limitAmount;
            return this;
        }

        public Builder limitAmount(String limitAmount) {
            return limitAmount(Output.of(limitAmount));
        }

        public Builder limitUnit(@Nullable Output<String> limitUnit) {
            $.limitUnit = limitUnit;
            return this;
        }

        public Builder limitUnit(String limitUnit) {
            return limitUnit(Output.of(limitUnit));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder namePrefix(@Nullable Output<String> namePrefix) {
            $.namePrefix = namePrefix;
            return this;
        }

        public Builder namePrefix(String namePrefix) {
            return namePrefix(Output.of(namePrefix));
        }

        public Builder notifications(@Nullable Output<List<BudgetNotificationGetArgs>> notifications) {
            $.notifications = notifications;
            return this;
        }

        public Builder notifications(List<BudgetNotificationGetArgs> notifications) {
            return notifications(Output.of(notifications));
        }

        public Builder notifications(BudgetNotificationGetArgs... notifications) {
            return notifications(List.of(notifications));
        }

        public Builder timePeriodEnd(@Nullable Output<String> timePeriodEnd) {
            $.timePeriodEnd = timePeriodEnd;
            return this;
        }

        public Builder timePeriodEnd(String timePeriodEnd) {
            return timePeriodEnd(Output.of(timePeriodEnd));
        }

        public Builder timePeriodStart(@Nullable Output<String> timePeriodStart) {
            $.timePeriodStart = timePeriodStart;
            return this;
        }

        public Builder timePeriodStart(String timePeriodStart) {
            return timePeriodStart(Output.of(timePeriodStart));
        }

        public Builder timeUnit(@Nullable Output<String> timeUnit) {
            $.timeUnit = timeUnit;
            return this;
        }

        public Builder timeUnit(String timeUnit) {
            return timeUnit(Output.of(timeUnit));
        }

        public BudgetState build() {
            return $;
        }
    }

}
