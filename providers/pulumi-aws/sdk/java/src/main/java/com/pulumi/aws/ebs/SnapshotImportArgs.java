// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ebs;

import com.pulumi.aws.ebs.inputs.SnapshotImportClientDataArgs;
import com.pulumi.aws.ebs.inputs.SnapshotImportDiskContainerArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SnapshotImportArgs extends com.pulumi.resources.ResourceArgs {

    public static final SnapshotImportArgs Empty = new SnapshotImportArgs();

    /**
     * The client-specific data. Detailed below.
     * 
     */
    @Import(name="clientData")
      private final @Nullable Output<SnapshotImportClientDataArgs> clientData;

    public Output<SnapshotImportClientDataArgs> clientData() {
        return this.clientData == null ? Codegen.empty() : this.clientData;
    }

    /**
     * The description of the disk image being imported.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Information about the disk container. Detailed below.
     * 
     */
    @Import(name="diskContainer", required=true)
      private final Output<SnapshotImportDiskContainerArgs> diskContainer;

    public Output<SnapshotImportDiskContainerArgs> diskContainer() {
        return this.diskContainer;
    }

    /**
     * Specifies whether the destination snapshot of the imported image should be encrypted. The default KMS key for EBS is used unless you specify a non-default KMS key using KmsKeyId.
     * 
     */
    @Import(name="encrypted")
      private final @Nullable Output<Boolean> encrypted;

    public Output<Boolean> encrypted() {
        return this.encrypted == null ? Codegen.empty() : this.encrypted;
    }

    /**
     * An identifier for the symmetric KMS key to use when creating the encrypted snapshot. This parameter is only required if you want to use a non-default KMS key; if this parameter is not specified, the default KMS key for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.
     * 
     */
    @Import(name="kmsKeyId")
      private final @Nullable Output<String> kmsKeyId;

    public Output<String> kmsKeyId() {
        return this.kmsKeyId == null ? Codegen.empty() : this.kmsKeyId;
    }

    /**
     * Indicates whether to permanently restore an archived snapshot.
     * 
     */
    @Import(name="permanentRestore")
      private final @Nullable Output<Boolean> permanentRestore;

    public Output<Boolean> permanentRestore() {
        return this.permanentRestore == null ? Codegen.empty() : this.permanentRestore;
    }

    /**
     * The name of the IAM Role the VM Import/Export service will assume. This role needs certain permissions. See https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#vmimport-role. Default: `vmimport`
     * 
     */
    @Import(name="roleName")
      private final @Nullable Output<String> roleName;

    public Output<String> roleName() {
        return this.roleName == null ? Codegen.empty() : this.roleName;
    }

    /**
     * The name of the storage tier. Valid values are `archive` and `standard`. Default value is `standard`.
     * 
     */
    @Import(name="storageTier")
      private final @Nullable Output<String> storageTier;

    public Output<String> storageTier() {
        return this.storageTier == null ? Codegen.empty() : this.storageTier;
    }

    /**
     * A map of tags to assign to the snapshot.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * Specifies the number of days for which to temporarily restore an archived snapshot. Required for temporary restores only. The snapshot will be automatically re-archived after this period.
     * 
     */
    @Import(name="temporaryRestoreDays")
      private final @Nullable Output<Integer> temporaryRestoreDays;

    public Output<Integer> temporaryRestoreDays() {
        return this.temporaryRestoreDays == null ? Codegen.empty() : this.temporaryRestoreDays;
    }

    public SnapshotImportArgs(
        @Nullable Output<SnapshotImportClientDataArgs> clientData,
        @Nullable Output<String> description,
        Output<SnapshotImportDiskContainerArgs> diskContainer,
        @Nullable Output<Boolean> encrypted,
        @Nullable Output<String> kmsKeyId,
        @Nullable Output<Boolean> permanentRestore,
        @Nullable Output<String> roleName,
        @Nullable Output<String> storageTier,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Integer> temporaryRestoreDays) {
        this.clientData = clientData;
        this.description = description;
        this.diskContainer = Objects.requireNonNull(diskContainer, "expected parameter 'diskContainer' to be non-null");
        this.encrypted = encrypted;
        this.kmsKeyId = kmsKeyId;
        this.permanentRestore = permanentRestore;
        this.roleName = roleName;
        this.storageTier = storageTier;
        this.tags = tags;
        this.temporaryRestoreDays = temporaryRestoreDays;
    }

    private SnapshotImportArgs() {
        this.clientData = Codegen.empty();
        this.description = Codegen.empty();
        this.diskContainer = Codegen.empty();
        this.encrypted = Codegen.empty();
        this.kmsKeyId = Codegen.empty();
        this.permanentRestore = Codegen.empty();
        this.roleName = Codegen.empty();
        this.storageTier = Codegen.empty();
        this.tags = Codegen.empty();
        this.temporaryRestoreDays = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SnapshotImportArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<SnapshotImportClientDataArgs> clientData;
        private @Nullable Output<String> description;
        private Output<SnapshotImportDiskContainerArgs> diskContainer;
        private @Nullable Output<Boolean> encrypted;
        private @Nullable Output<String> kmsKeyId;
        private @Nullable Output<Boolean> permanentRestore;
        private @Nullable Output<String> roleName;
        private @Nullable Output<String> storageTier;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Integer> temporaryRestoreDays;

        public Builder() {
    	      // Empty
        }

        public Builder(SnapshotImportArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientData = defaults.clientData;
    	      this.description = defaults.description;
    	      this.diskContainer = defaults.diskContainer;
    	      this.encrypted = defaults.encrypted;
    	      this.kmsKeyId = defaults.kmsKeyId;
    	      this.permanentRestore = defaults.permanentRestore;
    	      this.roleName = defaults.roleName;
    	      this.storageTier = defaults.storageTier;
    	      this.tags = defaults.tags;
    	      this.temporaryRestoreDays = defaults.temporaryRestoreDays;
        }

        public Builder clientData(@Nullable Output<SnapshotImportClientDataArgs> clientData) {
            this.clientData = clientData;
            return this;
        }
        public Builder clientData(@Nullable SnapshotImportClientDataArgs clientData) {
            this.clientData = Codegen.ofNullable(clientData);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder diskContainer(Output<SnapshotImportDiskContainerArgs> diskContainer) {
            this.diskContainer = Objects.requireNonNull(diskContainer);
            return this;
        }
        public Builder diskContainer(SnapshotImportDiskContainerArgs diskContainer) {
            this.diskContainer = Output.of(Objects.requireNonNull(diskContainer));
            return this;
        }
        public Builder encrypted(@Nullable Output<Boolean> encrypted) {
            this.encrypted = encrypted;
            return this;
        }
        public Builder encrypted(@Nullable Boolean encrypted) {
            this.encrypted = Codegen.ofNullable(encrypted);
            return this;
        }
        public Builder kmsKeyId(@Nullable Output<String> kmsKeyId) {
            this.kmsKeyId = kmsKeyId;
            return this;
        }
        public Builder kmsKeyId(@Nullable String kmsKeyId) {
            this.kmsKeyId = Codegen.ofNullable(kmsKeyId);
            return this;
        }
        public Builder permanentRestore(@Nullable Output<Boolean> permanentRestore) {
            this.permanentRestore = permanentRestore;
            return this;
        }
        public Builder permanentRestore(@Nullable Boolean permanentRestore) {
            this.permanentRestore = Codegen.ofNullable(permanentRestore);
            return this;
        }
        public Builder roleName(@Nullable Output<String> roleName) {
            this.roleName = roleName;
            return this;
        }
        public Builder roleName(@Nullable String roleName) {
            this.roleName = Codegen.ofNullable(roleName);
            return this;
        }
        public Builder storageTier(@Nullable Output<String> storageTier) {
            this.storageTier = storageTier;
            return this;
        }
        public Builder storageTier(@Nullable String storageTier) {
            this.storageTier = Codegen.ofNullable(storageTier);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder temporaryRestoreDays(@Nullable Output<Integer> temporaryRestoreDays) {
            this.temporaryRestoreDays = temporaryRestoreDays;
            return this;
        }
        public Builder temporaryRestoreDays(@Nullable Integer temporaryRestoreDays) {
            this.temporaryRestoreDays = Codegen.ofNullable(temporaryRestoreDays);
            return this;
        }        public SnapshotImportArgs build() {
            return new SnapshotImportArgs(clientData, description, diskContainer, encrypted, kmsKeyId, permanentRestore, roleName, storageTier, tags, temporaryRestoreDays);
        }
    }
}
