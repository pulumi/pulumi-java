// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appconfig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeploymentStrategyState extends com.pulumi.resources.ResourceArgs {

    public static final DeploymentStrategyState Empty = new DeploymentStrategyState();

    /**
     * The Amazon Resource Name (ARN) of the AppConfig Deployment Strategy.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * Total amount of time for a deployment to last. Minimum value of 0, maximum value of 1440.
     * 
     */
    @Import(name="deploymentDurationInMinutes")
    private @Nullable Output<Integer> deploymentDurationInMinutes;

    public Optional<Output<Integer>> deploymentDurationInMinutes() {
        return Optional.ofNullable(this.deploymentDurationInMinutes);
    }

    /**
     * A description of the deployment strategy. Can be at most 1024 characters.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The amount of time AWS AppConfig monitors for alarms before considering the deployment to be complete and no longer eligible for automatic roll back. Minimum value of 0, maximum value of 1440.
     * 
     */
    @Import(name="finalBakeTimeInMinutes")
    private @Nullable Output<Integer> finalBakeTimeInMinutes;

    public Optional<Output<Integer>> finalBakeTimeInMinutes() {
        return Optional.ofNullable(this.finalBakeTimeInMinutes);
    }

    /**
     * The percentage of targets to receive a deployed configuration during each interval. Minimum value of 1.0, maximum value of 100.0.
     * 
     */
    @Import(name="growthFactor")
    private @Nullable Output<Double> growthFactor;

    public Optional<Output<Double>> growthFactor() {
        return Optional.ofNullable(this.growthFactor);
    }

    /**
     * The algorithm used to define how percentage grows over time. Valid value: `LINEAR` and `EXPONENTIAL`. Defaults to `LINEAR`.
     * 
     */
    @Import(name="growthType")
    private @Nullable Output<String> growthType;

    public Optional<Output<String>> growthType() {
        return Optional.ofNullable(this.growthType);
    }

    /**
     * A name for the deployment strategy. Must be between 1 and 64 characters in length.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Where to save the deployment strategy. Valid values: `NONE` and `SSM_DOCUMENT`.
     * 
     */
    @Import(name="replicateTo")
    private @Nullable Output<String> replicateTo;

    public Optional<Output<String>> replicateTo() {
        return Optional.ofNullable(this.replicateTo);
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private DeploymentStrategyState() {}

    private DeploymentStrategyState(DeploymentStrategyState $) {
        this.arn = $.arn;
        this.deploymentDurationInMinutes = $.deploymentDurationInMinutes;
        this.description = $.description;
        this.finalBakeTimeInMinutes = $.finalBakeTimeInMinutes;
        this.growthFactor = $.growthFactor;
        this.growthType = $.growthType;
        this.name = $.name;
        this.replicateTo = $.replicateTo;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentStrategyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentStrategyState $;

        public Builder() {
            $ = new DeploymentStrategyState();
        }

        public Builder(DeploymentStrategyState defaults) {
            $ = new DeploymentStrategyState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder deploymentDurationInMinutes(@Nullable Output<Integer> deploymentDurationInMinutes) {
            $.deploymentDurationInMinutes = deploymentDurationInMinutes;
            return this;
        }

        public Builder deploymentDurationInMinutes(Integer deploymentDurationInMinutes) {
            return deploymentDurationInMinutes(Output.of(deploymentDurationInMinutes));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder finalBakeTimeInMinutes(@Nullable Output<Integer> finalBakeTimeInMinutes) {
            $.finalBakeTimeInMinutes = finalBakeTimeInMinutes;
            return this;
        }

        public Builder finalBakeTimeInMinutes(Integer finalBakeTimeInMinutes) {
            return finalBakeTimeInMinutes(Output.of(finalBakeTimeInMinutes));
        }

        public Builder growthFactor(@Nullable Output<Double> growthFactor) {
            $.growthFactor = growthFactor;
            return this;
        }

        public Builder growthFactor(Double growthFactor) {
            return growthFactor(Output.of(growthFactor));
        }

        public Builder growthType(@Nullable Output<String> growthType) {
            $.growthType = growthType;
            return this;
        }

        public Builder growthType(String growthType) {
            return growthType(Output.of(growthType));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder replicateTo(@Nullable Output<String> replicateTo) {
            $.replicateTo = replicateTo;
            return this;
        }

        public Builder replicateTo(String replicateTo) {
            return replicateTo(Output.of(replicateTo));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public DeploymentStrategyState build() {
            return $;
        }
    }

}
