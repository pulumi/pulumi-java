// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dlm.inputs;

import com.pulumi.aws.dlm.inputs.LifecyclePolicyPolicyDetailsScheduleCreateRuleGetArgs;
import com.pulumi.aws.dlm.inputs.LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleGetArgs;
import com.pulumi.aws.dlm.inputs.LifecyclePolicyPolicyDetailsScheduleRetainRuleGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LifecyclePolicyPolicyDetailsScheduleGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final LifecyclePolicyPolicyDetailsScheduleGetArgs Empty = new LifecyclePolicyPolicyDetailsScheduleGetArgs();

    /**
     * Whether to copy all user-defined tags from the source snapshot to the cross-region snapshot copy.
     * 
     */
    @Import(name="copyTags")
      private final @Nullable Output<Boolean> copyTags;

    public Output<Boolean> copyTags() {
        return this.copyTags == null ? Codegen.empty() : this.copyTags;
    }

    /**
     * See the `create_rule` block. Max of 1 per schedule.
     * 
     */
    @Import(name="createRule", required=true)
      private final Output<LifecyclePolicyPolicyDetailsScheduleCreateRuleGetArgs> createRule;

    public Output<LifecyclePolicyPolicyDetailsScheduleCreateRuleGetArgs> createRule() {
        return this.createRule;
    }

    /**
     * See the `cross_region_copy_rule` block. Max of 3 per schedule.
     * 
     */
    @Import(name="crossRegionCopyRules")
      private final @Nullable Output<List<LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleGetArgs>> crossRegionCopyRules;

    public Output<List<LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleGetArgs>> crossRegionCopyRules() {
        return this.crossRegionCopyRules == null ? Codegen.empty() : this.crossRegionCopyRules;
    }

    /**
     * A name for the schedule.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * The retention rule that indicates how long snapshot copies are to be retained in the destination Region. See the `retain_rule` block. Max of 1 per schedule.
     * 
     */
    @Import(name="retainRule", required=true)
      private final Output<LifecyclePolicyPolicyDetailsScheduleRetainRuleGetArgs> retainRule;

    public Output<LifecyclePolicyPolicyDetailsScheduleRetainRuleGetArgs> retainRule() {
        return this.retainRule;
    }

    /**
     * A map of tag keys and their values. DLM lifecycle policies will already tag the snapshot with the tags on the volume. This configuration adds extra tags on top of these.
     * 
     */
    @Import(name="tagsToAdd")
      private final @Nullable Output<Map<String,String>> tagsToAdd;

    public Output<Map<String,String>> tagsToAdd() {
        return this.tagsToAdd == null ? Codegen.empty() : this.tagsToAdd;
    }

    public LifecyclePolicyPolicyDetailsScheduleGetArgs(
        @Nullable Output<Boolean> copyTags,
        Output<LifecyclePolicyPolicyDetailsScheduleCreateRuleGetArgs> createRule,
        @Nullable Output<List<LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleGetArgs>> crossRegionCopyRules,
        Output<String> name,
        Output<LifecyclePolicyPolicyDetailsScheduleRetainRuleGetArgs> retainRule,
        @Nullable Output<Map<String,String>> tagsToAdd) {
        this.copyTags = copyTags;
        this.createRule = Objects.requireNonNull(createRule, "expected parameter 'createRule' to be non-null");
        this.crossRegionCopyRules = crossRegionCopyRules;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.retainRule = Objects.requireNonNull(retainRule, "expected parameter 'retainRule' to be non-null");
        this.tagsToAdd = tagsToAdd;
    }

    private LifecyclePolicyPolicyDetailsScheduleGetArgs() {
        this.copyTags = Codegen.empty();
        this.createRule = Codegen.empty();
        this.crossRegionCopyRules = Codegen.empty();
        this.name = Codegen.empty();
        this.retainRule = Codegen.empty();
        this.tagsToAdd = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LifecyclePolicyPolicyDetailsScheduleGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> copyTags;
        private Output<LifecyclePolicyPolicyDetailsScheduleCreateRuleGetArgs> createRule;
        private @Nullable Output<List<LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleGetArgs>> crossRegionCopyRules;
        private Output<String> name;
        private Output<LifecyclePolicyPolicyDetailsScheduleRetainRuleGetArgs> retainRule;
        private @Nullable Output<Map<String,String>> tagsToAdd;

        public Builder() {
    	      // Empty
        }

        public Builder(LifecyclePolicyPolicyDetailsScheduleGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.copyTags = defaults.copyTags;
    	      this.createRule = defaults.createRule;
    	      this.crossRegionCopyRules = defaults.crossRegionCopyRules;
    	      this.name = defaults.name;
    	      this.retainRule = defaults.retainRule;
    	      this.tagsToAdd = defaults.tagsToAdd;
        }

        public Builder copyTags(@Nullable Output<Boolean> copyTags) {
            this.copyTags = copyTags;
            return this;
        }
        public Builder copyTags(@Nullable Boolean copyTags) {
            this.copyTags = Codegen.ofNullable(copyTags);
            return this;
        }
        public Builder createRule(Output<LifecyclePolicyPolicyDetailsScheduleCreateRuleGetArgs> createRule) {
            this.createRule = Objects.requireNonNull(createRule);
            return this;
        }
        public Builder createRule(LifecyclePolicyPolicyDetailsScheduleCreateRuleGetArgs createRule) {
            this.createRule = Output.of(Objects.requireNonNull(createRule));
            return this;
        }
        public Builder crossRegionCopyRules(@Nullable Output<List<LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleGetArgs>> crossRegionCopyRules) {
            this.crossRegionCopyRules = crossRegionCopyRules;
            return this;
        }
        public Builder crossRegionCopyRules(@Nullable List<LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleGetArgs> crossRegionCopyRules) {
            this.crossRegionCopyRules = Codegen.ofNullable(crossRegionCopyRules);
            return this;
        }
        public Builder crossRegionCopyRules(LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleGetArgs... crossRegionCopyRules) {
            return crossRegionCopyRules(List.of(crossRegionCopyRules));
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder retainRule(Output<LifecyclePolicyPolicyDetailsScheduleRetainRuleGetArgs> retainRule) {
            this.retainRule = Objects.requireNonNull(retainRule);
            return this;
        }
        public Builder retainRule(LifecyclePolicyPolicyDetailsScheduleRetainRuleGetArgs retainRule) {
            this.retainRule = Output.of(Objects.requireNonNull(retainRule));
            return this;
        }
        public Builder tagsToAdd(@Nullable Output<Map<String,String>> tagsToAdd) {
            this.tagsToAdd = tagsToAdd;
            return this;
        }
        public Builder tagsToAdd(@Nullable Map<String,String> tagsToAdd) {
            this.tagsToAdd = Codegen.ofNullable(tagsToAdd);
            return this;
        }        public LifecyclePolicyPolicyDetailsScheduleGetArgs build() {
            return new LifecyclePolicyPolicyDetailsScheduleGetArgs(copyTags, createRule, crossRegionCopyRules, name, retainRule, tagsToAdd);
        }
    }
}
