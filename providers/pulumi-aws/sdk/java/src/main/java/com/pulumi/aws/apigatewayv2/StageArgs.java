// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.apigatewayv2;

import com.pulumi.aws.apigatewayv2.inputs.StageAccessLogSettingsArgs;
import com.pulumi.aws.apigatewayv2.inputs.StageDefaultRouteSettingsArgs;
import com.pulumi.aws.apigatewayv2.inputs.StageRouteSettingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class StageArgs extends com.pulumi.resources.ResourceArgs {

    public static final StageArgs Empty = new StageArgs();

    /**
     * Settings for logging access in this stage.
     * Use the `aws.apigateway.Account` resource to configure [permissions for CloudWatch Logging](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html#set-up-access-logging-permissions).
     * 
     */
    @Import(name="accessLogSettings")
      private final @Nullable Output<StageAccessLogSettingsArgs> accessLogSettings;

    public Output<StageAccessLogSettingsArgs> accessLogSettings() {
        return this.accessLogSettings == null ? Codegen.empty() : this.accessLogSettings;
    }

    /**
     * The API identifier.
     * 
     */
    @Import(name="apiId", required=true)
      private final Output<String> apiId;

    public Output<String> apiId() {
        return this.apiId;
    }

    /**
     * Whether updates to an API automatically trigger a new deployment. Defaults to `false`.
     * 
     */
    @Import(name="autoDeploy")
      private final @Nullable Output<Boolean> autoDeploy;

    public Output<Boolean> autoDeploy() {
        return this.autoDeploy == null ? Codegen.empty() : this.autoDeploy;
    }

    /**
     * The identifier of a client certificate for the stage. Use the `aws.apigateway.ClientCertificate` resource to configure a client certificate.
     * Supported only for WebSocket APIs.
     * 
     */
    @Import(name="clientCertificateId")
      private final @Nullable Output<String> clientCertificateId;

    public Output<String> clientCertificateId() {
        return this.clientCertificateId == null ? Codegen.empty() : this.clientCertificateId;
    }

    /**
     * The default route settings for the stage.
     * 
     */
    @Import(name="defaultRouteSettings")
      private final @Nullable Output<StageDefaultRouteSettingsArgs> defaultRouteSettings;

    public Output<StageDefaultRouteSettingsArgs> defaultRouteSettings() {
        return this.defaultRouteSettings == null ? Codegen.empty() : this.defaultRouteSettings;
    }

    /**
     * The deployment identifier of the stage. Use the `aws.apigatewayv2.Deployment` resource to configure a deployment.
     * 
     */
    @Import(name="deploymentId")
      private final @Nullable Output<String> deploymentId;

    public Output<String> deploymentId() {
        return this.deploymentId == null ? Codegen.empty() : this.deploymentId;
    }

    /**
     * The description for the stage. Must be less than or equal to 1024 characters in length.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The name of the stage. Must be between 1 and 128 characters in length.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Route settings for the stage.
     * 
     */
    @Import(name="routeSettings")
      private final @Nullable Output<List<StageRouteSettingArgs>> routeSettings;

    public Output<List<StageRouteSettingArgs>> routeSettings() {
        return this.routeSettings == null ? Codegen.empty() : this.routeSettings;
    }

    /**
     * A map that defines the stage variables for the stage.
     * 
     */
    @Import(name="stageVariables")
      private final @Nullable Output<Map<String,String>> stageVariables;

    public Output<Map<String,String>> stageVariables() {
        return this.stageVariables == null ? Codegen.empty() : this.stageVariables;
    }

    /**
     * A map of tags to assign to the stage. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public StageArgs(
        @Nullable Output<StageAccessLogSettingsArgs> accessLogSettings,
        Output<String> apiId,
        @Nullable Output<Boolean> autoDeploy,
        @Nullable Output<String> clientCertificateId,
        @Nullable Output<StageDefaultRouteSettingsArgs> defaultRouteSettings,
        @Nullable Output<String> deploymentId,
        @Nullable Output<String> description,
        @Nullable Output<String> name,
        @Nullable Output<List<StageRouteSettingArgs>> routeSettings,
        @Nullable Output<Map<String,String>> stageVariables,
        @Nullable Output<Map<String,String>> tags) {
        this.accessLogSettings = accessLogSettings;
        this.apiId = Objects.requireNonNull(apiId, "expected parameter 'apiId' to be non-null");
        this.autoDeploy = autoDeploy;
        this.clientCertificateId = clientCertificateId;
        this.defaultRouteSettings = defaultRouteSettings;
        this.deploymentId = deploymentId;
        this.description = description;
        this.name = name;
        this.routeSettings = routeSettings;
        this.stageVariables = stageVariables;
        this.tags = tags;
    }

    private StageArgs() {
        this.accessLogSettings = Codegen.empty();
        this.apiId = Codegen.empty();
        this.autoDeploy = Codegen.empty();
        this.clientCertificateId = Codegen.empty();
        this.defaultRouteSettings = Codegen.empty();
        this.deploymentId = Codegen.empty();
        this.description = Codegen.empty();
        this.name = Codegen.empty();
        this.routeSettings = Codegen.empty();
        this.stageVariables = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<StageAccessLogSettingsArgs> accessLogSettings;
        private Output<String> apiId;
        private @Nullable Output<Boolean> autoDeploy;
        private @Nullable Output<String> clientCertificateId;
        private @Nullable Output<StageDefaultRouteSettingsArgs> defaultRouteSettings;
        private @Nullable Output<String> deploymentId;
        private @Nullable Output<String> description;
        private @Nullable Output<String> name;
        private @Nullable Output<List<StageRouteSettingArgs>> routeSettings;
        private @Nullable Output<Map<String,String>> stageVariables;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(StageArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLogSettings = defaults.accessLogSettings;
    	      this.apiId = defaults.apiId;
    	      this.autoDeploy = defaults.autoDeploy;
    	      this.clientCertificateId = defaults.clientCertificateId;
    	      this.defaultRouteSettings = defaults.defaultRouteSettings;
    	      this.deploymentId = defaults.deploymentId;
    	      this.description = defaults.description;
    	      this.name = defaults.name;
    	      this.routeSettings = defaults.routeSettings;
    	      this.stageVariables = defaults.stageVariables;
    	      this.tags = defaults.tags;
        }

        public Builder accessLogSettings(@Nullable Output<StageAccessLogSettingsArgs> accessLogSettings) {
            this.accessLogSettings = accessLogSettings;
            return this;
        }
        public Builder accessLogSettings(@Nullable StageAccessLogSettingsArgs accessLogSettings) {
            this.accessLogSettings = Codegen.ofNullable(accessLogSettings);
            return this;
        }
        public Builder apiId(Output<String> apiId) {
            this.apiId = Objects.requireNonNull(apiId);
            return this;
        }
        public Builder apiId(String apiId) {
            this.apiId = Output.of(Objects.requireNonNull(apiId));
            return this;
        }
        public Builder autoDeploy(@Nullable Output<Boolean> autoDeploy) {
            this.autoDeploy = autoDeploy;
            return this;
        }
        public Builder autoDeploy(@Nullable Boolean autoDeploy) {
            this.autoDeploy = Codegen.ofNullable(autoDeploy);
            return this;
        }
        public Builder clientCertificateId(@Nullable Output<String> clientCertificateId) {
            this.clientCertificateId = clientCertificateId;
            return this;
        }
        public Builder clientCertificateId(@Nullable String clientCertificateId) {
            this.clientCertificateId = Codegen.ofNullable(clientCertificateId);
            return this;
        }
        public Builder defaultRouteSettings(@Nullable Output<StageDefaultRouteSettingsArgs> defaultRouteSettings) {
            this.defaultRouteSettings = defaultRouteSettings;
            return this;
        }
        public Builder defaultRouteSettings(@Nullable StageDefaultRouteSettingsArgs defaultRouteSettings) {
            this.defaultRouteSettings = Codegen.ofNullable(defaultRouteSettings);
            return this;
        }
        public Builder deploymentId(@Nullable Output<String> deploymentId) {
            this.deploymentId = deploymentId;
            return this;
        }
        public Builder deploymentId(@Nullable String deploymentId) {
            this.deploymentId = Codegen.ofNullable(deploymentId);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder routeSettings(@Nullable Output<List<StageRouteSettingArgs>> routeSettings) {
            this.routeSettings = routeSettings;
            return this;
        }
        public Builder routeSettings(@Nullable List<StageRouteSettingArgs> routeSettings) {
            this.routeSettings = Codegen.ofNullable(routeSettings);
            return this;
        }
        public Builder routeSettings(StageRouteSettingArgs... routeSettings) {
            return routeSettings(List.of(routeSettings));
        }
        public Builder stageVariables(@Nullable Output<Map<String,String>> stageVariables) {
            this.stageVariables = stageVariables;
            return this;
        }
        public Builder stageVariables(@Nullable Map<String,String> stageVariables) {
            this.stageVariables = Codegen.ofNullable(stageVariables);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public StageArgs build() {
            return new StageArgs(accessLogSettings, apiId, autoDeploy, clientCertificateId, defaultRouteSettings, deploymentId, description, name, routeSettings, stageVariables, tags);
        }
    }
}
