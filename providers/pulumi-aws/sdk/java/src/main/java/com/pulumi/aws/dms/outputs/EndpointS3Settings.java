// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.dms.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class EndpointS3Settings {
    /**
     * @return Whether to add column name information to the .csv output file. Default is `false`.
     * 
     */
    private final @Nullable Boolean addColumnName;
    /**
     * @return S3 object prefix.
     * 
     */
    private final @Nullable String bucketFolder;
    /**
     * @return S3 bucket name.
     * 
     */
    private final @Nullable String bucketName;
    /**
     * @return Predefined (canned) access control list for objects created in an S3 bucket. Valid values include `NONE`, `PRIVATE`, `PUBLIC_READ`, `PUBLIC_READ_WRITE`, `AUTHENTICATED_READ`, `AWS_EXEC_READ`, `BUCKET_OWNER_READ`, and `BUCKET_OWNER_FULL_CONTROL`. Default is `NONE`.
     * 
     */
    private final @Nullable String cannedAclForObjects;
    /**
     * @return Whether to write insert and update operations to .csv or .parquet output files. Default is `false`.
     * 
     */
    private final @Nullable Boolean cdcInsertsAndUpdates;
    /**
     * @return Whether to write insert operations to .csv or .parquet output files. Default is `false`.
     * 
     */
    private final @Nullable Boolean cdcInsertsOnly;
    /**
     * @return Maximum length of the interval, defined in seconds, after which to output a file to Amazon S3. Default is `60`.
     * 
     */
    private final @Nullable Integer cdcMaxBatchInterval;
    /**
     * @return Minimum file size, defined in megabytes, to reach for a file output. Default is `32`.
     * 
     */
    private final @Nullable Integer cdcMinFileSize;
    /**
     * @return Folder path of CDC files. For an S3 source, this setting is required if a task captures change data; otherwise, it&#39;s optional. If `cdc_path` is set, AWS DMS reads CDC files from this path and replicates the data changes to the target endpoint. Supported in AWS DMS versions 3.4.2 and later.
     * 
     */
    private final @Nullable String cdcPath;
    /**
     * @return Set to compress target files. Default is `NONE`. Valid values are `GZIP` and `NONE`.
     * 
     */
    private final @Nullable String compressionType;
    /**
     * @return Delimiter used to separate columns in the source files. Default is `,`.
     * 
     */
    private final @Nullable String csvDelimiter;
    /**
     * @return String to use for all columns not included in the supplemental log.
     * 
     */
    private final @Nullable String csvNoSupValue;
    /**
     * @return String to as null when writing to the target.
     * 
     */
    private final @Nullable String csvNullValue;
    /**
     * @return Delimiter used to separate rows in the source files. Default is `\n`.
     * 
     */
    private final @Nullable String csvRowDelimiter;
    /**
     * @return Output format for the files that AWS DMS uses to create S3 objects. Valid values are `csv` and `parquet`. Default is `csv`.
     * 
     */
    private final @Nullable String dataFormat;
    /**
     * @return Size of one data page in bytes. Default is `1048576` (1 MiB).
     * 
     */
    private final @Nullable Integer dataPageSize;
    /**
     * @return Date separating delimiter to use during folder partitioning. Valid values are `SLASH`, `UNDERSCORE`, `DASH`, and `NONE`. Default is `SLASH`.
     * 
     */
    private final @Nullable String datePartitionDelimiter;
    /**
     * @return Partition S3 bucket folders based on transaction commit dates. Default is `false`.
     * 
     */
    private final @Nullable Boolean datePartitionEnabled;
    /**
     * @return Date format to use during folder partitioning. Use this parameter when `date_partition_enabled` is set to true. Valid values are `YYYYMMDD`, `YYYYMMDDHH`, `YYYYMM`, `MMYYYYDD`, and `DDMMYYYY`. Default is `YYYYMMDD`.
     * 
     */
    private final @Nullable String datePartitionSequence;
    /**
     * @return Maximum size in bytes of an encoded dictionary page of a column. Default is `1048576` (1 MiB).
     * 
     */
    private final @Nullable Integer dictPageSizeLimit;
    /**
     * @return Whether to enable statistics for Parquet pages and row groups. Default is `true`.
     * 
     */
    private final @Nullable Boolean enableStatistics;
    /**
     * @return Type of encoding to use. Value values are `rle_dictionary`, `plain`, and `plain_dictionary`. Default is `rle_dictionary`.
     * 
     */
    private final @Nullable String encodingType;
    /**
     * @return Server-side encryption mode that you want to encrypt your .csv or .parquet object files copied to S3. Valid values are `SSE_S3` and `SSE_KMS`. Default is `SSE_S3`.
     * 
     */
    private final @Nullable String encryptionMode;
    /**
     * @return JSON document that describes how AWS DMS should interpret the data.
     * 
     */
    private final @Nullable String externalTableDefinition;
    /**
     * @return When this value is set to `1`, DMS ignores the first row header in a .csv file. Default is `0`.
     * 
     */
    private final @Nullable Integer ignoreHeadersRow;
    /**
     * @return Whether to enable a full load to write INSERT operations to the .csv output files only to indicate how the rows were added to the source database. Default is `false`.
     * 
     */
    private final @Nullable Boolean includeOpForFullLoad;
    /**
     * @return Maximum size (in KB) of any .csv file to be created while migrating to an S3 target during full load. Valid values are from `1` to `1048576`. Default is `1048576` (1 GB).
     * 
     */
    private final @Nullable Integer maxFileSize;
    /**
     * @return - Specifies the precision of any TIMESTAMP column values written to an S3 object file in .parquet format. Default is `false`.
     * 
     */
    private final @Nullable Boolean parquetTimestampInMillisecond;
    /**
     * @return Version of the .parquet file format. Default is `parquet-1-0`. Valid values are `parquet-1-0` and `parquet-2-0`.
     * 
     */
    private final @Nullable String parquetVersion;
    /**
     * @return Whether DMS saves the transaction order for a CDC load on the S3 target specified by `cdc_path`. Default is `false`.
     * 
     */
    private final @Nullable Boolean preserveTransactions;
    /**
     * @return For an S3 source, whether each leading double quotation mark has to be followed by an ending double quotation mark. Default is `true`.
     * 
     */
    private final @Nullable Boolean rfc4180;
    /**
     * @return Number of rows in a row group. Default is `10000`.
     * 
     */
    private final @Nullable Integer rowGroupLength;
    /**
     * @return If you set encryptionMode to `SSE_KMS`, set this parameter to the ARN for the AWS KMS key.
     * 
     */
    private final @Nullable String serverSideEncryptionKmsKeyId;
    /**
     * @return ARN of the IAM Role with permissions to read from or write to the S3 Bucket.
     * 
     */
    private final @Nullable String serviceAccessRoleArn;
    /**
     * @return Column to add with timestamp information to the endpoint data for an Amazon S3 target.
     * 
     */
    private final @Nullable String timestampColumnName;
    /**
     * @return Whether to use `csv_no_sup_value` for columns not included in the supplemental log.
     * 
     */
    private final @Nullable Boolean useCsvNoSupValue;

    @CustomType.Constructor
    private EndpointS3Settings(
        @CustomType.Parameter("addColumnName") @Nullable Boolean addColumnName,
        @CustomType.Parameter("bucketFolder") @Nullable String bucketFolder,
        @CustomType.Parameter("bucketName") @Nullable String bucketName,
        @CustomType.Parameter("cannedAclForObjects") @Nullable String cannedAclForObjects,
        @CustomType.Parameter("cdcInsertsAndUpdates") @Nullable Boolean cdcInsertsAndUpdates,
        @CustomType.Parameter("cdcInsertsOnly") @Nullable Boolean cdcInsertsOnly,
        @CustomType.Parameter("cdcMaxBatchInterval") @Nullable Integer cdcMaxBatchInterval,
        @CustomType.Parameter("cdcMinFileSize") @Nullable Integer cdcMinFileSize,
        @CustomType.Parameter("cdcPath") @Nullable String cdcPath,
        @CustomType.Parameter("compressionType") @Nullable String compressionType,
        @CustomType.Parameter("csvDelimiter") @Nullable String csvDelimiter,
        @CustomType.Parameter("csvNoSupValue") @Nullable String csvNoSupValue,
        @CustomType.Parameter("csvNullValue") @Nullable String csvNullValue,
        @CustomType.Parameter("csvRowDelimiter") @Nullable String csvRowDelimiter,
        @CustomType.Parameter("dataFormat") @Nullable String dataFormat,
        @CustomType.Parameter("dataPageSize") @Nullable Integer dataPageSize,
        @CustomType.Parameter("datePartitionDelimiter") @Nullable String datePartitionDelimiter,
        @CustomType.Parameter("datePartitionEnabled") @Nullable Boolean datePartitionEnabled,
        @CustomType.Parameter("datePartitionSequence") @Nullable String datePartitionSequence,
        @CustomType.Parameter("dictPageSizeLimit") @Nullable Integer dictPageSizeLimit,
        @CustomType.Parameter("enableStatistics") @Nullable Boolean enableStatistics,
        @CustomType.Parameter("encodingType") @Nullable String encodingType,
        @CustomType.Parameter("encryptionMode") @Nullable String encryptionMode,
        @CustomType.Parameter("externalTableDefinition") @Nullable String externalTableDefinition,
        @CustomType.Parameter("ignoreHeadersRow") @Nullable Integer ignoreHeadersRow,
        @CustomType.Parameter("includeOpForFullLoad") @Nullable Boolean includeOpForFullLoad,
        @CustomType.Parameter("maxFileSize") @Nullable Integer maxFileSize,
        @CustomType.Parameter("parquetTimestampInMillisecond") @Nullable Boolean parquetTimestampInMillisecond,
        @CustomType.Parameter("parquetVersion") @Nullable String parquetVersion,
        @CustomType.Parameter("preserveTransactions") @Nullable Boolean preserveTransactions,
        @CustomType.Parameter("rfc4180") @Nullable Boolean rfc4180,
        @CustomType.Parameter("rowGroupLength") @Nullable Integer rowGroupLength,
        @CustomType.Parameter("serverSideEncryptionKmsKeyId") @Nullable String serverSideEncryptionKmsKeyId,
        @CustomType.Parameter("serviceAccessRoleArn") @Nullable String serviceAccessRoleArn,
        @CustomType.Parameter("timestampColumnName") @Nullable String timestampColumnName,
        @CustomType.Parameter("useCsvNoSupValue") @Nullable Boolean useCsvNoSupValue) {
        this.addColumnName = addColumnName;
        this.bucketFolder = bucketFolder;
        this.bucketName = bucketName;
        this.cannedAclForObjects = cannedAclForObjects;
        this.cdcInsertsAndUpdates = cdcInsertsAndUpdates;
        this.cdcInsertsOnly = cdcInsertsOnly;
        this.cdcMaxBatchInterval = cdcMaxBatchInterval;
        this.cdcMinFileSize = cdcMinFileSize;
        this.cdcPath = cdcPath;
        this.compressionType = compressionType;
        this.csvDelimiter = csvDelimiter;
        this.csvNoSupValue = csvNoSupValue;
        this.csvNullValue = csvNullValue;
        this.csvRowDelimiter = csvRowDelimiter;
        this.dataFormat = dataFormat;
        this.dataPageSize = dataPageSize;
        this.datePartitionDelimiter = datePartitionDelimiter;
        this.datePartitionEnabled = datePartitionEnabled;
        this.datePartitionSequence = datePartitionSequence;
        this.dictPageSizeLimit = dictPageSizeLimit;
        this.enableStatistics = enableStatistics;
        this.encodingType = encodingType;
        this.encryptionMode = encryptionMode;
        this.externalTableDefinition = externalTableDefinition;
        this.ignoreHeadersRow = ignoreHeadersRow;
        this.includeOpForFullLoad = includeOpForFullLoad;
        this.maxFileSize = maxFileSize;
        this.parquetTimestampInMillisecond = parquetTimestampInMillisecond;
        this.parquetVersion = parquetVersion;
        this.preserveTransactions = preserveTransactions;
        this.rfc4180 = rfc4180;
        this.rowGroupLength = rowGroupLength;
        this.serverSideEncryptionKmsKeyId = serverSideEncryptionKmsKeyId;
        this.serviceAccessRoleArn = serviceAccessRoleArn;
        this.timestampColumnName = timestampColumnName;
        this.useCsvNoSupValue = useCsvNoSupValue;
    }

    /**
     * @return Whether to add column name information to the .csv output file. Default is `false`.
     * 
     */
    public Optional<Boolean> addColumnName() {
        return Optional.ofNullable(this.addColumnName);
    }
    /**
     * @return S3 object prefix.
     * 
     */
    public Optional<String> bucketFolder() {
        return Optional.ofNullable(this.bucketFolder);
    }
    /**
     * @return S3 bucket name.
     * 
     */
    public Optional<String> bucketName() {
        return Optional.ofNullable(this.bucketName);
    }
    /**
     * @return Predefined (canned) access control list for objects created in an S3 bucket. Valid values include `NONE`, `PRIVATE`, `PUBLIC_READ`, `PUBLIC_READ_WRITE`, `AUTHENTICATED_READ`, `AWS_EXEC_READ`, `BUCKET_OWNER_READ`, and `BUCKET_OWNER_FULL_CONTROL`. Default is `NONE`.
     * 
     */
    public Optional<String> cannedAclForObjects() {
        return Optional.ofNullable(this.cannedAclForObjects);
    }
    /**
     * @return Whether to write insert and update operations to .csv or .parquet output files. Default is `false`.
     * 
     */
    public Optional<Boolean> cdcInsertsAndUpdates() {
        return Optional.ofNullable(this.cdcInsertsAndUpdates);
    }
    /**
     * @return Whether to write insert operations to .csv or .parquet output files. Default is `false`.
     * 
     */
    public Optional<Boolean> cdcInsertsOnly() {
        return Optional.ofNullable(this.cdcInsertsOnly);
    }
    /**
     * @return Maximum length of the interval, defined in seconds, after which to output a file to Amazon S3. Default is `60`.
     * 
     */
    public Optional<Integer> cdcMaxBatchInterval() {
        return Optional.ofNullable(this.cdcMaxBatchInterval);
    }
    /**
     * @return Minimum file size, defined in megabytes, to reach for a file output. Default is `32`.
     * 
     */
    public Optional<Integer> cdcMinFileSize() {
        return Optional.ofNullable(this.cdcMinFileSize);
    }
    /**
     * @return Folder path of CDC files. For an S3 source, this setting is required if a task captures change data; otherwise, it&#39;s optional. If `cdc_path` is set, AWS DMS reads CDC files from this path and replicates the data changes to the target endpoint. Supported in AWS DMS versions 3.4.2 and later.
     * 
     */
    public Optional<String> cdcPath() {
        return Optional.ofNullable(this.cdcPath);
    }
    /**
     * @return Set to compress target files. Default is `NONE`. Valid values are `GZIP` and `NONE`.
     * 
     */
    public Optional<String> compressionType() {
        return Optional.ofNullable(this.compressionType);
    }
    /**
     * @return Delimiter used to separate columns in the source files. Default is `,`.
     * 
     */
    public Optional<String> csvDelimiter() {
        return Optional.ofNullable(this.csvDelimiter);
    }
    /**
     * @return String to use for all columns not included in the supplemental log.
     * 
     */
    public Optional<String> csvNoSupValue() {
        return Optional.ofNullable(this.csvNoSupValue);
    }
    /**
     * @return String to as null when writing to the target.
     * 
     */
    public Optional<String> csvNullValue() {
        return Optional.ofNullable(this.csvNullValue);
    }
    /**
     * @return Delimiter used to separate rows in the source files. Default is `\n`.
     * 
     */
    public Optional<String> csvRowDelimiter() {
        return Optional.ofNullable(this.csvRowDelimiter);
    }
    /**
     * @return Output format for the files that AWS DMS uses to create S3 objects. Valid values are `csv` and `parquet`. Default is `csv`.
     * 
     */
    public Optional<String> dataFormat() {
        return Optional.ofNullable(this.dataFormat);
    }
    /**
     * @return Size of one data page in bytes. Default is `1048576` (1 MiB).
     * 
     */
    public Optional<Integer> dataPageSize() {
        return Optional.ofNullable(this.dataPageSize);
    }
    /**
     * @return Date separating delimiter to use during folder partitioning. Valid values are `SLASH`, `UNDERSCORE`, `DASH`, and `NONE`. Default is `SLASH`.
     * 
     */
    public Optional<String> datePartitionDelimiter() {
        return Optional.ofNullable(this.datePartitionDelimiter);
    }
    /**
     * @return Partition S3 bucket folders based on transaction commit dates. Default is `false`.
     * 
     */
    public Optional<Boolean> datePartitionEnabled() {
        return Optional.ofNullable(this.datePartitionEnabled);
    }
    /**
     * @return Date format to use during folder partitioning. Use this parameter when `date_partition_enabled` is set to true. Valid values are `YYYYMMDD`, `YYYYMMDDHH`, `YYYYMM`, `MMYYYYDD`, and `DDMMYYYY`. Default is `YYYYMMDD`.
     * 
     */
    public Optional<String> datePartitionSequence() {
        return Optional.ofNullable(this.datePartitionSequence);
    }
    /**
     * @return Maximum size in bytes of an encoded dictionary page of a column. Default is `1048576` (1 MiB).
     * 
     */
    public Optional<Integer> dictPageSizeLimit() {
        return Optional.ofNullable(this.dictPageSizeLimit);
    }
    /**
     * @return Whether to enable statistics for Parquet pages and row groups. Default is `true`.
     * 
     */
    public Optional<Boolean> enableStatistics() {
        return Optional.ofNullable(this.enableStatistics);
    }
    /**
     * @return Type of encoding to use. Value values are `rle_dictionary`, `plain`, and `plain_dictionary`. Default is `rle_dictionary`.
     * 
     */
    public Optional<String> encodingType() {
        return Optional.ofNullable(this.encodingType);
    }
    /**
     * @return Server-side encryption mode that you want to encrypt your .csv or .parquet object files copied to S3. Valid values are `SSE_S3` and `SSE_KMS`. Default is `SSE_S3`.
     * 
     */
    public Optional<String> encryptionMode() {
        return Optional.ofNullable(this.encryptionMode);
    }
    /**
     * @return JSON document that describes how AWS DMS should interpret the data.
     * 
     */
    public Optional<String> externalTableDefinition() {
        return Optional.ofNullable(this.externalTableDefinition);
    }
    /**
     * @return When this value is set to `1`, DMS ignores the first row header in a .csv file. Default is `0`.
     * 
     */
    public Optional<Integer> ignoreHeadersRow() {
        return Optional.ofNullable(this.ignoreHeadersRow);
    }
    /**
     * @return Whether to enable a full load to write INSERT operations to the .csv output files only to indicate how the rows were added to the source database. Default is `false`.
     * 
     */
    public Optional<Boolean> includeOpForFullLoad() {
        return Optional.ofNullable(this.includeOpForFullLoad);
    }
    /**
     * @return Maximum size (in KB) of any .csv file to be created while migrating to an S3 target during full load. Valid values are from `1` to `1048576`. Default is `1048576` (1 GB).
     * 
     */
    public Optional<Integer> maxFileSize() {
        return Optional.ofNullable(this.maxFileSize);
    }
    /**
     * @return - Specifies the precision of any TIMESTAMP column values written to an S3 object file in .parquet format. Default is `false`.
     * 
     */
    public Optional<Boolean> parquetTimestampInMillisecond() {
        return Optional.ofNullable(this.parquetTimestampInMillisecond);
    }
    /**
     * @return Version of the .parquet file format. Default is `parquet-1-0`. Valid values are `parquet-1-0` and `parquet-2-0`.
     * 
     */
    public Optional<String> parquetVersion() {
        return Optional.ofNullable(this.parquetVersion);
    }
    /**
     * @return Whether DMS saves the transaction order for a CDC load on the S3 target specified by `cdc_path`. Default is `false`.
     * 
     */
    public Optional<Boolean> preserveTransactions() {
        return Optional.ofNullable(this.preserveTransactions);
    }
    /**
     * @return For an S3 source, whether each leading double quotation mark has to be followed by an ending double quotation mark. Default is `true`.
     * 
     */
    public Optional<Boolean> rfc4180() {
        return Optional.ofNullable(this.rfc4180);
    }
    /**
     * @return Number of rows in a row group. Default is `10000`.
     * 
     */
    public Optional<Integer> rowGroupLength() {
        return Optional.ofNullable(this.rowGroupLength);
    }
    /**
     * @return If you set encryptionMode to `SSE_KMS`, set this parameter to the ARN for the AWS KMS key.
     * 
     */
    public Optional<String> serverSideEncryptionKmsKeyId() {
        return Optional.ofNullable(this.serverSideEncryptionKmsKeyId);
    }
    /**
     * @return ARN of the IAM Role with permissions to read from or write to the S3 Bucket.
     * 
     */
    public Optional<String> serviceAccessRoleArn() {
        return Optional.ofNullable(this.serviceAccessRoleArn);
    }
    /**
     * @return Column to add with timestamp information to the endpoint data for an Amazon S3 target.
     * 
     */
    public Optional<String> timestampColumnName() {
        return Optional.ofNullable(this.timestampColumnName);
    }
    /**
     * @return Whether to use `csv_no_sup_value` for columns not included in the supplemental log.
     * 
     */
    public Optional<Boolean> useCsvNoSupValue() {
        return Optional.ofNullable(this.useCsvNoSupValue);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EndpointS3Settings defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean addColumnName;
        private @Nullable String bucketFolder;
        private @Nullable String bucketName;
        private @Nullable String cannedAclForObjects;
        private @Nullable Boolean cdcInsertsAndUpdates;
        private @Nullable Boolean cdcInsertsOnly;
        private @Nullable Integer cdcMaxBatchInterval;
        private @Nullable Integer cdcMinFileSize;
        private @Nullable String cdcPath;
        private @Nullable String compressionType;
        private @Nullable String csvDelimiter;
        private @Nullable String csvNoSupValue;
        private @Nullable String csvNullValue;
        private @Nullable String csvRowDelimiter;
        private @Nullable String dataFormat;
        private @Nullable Integer dataPageSize;
        private @Nullable String datePartitionDelimiter;
        private @Nullable Boolean datePartitionEnabled;
        private @Nullable String datePartitionSequence;
        private @Nullable Integer dictPageSizeLimit;
        private @Nullable Boolean enableStatistics;
        private @Nullable String encodingType;
        private @Nullable String encryptionMode;
        private @Nullable String externalTableDefinition;
        private @Nullable Integer ignoreHeadersRow;
        private @Nullable Boolean includeOpForFullLoad;
        private @Nullable Integer maxFileSize;
        private @Nullable Boolean parquetTimestampInMillisecond;
        private @Nullable String parquetVersion;
        private @Nullable Boolean preserveTransactions;
        private @Nullable Boolean rfc4180;
        private @Nullable Integer rowGroupLength;
        private @Nullable String serverSideEncryptionKmsKeyId;
        private @Nullable String serviceAccessRoleArn;
        private @Nullable String timestampColumnName;
        private @Nullable Boolean useCsvNoSupValue;

        public Builder() {
    	      // Empty
        }

        public Builder(EndpointS3Settings defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addColumnName = defaults.addColumnName;
    	      this.bucketFolder = defaults.bucketFolder;
    	      this.bucketName = defaults.bucketName;
    	      this.cannedAclForObjects = defaults.cannedAclForObjects;
    	      this.cdcInsertsAndUpdates = defaults.cdcInsertsAndUpdates;
    	      this.cdcInsertsOnly = defaults.cdcInsertsOnly;
    	      this.cdcMaxBatchInterval = defaults.cdcMaxBatchInterval;
    	      this.cdcMinFileSize = defaults.cdcMinFileSize;
    	      this.cdcPath = defaults.cdcPath;
    	      this.compressionType = defaults.compressionType;
    	      this.csvDelimiter = defaults.csvDelimiter;
    	      this.csvNoSupValue = defaults.csvNoSupValue;
    	      this.csvNullValue = defaults.csvNullValue;
    	      this.csvRowDelimiter = defaults.csvRowDelimiter;
    	      this.dataFormat = defaults.dataFormat;
    	      this.dataPageSize = defaults.dataPageSize;
    	      this.datePartitionDelimiter = defaults.datePartitionDelimiter;
    	      this.datePartitionEnabled = defaults.datePartitionEnabled;
    	      this.datePartitionSequence = defaults.datePartitionSequence;
    	      this.dictPageSizeLimit = defaults.dictPageSizeLimit;
    	      this.enableStatistics = defaults.enableStatistics;
    	      this.encodingType = defaults.encodingType;
    	      this.encryptionMode = defaults.encryptionMode;
    	      this.externalTableDefinition = defaults.externalTableDefinition;
    	      this.ignoreHeadersRow = defaults.ignoreHeadersRow;
    	      this.includeOpForFullLoad = defaults.includeOpForFullLoad;
    	      this.maxFileSize = defaults.maxFileSize;
    	      this.parquetTimestampInMillisecond = defaults.parquetTimestampInMillisecond;
    	      this.parquetVersion = defaults.parquetVersion;
    	      this.preserveTransactions = defaults.preserveTransactions;
    	      this.rfc4180 = defaults.rfc4180;
    	      this.rowGroupLength = defaults.rowGroupLength;
    	      this.serverSideEncryptionKmsKeyId = defaults.serverSideEncryptionKmsKeyId;
    	      this.serviceAccessRoleArn = defaults.serviceAccessRoleArn;
    	      this.timestampColumnName = defaults.timestampColumnName;
    	      this.useCsvNoSupValue = defaults.useCsvNoSupValue;
        }

        public Builder addColumnName(@Nullable Boolean addColumnName) {
            this.addColumnName = addColumnName;
            return this;
        }
        public Builder bucketFolder(@Nullable String bucketFolder) {
            this.bucketFolder = bucketFolder;
            return this;
        }
        public Builder bucketName(@Nullable String bucketName) {
            this.bucketName = bucketName;
            return this;
        }
        public Builder cannedAclForObjects(@Nullable String cannedAclForObjects) {
            this.cannedAclForObjects = cannedAclForObjects;
            return this;
        }
        public Builder cdcInsertsAndUpdates(@Nullable Boolean cdcInsertsAndUpdates) {
            this.cdcInsertsAndUpdates = cdcInsertsAndUpdates;
            return this;
        }
        public Builder cdcInsertsOnly(@Nullable Boolean cdcInsertsOnly) {
            this.cdcInsertsOnly = cdcInsertsOnly;
            return this;
        }
        public Builder cdcMaxBatchInterval(@Nullable Integer cdcMaxBatchInterval) {
            this.cdcMaxBatchInterval = cdcMaxBatchInterval;
            return this;
        }
        public Builder cdcMinFileSize(@Nullable Integer cdcMinFileSize) {
            this.cdcMinFileSize = cdcMinFileSize;
            return this;
        }
        public Builder cdcPath(@Nullable String cdcPath) {
            this.cdcPath = cdcPath;
            return this;
        }
        public Builder compressionType(@Nullable String compressionType) {
            this.compressionType = compressionType;
            return this;
        }
        public Builder csvDelimiter(@Nullable String csvDelimiter) {
            this.csvDelimiter = csvDelimiter;
            return this;
        }
        public Builder csvNoSupValue(@Nullable String csvNoSupValue) {
            this.csvNoSupValue = csvNoSupValue;
            return this;
        }
        public Builder csvNullValue(@Nullable String csvNullValue) {
            this.csvNullValue = csvNullValue;
            return this;
        }
        public Builder csvRowDelimiter(@Nullable String csvRowDelimiter) {
            this.csvRowDelimiter = csvRowDelimiter;
            return this;
        }
        public Builder dataFormat(@Nullable String dataFormat) {
            this.dataFormat = dataFormat;
            return this;
        }
        public Builder dataPageSize(@Nullable Integer dataPageSize) {
            this.dataPageSize = dataPageSize;
            return this;
        }
        public Builder datePartitionDelimiter(@Nullable String datePartitionDelimiter) {
            this.datePartitionDelimiter = datePartitionDelimiter;
            return this;
        }
        public Builder datePartitionEnabled(@Nullable Boolean datePartitionEnabled) {
            this.datePartitionEnabled = datePartitionEnabled;
            return this;
        }
        public Builder datePartitionSequence(@Nullable String datePartitionSequence) {
            this.datePartitionSequence = datePartitionSequence;
            return this;
        }
        public Builder dictPageSizeLimit(@Nullable Integer dictPageSizeLimit) {
            this.dictPageSizeLimit = dictPageSizeLimit;
            return this;
        }
        public Builder enableStatistics(@Nullable Boolean enableStatistics) {
            this.enableStatistics = enableStatistics;
            return this;
        }
        public Builder encodingType(@Nullable String encodingType) {
            this.encodingType = encodingType;
            return this;
        }
        public Builder encryptionMode(@Nullable String encryptionMode) {
            this.encryptionMode = encryptionMode;
            return this;
        }
        public Builder externalTableDefinition(@Nullable String externalTableDefinition) {
            this.externalTableDefinition = externalTableDefinition;
            return this;
        }
        public Builder ignoreHeadersRow(@Nullable Integer ignoreHeadersRow) {
            this.ignoreHeadersRow = ignoreHeadersRow;
            return this;
        }
        public Builder includeOpForFullLoad(@Nullable Boolean includeOpForFullLoad) {
            this.includeOpForFullLoad = includeOpForFullLoad;
            return this;
        }
        public Builder maxFileSize(@Nullable Integer maxFileSize) {
            this.maxFileSize = maxFileSize;
            return this;
        }
        public Builder parquetTimestampInMillisecond(@Nullable Boolean parquetTimestampInMillisecond) {
            this.parquetTimestampInMillisecond = parquetTimestampInMillisecond;
            return this;
        }
        public Builder parquetVersion(@Nullable String parquetVersion) {
            this.parquetVersion = parquetVersion;
            return this;
        }
        public Builder preserveTransactions(@Nullable Boolean preserveTransactions) {
            this.preserveTransactions = preserveTransactions;
            return this;
        }
        public Builder rfc4180(@Nullable Boolean rfc4180) {
            this.rfc4180 = rfc4180;
            return this;
        }
        public Builder rowGroupLength(@Nullable Integer rowGroupLength) {
            this.rowGroupLength = rowGroupLength;
            return this;
        }
        public Builder serverSideEncryptionKmsKeyId(@Nullable String serverSideEncryptionKmsKeyId) {
            this.serverSideEncryptionKmsKeyId = serverSideEncryptionKmsKeyId;
            return this;
        }
        public Builder serviceAccessRoleArn(@Nullable String serviceAccessRoleArn) {
            this.serviceAccessRoleArn = serviceAccessRoleArn;
            return this;
        }
        public Builder timestampColumnName(@Nullable String timestampColumnName) {
            this.timestampColumnName = timestampColumnName;
            return this;
        }
        public Builder useCsvNoSupValue(@Nullable Boolean useCsvNoSupValue) {
            this.useCsvNoSupValue = useCsvNoSupValue;
            return this;
        }        public EndpointS3Settings build() {
            return new EndpointS3Settings(addColumnName, bucketFolder, bucketName, cannedAclForObjects, cdcInsertsAndUpdates, cdcInsertsOnly, cdcMaxBatchInterval, cdcMinFileSize, cdcPath, compressionType, csvDelimiter, csvNoSupValue, csvNullValue, csvRowDelimiter, dataFormat, dataPageSize, datePartitionDelimiter, datePartitionEnabled, datePartitionSequence, dictPageSizeLimit, enableStatistics, encodingType, encryptionMode, externalTableDefinition, ignoreHeadersRow, includeOpForFullLoad, maxFileSize, parquetTimestampInMillisecond, parquetVersion, preserveTransactions, rfc4180, rowGroupLength, serverSideEncryptionKmsKeyId, serviceAccessRoleArn, timestampColumnName, useCsvNoSupValue);
        }
    }
}
