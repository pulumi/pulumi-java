// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.inputs;

import com.pulumi.aws.glue.inputs.GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryption;
import com.pulumi.aws.glue.inputs.GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRest;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;


public final class GetDataCatalogEncryptionSettingsDataCatalogEncryptionSetting extends com.pulumi.resources.InvokeArgs {

    public static final GetDataCatalogEncryptionSettingsDataCatalogEncryptionSetting Empty = new GetDataCatalogEncryptionSettingsDataCatalogEncryptionSetting();

    /**
     * When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. see Connection Password Encryption.
     * 
     */
    @Import(name="connectionPasswordEncryptions", required=true)
    private List<GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryption> connectionPasswordEncryptions;

    public List<GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryption> connectionPasswordEncryptions() {
        return this.connectionPasswordEncryptions;
    }

    /**
     * Specifies the encryption-at-rest configuration for the Data Catalog. see Encryption At Rest.
     * 
     */
    @Import(name="encryptionAtRests", required=true)
    private List<GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRest> encryptionAtRests;

    public List<GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRest> encryptionAtRests() {
        return this.encryptionAtRests;
    }

    private GetDataCatalogEncryptionSettingsDataCatalogEncryptionSetting() {}

    private GetDataCatalogEncryptionSettingsDataCatalogEncryptionSetting(GetDataCatalogEncryptionSettingsDataCatalogEncryptionSetting $) {
        this.connectionPasswordEncryptions = $.connectionPasswordEncryptions;
        this.encryptionAtRests = $.encryptionAtRests;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDataCatalogEncryptionSettingsDataCatalogEncryptionSetting defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDataCatalogEncryptionSettingsDataCatalogEncryptionSetting $;

        public Builder() {
            $ = new GetDataCatalogEncryptionSettingsDataCatalogEncryptionSetting();
        }

        public Builder(GetDataCatalogEncryptionSettingsDataCatalogEncryptionSetting defaults) {
            $ = new GetDataCatalogEncryptionSettingsDataCatalogEncryptionSetting(Objects.requireNonNull(defaults));
        }

        public Builder connectionPasswordEncryptions(List<GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryption> connectionPasswordEncryptions) {
            $.connectionPasswordEncryptions = connectionPasswordEncryptions;
            return this;
        }

        public Builder connectionPasswordEncryptions(GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryption... connectionPasswordEncryptions) {
            return connectionPasswordEncryptions(List.of(connectionPasswordEncryptions));
        }

        public Builder encryptionAtRests(List<GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRest> encryptionAtRests) {
            $.encryptionAtRests = encryptionAtRests;
            return this;
        }

        public Builder encryptionAtRests(GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRest... encryptionAtRests) {
            return encryptionAtRests(List.of(encryptionAtRests));
        }

        public GetDataCatalogEncryptionSettingsDataCatalogEncryptionSetting build() {
            $.connectionPasswordEncryptions = Objects.requireNonNull($.connectionPasswordEncryptions, "expected parameter 'connectionPasswordEncryptions' to be non-null");
            $.encryptionAtRests = Objects.requireNonNull($.encryptionAtRests, "expected parameter 'encryptionAtRests' to be non-null");
            return $;
        }
    }

}
