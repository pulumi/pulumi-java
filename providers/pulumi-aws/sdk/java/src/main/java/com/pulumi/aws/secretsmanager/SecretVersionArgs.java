// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.secretsmanager;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SecretVersionArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretVersionArgs Empty = new SecretVersionArgs();

    /**
     * Specifies binary data that you want to encrypt and store in this version of the secret. This is required if secret_string is not set. Needs to be encoded to base64.
     * 
     */
    @Import(name="secretBinary")
      private final @Nullable Output<String> secretBinary;

    public Output<String> secretBinary() {
        return this.secretBinary == null ? Codegen.empty() : this.secretBinary;
    }

    /**
     * Specifies the secret to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret. The secret must already exist.
     * 
     */
    @Import(name="secretId", required=true)
      private final Output<String> secretId;

    public Output<String> secretId() {
        return this.secretId;
    }

    /**
     * Specifies text data that you want to encrypt and store in this version of the secret. This is required if secret_binary is not set.
     * 
     */
    @Import(name="secretString")
      private final @Nullable Output<String> secretString;

    public Output<String> secretString() {
        return this.secretString == null ? Codegen.empty() : this.secretString;
    }

    /**
     * Specifies a list of staging labels that are attached to this version of the secret. A staging label must be unique to a single version of the secret. If you specify a staging label that's already associated with a different version of the same secret then that staging label is automatically removed from the other version and attached to this version. If you do not specify a value, then AWS Secrets Manager automatically moves the staging label `AWSCURRENT` to this new version on creation.
     * 
     */
    @Import(name="versionStages")
      private final @Nullable Output<List<String>> versionStages;

    public Output<List<String>> versionStages() {
        return this.versionStages == null ? Codegen.empty() : this.versionStages;
    }

    public SecretVersionArgs(
        @Nullable Output<String> secretBinary,
        Output<String> secretId,
        @Nullable Output<String> secretString,
        @Nullable Output<List<String>> versionStages) {
        this.secretBinary = secretBinary;
        this.secretId = Objects.requireNonNull(secretId, "expected parameter 'secretId' to be non-null");
        this.secretString = secretString;
        this.versionStages = versionStages;
    }

    private SecretVersionArgs() {
        this.secretBinary = Codegen.empty();
        this.secretId = Codegen.empty();
        this.secretString = Codegen.empty();
        this.versionStages = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecretVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> secretBinary;
        private Output<String> secretId;
        private @Nullable Output<String> secretString;
        private @Nullable Output<List<String>> versionStages;

        public Builder() {
    	      // Empty
        }

        public Builder(SecretVersionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.secretBinary = defaults.secretBinary;
    	      this.secretId = defaults.secretId;
    	      this.secretString = defaults.secretString;
    	      this.versionStages = defaults.versionStages;
        }

        public Builder secretBinary(@Nullable Output<String> secretBinary) {
            this.secretBinary = secretBinary;
            return this;
        }
        public Builder secretBinary(@Nullable String secretBinary) {
            this.secretBinary = Codegen.ofNullable(secretBinary);
            return this;
        }
        public Builder secretId(Output<String> secretId) {
            this.secretId = Objects.requireNonNull(secretId);
            return this;
        }
        public Builder secretId(String secretId) {
            this.secretId = Output.of(Objects.requireNonNull(secretId));
            return this;
        }
        public Builder secretString(@Nullable Output<String> secretString) {
            this.secretString = secretString;
            return this;
        }
        public Builder secretString(@Nullable String secretString) {
            this.secretString = Codegen.ofNullable(secretString);
            return this;
        }
        public Builder versionStages(@Nullable Output<List<String>> versionStages) {
            this.versionStages = versionStages;
            return this;
        }
        public Builder versionStages(@Nullable List<String> versionStages) {
            this.versionStages = Codegen.ofNullable(versionStages);
            return this;
        }
        public Builder versionStages(String... versionStages) {
            return versionStages(List.of(versionStages));
        }        public SecretVersionArgs build() {
            return new SecretVersionArgs(secretBinary, secretId, secretString, versionStages);
        }
    }
}
