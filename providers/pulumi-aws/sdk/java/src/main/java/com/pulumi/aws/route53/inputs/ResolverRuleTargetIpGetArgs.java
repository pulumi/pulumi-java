// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.route53.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ResolverRuleTargetIpGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResolverRuleTargetIpGetArgs Empty = new ResolverRuleTargetIpGetArgs();

    /**
     * One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
     * 
     */
    @Import(name="ip", required=true)
      private final Output<String> ip;

    public Output<String> ip() {
        return this.ip;
    }

    /**
     * The port at `ip` that you want to forward DNS queries to. Default value is `53`
     * 
     */
    @Import(name="port")
      private final @Nullable Output<Integer> port;

    public Output<Integer> port() {
        return this.port == null ? Codegen.empty() : this.port;
    }

    public ResolverRuleTargetIpGetArgs(
        Output<String> ip,
        @Nullable Output<Integer> port) {
        this.ip = Objects.requireNonNull(ip, "expected parameter 'ip' to be non-null");
        this.port = port;
    }

    private ResolverRuleTargetIpGetArgs() {
        this.ip = Codegen.empty();
        this.port = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ResolverRuleTargetIpGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> ip;
        private @Nullable Output<Integer> port;

        public Builder() {
    	      // Empty
        }

        public Builder(ResolverRuleTargetIpGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ip = defaults.ip;
    	      this.port = defaults.port;
        }

        public Builder ip(Output<String> ip) {
            this.ip = Objects.requireNonNull(ip);
            return this;
        }
        public Builder ip(String ip) {
            this.ip = Output.of(Objects.requireNonNull(ip));
            return this;
        }
        public Builder port(@Nullable Output<Integer> port) {
            this.port = port;
            return this;
        }
        public Builder port(@Nullable Integer port) {
            this.port = Codegen.ofNullable(port);
            return this;
        }        public ResolverRuleTargetIpGetArgs build() {
            return new ResolverRuleTargetIpGetArgs(ip, port);
        }
    }
}
