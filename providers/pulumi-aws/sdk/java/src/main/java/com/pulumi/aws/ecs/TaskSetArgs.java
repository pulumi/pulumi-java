// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecs;

import com.pulumi.aws.ecs.inputs.TaskSetCapacityProviderStrategyArgs;
import com.pulumi.aws.ecs.inputs.TaskSetLoadBalancerArgs;
import com.pulumi.aws.ecs.inputs.TaskSetNetworkConfigurationArgs;
import com.pulumi.aws.ecs.inputs.TaskSetScaleArgs;
import com.pulumi.aws.ecs.inputs.TaskSetServiceRegistriesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TaskSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final TaskSetArgs Empty = new TaskSetArgs();

    /**
     * The capacity provider strategy to use for the service. Can be one or more.  Defined below.
     * 
     */
    @Import(name="capacityProviderStrategies")
    private @Nullable Output<List<TaskSetCapacityProviderStrategyArgs>> capacityProviderStrategies;

    public Optional<Output<List<TaskSetCapacityProviderStrategyArgs>>> capacityProviderStrategies() {
        return Optional.ofNullable(this.capacityProviderStrategies);
    }

    /**
     * The short name or ARN of the cluster that hosts the service to create the task set in.
     * 
     */
    @Import(name="cluster", required=true)
    private Output<String> cluster;

    public Output<String> cluster() {
        return this.cluster;
    }

    /**
     * The external ID associated with the task set.
     * 
     */
    @Import(name="externalId")
    private @Nullable Output<String> externalId;

    public Optional<Output<String>> externalId() {
        return Optional.ofNullable(this.externalId);
    }

    @Import(name="forceDelete")
    private @Nullable Output<Boolean> forceDelete;

    public Optional<Output<Boolean>> forceDelete() {
        return Optional.ofNullable(this.forceDelete);
    }

    /**
     * The launch type on which to run your service. The valid values are `EC2`, `FARGATE`, and `EXTERNAL`. Defaults to `EC2`.
     * 
     */
    @Import(name="launchType")
    private @Nullable Output<String> launchType;

    public Optional<Output<String>> launchType() {
        return Optional.ofNullable(this.launchType);
    }

    /**
     * Details on load balancers that are used with a task set. Detailed below.
     * 
     */
    @Import(name="loadBalancers")
    private @Nullable Output<List<TaskSetLoadBalancerArgs>> loadBalancers;

    public Optional<Output<List<TaskSetLoadBalancerArgs>>> loadBalancers() {
        return Optional.ofNullable(this.loadBalancers);
    }

    /**
     * The network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. Detailed below.
     * 
     */
    @Import(name="networkConfiguration")
    private @Nullable Output<TaskSetNetworkConfigurationArgs> networkConfiguration;

    public Optional<Output<TaskSetNetworkConfigurationArgs>> networkConfiguration() {
        return Optional.ofNullable(this.networkConfiguration);
    }

    /**
     * The platform version on which to run your service. Only applicable for `launch_type` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
     * 
     */
    @Import(name="platformVersion")
    private @Nullable Output<String> platformVersion;

    public Optional<Output<String>> platformVersion() {
        return Optional.ofNullable(this.platformVersion);
    }

    /**
     * A floating-point percentage of the desired number of tasks to place and keep running in the task set. Detailed below.
     * 
     */
    @Import(name="scale")
    private @Nullable Output<TaskSetScaleArgs> scale;

    public Optional<Output<TaskSetScaleArgs>> scale() {
        return Optional.ofNullable(this.scale);
    }

    /**
     * The short name or ARN of the ECS service.
     * 
     */
    @Import(name="service", required=true)
    private Output<String> service;

    public Output<String> service() {
        return this.service;
    }

    /**
     * The service discovery registries for the service. The maximum number of `service_registries` blocks is `1`. Detailed below.
     * 
     */
    @Import(name="serviceRegistries")
    private @Nullable Output<TaskSetServiceRegistriesArgs> serviceRegistries;

    public Optional<Output<TaskSetServiceRegistriesArgs>> serviceRegistries() {
        return Optional.ofNullable(this.serviceRegistries);
    }

    /**
     * A map of tags to assign to the file system. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copy_tags_to_backups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * The family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service.
     * 
     */
    @Import(name="taskDefinition", required=true)
    private Output<String> taskDefinition;

    public Output<String> taskDefinition() {
        return this.taskDefinition;
    }

    @Import(name="waitUntilStable")
    private @Nullable Output<Boolean> waitUntilStable;

    public Optional<Output<Boolean>> waitUntilStable() {
        return Optional.ofNullable(this.waitUntilStable);
    }

    /**
     * Wait timeout for task set to reach `STEADY_STATE`. Valid time units include `ns`, `us` (or `Âµs`), `ms`, `s`, `m`, and `h`. Default `10m`.
     * 
     */
    @Import(name="waitUntilStableTimeout")
    private @Nullable Output<String> waitUntilStableTimeout;

    public Optional<Output<String>> waitUntilStableTimeout() {
        return Optional.ofNullable(this.waitUntilStableTimeout);
    }

    private TaskSetArgs() {}

    private TaskSetArgs(TaskSetArgs $) {
        this.capacityProviderStrategies = $.capacityProviderStrategies;
        this.cluster = $.cluster;
        this.externalId = $.externalId;
        this.forceDelete = $.forceDelete;
        this.launchType = $.launchType;
        this.loadBalancers = $.loadBalancers;
        this.networkConfiguration = $.networkConfiguration;
        this.platformVersion = $.platformVersion;
        this.scale = $.scale;
        this.service = $.service;
        this.serviceRegistries = $.serviceRegistries;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.taskDefinition = $.taskDefinition;
        this.waitUntilStable = $.waitUntilStable;
        this.waitUntilStableTimeout = $.waitUntilStableTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TaskSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TaskSetArgs $;

        public Builder() {
            $ = new TaskSetArgs();
        }

        public Builder(TaskSetArgs defaults) {
            $ = new TaskSetArgs(Objects.requireNonNull(defaults));
        }

        public Builder capacityProviderStrategies(@Nullable Output<List<TaskSetCapacityProviderStrategyArgs>> capacityProviderStrategies) {
            $.capacityProviderStrategies = capacityProviderStrategies;
            return this;
        }

        public Builder capacityProviderStrategies(List<TaskSetCapacityProviderStrategyArgs> capacityProviderStrategies) {
            return capacityProviderStrategies(Output.of(capacityProviderStrategies));
        }

        public Builder capacityProviderStrategies(TaskSetCapacityProviderStrategyArgs... capacityProviderStrategies) {
            return capacityProviderStrategies(List.of(capacityProviderStrategies));
        }

        public Builder cluster(Output<String> cluster) {
            $.cluster = cluster;
            return this;
        }

        public Builder cluster(String cluster) {
            return cluster(Output.of(cluster));
        }

        public Builder externalId(@Nullable Output<String> externalId) {
            $.externalId = externalId;
            return this;
        }

        public Builder externalId(String externalId) {
            return externalId(Output.of(externalId));
        }

        public Builder forceDelete(@Nullable Output<Boolean> forceDelete) {
            $.forceDelete = forceDelete;
            return this;
        }

        public Builder forceDelete(Boolean forceDelete) {
            return forceDelete(Output.of(forceDelete));
        }

        public Builder launchType(@Nullable Output<String> launchType) {
            $.launchType = launchType;
            return this;
        }

        public Builder launchType(String launchType) {
            return launchType(Output.of(launchType));
        }

        public Builder loadBalancers(@Nullable Output<List<TaskSetLoadBalancerArgs>> loadBalancers) {
            $.loadBalancers = loadBalancers;
            return this;
        }

        public Builder loadBalancers(List<TaskSetLoadBalancerArgs> loadBalancers) {
            return loadBalancers(Output.of(loadBalancers));
        }

        public Builder loadBalancers(TaskSetLoadBalancerArgs... loadBalancers) {
            return loadBalancers(List.of(loadBalancers));
        }

        public Builder networkConfiguration(@Nullable Output<TaskSetNetworkConfigurationArgs> networkConfiguration) {
            $.networkConfiguration = networkConfiguration;
            return this;
        }

        public Builder networkConfiguration(TaskSetNetworkConfigurationArgs networkConfiguration) {
            return networkConfiguration(Output.of(networkConfiguration));
        }

        public Builder platformVersion(@Nullable Output<String> platformVersion) {
            $.platformVersion = platformVersion;
            return this;
        }

        public Builder platformVersion(String platformVersion) {
            return platformVersion(Output.of(platformVersion));
        }

        public Builder scale(@Nullable Output<TaskSetScaleArgs> scale) {
            $.scale = scale;
            return this;
        }

        public Builder scale(TaskSetScaleArgs scale) {
            return scale(Output.of(scale));
        }

        public Builder service(Output<String> service) {
            $.service = service;
            return this;
        }

        public Builder service(String service) {
            return service(Output.of(service));
        }

        public Builder serviceRegistries(@Nullable Output<TaskSetServiceRegistriesArgs> serviceRegistries) {
            $.serviceRegistries = serviceRegistries;
            return this;
        }

        public Builder serviceRegistries(TaskSetServiceRegistriesArgs serviceRegistries) {
            return serviceRegistries(Output.of(serviceRegistries));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder taskDefinition(Output<String> taskDefinition) {
            $.taskDefinition = taskDefinition;
            return this;
        }

        public Builder taskDefinition(String taskDefinition) {
            return taskDefinition(Output.of(taskDefinition));
        }

        public Builder waitUntilStable(@Nullable Output<Boolean> waitUntilStable) {
            $.waitUntilStable = waitUntilStable;
            return this;
        }

        public Builder waitUntilStable(Boolean waitUntilStable) {
            return waitUntilStable(Output.of(waitUntilStable));
        }

        public Builder waitUntilStableTimeout(@Nullable Output<String> waitUntilStableTimeout) {
            $.waitUntilStableTimeout = waitUntilStableTimeout;
            return this;
        }

        public Builder waitUntilStableTimeout(String waitUntilStableTimeout) {
            return waitUntilStableTimeout(Output.of(waitUntilStableTimeout));
        }

        public TaskSetArgs build() {
            $.cluster = Objects.requireNonNull($.cluster, "expected parameter 'cluster' to be non-null");
            $.service = Objects.requireNonNull($.service, "expected parameter 'service' to be non-null");
            $.taskDefinition = Objects.requireNonNull($.taskDefinition, "expected parameter 'taskDefinition' to be non-null");
            return $;
        }
    }

}
