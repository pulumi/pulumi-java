// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appmesh.inputs;

import com.pulumi.aws.appmesh.inputs.RouteSpecHttp2RouteActionGetArgs;
import com.pulumi.aws.appmesh.inputs.RouteSpecHttp2RouteMatchGetArgs;
import com.pulumi.aws.appmesh.inputs.RouteSpecHttp2RouteRetryPolicyGetArgs;
import com.pulumi.aws.appmesh.inputs.RouteSpecHttp2RouteTimeoutGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouteSpecHttp2RouteGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouteSpecHttp2RouteGetArgs Empty = new RouteSpecHttp2RouteGetArgs();

    /**
     * The action to take if a match is determined.
     * 
     */
    @Import(name="action", required=true)
    private Output<RouteSpecHttp2RouteActionGetArgs> action;

    public Output<RouteSpecHttp2RouteActionGetArgs> action() {
        return this.action;
    }

    /**
     * The criteria for determining an gRPC request match.
     * 
     */
    @Import(name="match", required=true)
    private Output<RouteSpecHttp2RouteMatchGetArgs> match;

    public Output<RouteSpecHttp2RouteMatchGetArgs> match() {
        return this.match;
    }

    /**
     * The retry policy.
     * 
     */
    @Import(name="retryPolicy")
    private @Nullable Output<RouteSpecHttp2RouteRetryPolicyGetArgs> retryPolicy;

    public Optional<Output<RouteSpecHttp2RouteRetryPolicyGetArgs>> retryPolicy() {
        return Optional.ofNullable(this.retryPolicy);
    }

    /**
     * The types of timeouts.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<RouteSpecHttp2RouteTimeoutGetArgs> timeout;

    public Optional<Output<RouteSpecHttp2RouteTimeoutGetArgs>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    private RouteSpecHttp2RouteGetArgs() {}

    private RouteSpecHttp2RouteGetArgs(RouteSpecHttp2RouteGetArgs $) {
        this.action = $.action;
        this.match = $.match;
        this.retryPolicy = $.retryPolicy;
        this.timeout = $.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteSpecHttp2RouteGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteSpecHttp2RouteGetArgs $;

        public Builder() {
            $ = new RouteSpecHttp2RouteGetArgs();
        }

        public Builder(RouteSpecHttp2RouteGetArgs defaults) {
            $ = new RouteSpecHttp2RouteGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder action(Output<RouteSpecHttp2RouteActionGetArgs> action) {
            $.action = action;
            return this;
        }

        public Builder action(RouteSpecHttp2RouteActionGetArgs action) {
            return action(Output.of(action));
        }

        public Builder match(Output<RouteSpecHttp2RouteMatchGetArgs> match) {
            $.match = match;
            return this;
        }

        public Builder match(RouteSpecHttp2RouteMatchGetArgs match) {
            return match(Output.of(match));
        }

        public Builder retryPolicy(@Nullable Output<RouteSpecHttp2RouteRetryPolicyGetArgs> retryPolicy) {
            $.retryPolicy = retryPolicy;
            return this;
        }

        public Builder retryPolicy(RouteSpecHttp2RouteRetryPolicyGetArgs retryPolicy) {
            return retryPolicy(Output.of(retryPolicy));
        }

        public Builder timeout(@Nullable Output<RouteSpecHttp2RouteTimeoutGetArgs> timeout) {
            $.timeout = timeout;
            return this;
        }

        public Builder timeout(RouteSpecHttp2RouteTimeoutGetArgs timeout) {
            return timeout(Output.of(timeout));
        }

        public RouteSpecHttp2RouteGetArgs build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.match = Objects.requireNonNull($.match, "expected parameter 'match' to be non-null");
            return $;
        }
    }

}
