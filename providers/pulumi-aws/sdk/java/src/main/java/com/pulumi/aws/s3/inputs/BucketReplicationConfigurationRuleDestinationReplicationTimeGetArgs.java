// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketReplicationConfigurationRuleDestinationReplicationTimeGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketReplicationConfigurationRuleDestinationReplicationTimeGetArgs Empty = new BucketReplicationConfigurationRuleDestinationReplicationTimeGetArgs();

    /**
     * Threshold within which objects are to be replicated. The only valid value is `15`.
     * 
     */
    @Import(name="minutes")
    private @Nullable Output<Integer> minutes;

    /**
     * @return Threshold within which objects are to be replicated. The only valid value is `15`.
     * 
     */
    public Optional<Output<Integer>> minutes() {
        return Optional.ofNullable(this.minutes);
    }

    /**
     * The status of RTC. Either `Enabled` or `Disabled`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of RTC. Either `Enabled` or `Disabled`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private BucketReplicationConfigurationRuleDestinationReplicationTimeGetArgs() {}

    private BucketReplicationConfigurationRuleDestinationReplicationTimeGetArgs(BucketReplicationConfigurationRuleDestinationReplicationTimeGetArgs $) {
        this.minutes = $.minutes;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketReplicationConfigurationRuleDestinationReplicationTimeGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketReplicationConfigurationRuleDestinationReplicationTimeGetArgs $;

        public Builder() {
            $ = new BucketReplicationConfigurationRuleDestinationReplicationTimeGetArgs();
        }

        public Builder(BucketReplicationConfigurationRuleDestinationReplicationTimeGetArgs defaults) {
            $ = new BucketReplicationConfigurationRuleDestinationReplicationTimeGetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param minutes Threshold within which objects are to be replicated. The only valid value is `15`.
         * 
         * @return builder
         * 
         */
        public Builder minutes(@Nullable Output<Integer> minutes) {
            $.minutes = minutes;
            return this;
        }

        /**
         * @param minutes Threshold within which objects are to be replicated. The only valid value is `15`.
         * 
         * @return builder
         * 
         */
        public Builder minutes(Integer minutes) {
            return minutes(Output.of(minutes));
        }

        /**
         * @param status The status of RTC. Either `Enabled` or `Disabled`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of RTC. Either `Enabled` or `Disabled`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public BucketReplicationConfigurationRuleDestinationReplicationTimeGetArgs build() {
            return $;
        }
    }

}
