// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class CrawlerS3TargetArgs extends com.pulumi.resources.ResourceArgs {

    public static final CrawlerS3TargetArgs Empty = new CrawlerS3TargetArgs();

    /**
     * The name of the connection to use to connect to the Delta table target.
     * 
     */
    @Import(name="connectionName")
      private final @Nullable Output<String> connectionName;

    public Output<String> connectionName() {
        return this.connectionName == null ? Codegen.empty() : this.connectionName;
    }

    /**
     * The ARN of the dead-letter SQS queue.
     * 
     */
    @Import(name="dlqEventQueueArn")
      private final @Nullable Output<String> dlqEventQueueArn;

    public Output<String> dlqEventQueueArn() {
        return this.dlqEventQueueArn == null ? Codegen.empty() : this.dlqEventQueueArn;
    }

    /**
     * The ARN of the SQS queue to receive S3 notifications from.
     * 
     */
    @Import(name="eventQueueArn")
      private final @Nullable Output<String> eventQueueArn;

    public Output<String> eventQueueArn() {
        return this.eventQueueArn == null ? Codegen.empty() : this.eventQueueArn;
    }

    /**
     * A list of glob patterns used to exclude from the crawl.
     * 
     */
    @Import(name="exclusions")
      private final @Nullable Output<List<String>> exclusions;

    public Output<List<String>> exclusions() {
        return this.exclusions == null ? Codegen.empty() : this.exclusions;
    }

    /**
     * The path of the Amazon DocumentDB or MongoDB target (database/collection).
     * 
     */
    @Import(name="path", required=true)
      private final Output<String> path;

    public Output<String> path() {
        return this.path;
    }

    /**
     * Sets the number of files in each leaf folder to be crawled when crawling sample files in a dataset. If not set, all the files are crawled. A valid value is an integer between 1 and 249.
     * 
     */
    @Import(name="sampleSize")
      private final @Nullable Output<Integer> sampleSize;

    public Output<Integer> sampleSize() {
        return this.sampleSize == null ? Codegen.empty() : this.sampleSize;
    }

    public CrawlerS3TargetArgs(
        @Nullable Output<String> connectionName,
        @Nullable Output<String> dlqEventQueueArn,
        @Nullable Output<String> eventQueueArn,
        @Nullable Output<List<String>> exclusions,
        Output<String> path,
        @Nullable Output<Integer> sampleSize) {
        this.connectionName = connectionName;
        this.dlqEventQueueArn = dlqEventQueueArn;
        this.eventQueueArn = eventQueueArn;
        this.exclusions = exclusions;
        this.path = Objects.requireNonNull(path, "expected parameter 'path' to be non-null");
        this.sampleSize = sampleSize;
    }

    private CrawlerS3TargetArgs() {
        this.connectionName = Codegen.empty();
        this.dlqEventQueueArn = Codegen.empty();
        this.eventQueueArn = Codegen.empty();
        this.exclusions = Codegen.empty();
        this.path = Codegen.empty();
        this.sampleSize = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CrawlerS3TargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> connectionName;
        private @Nullable Output<String> dlqEventQueueArn;
        private @Nullable Output<String> eventQueueArn;
        private @Nullable Output<List<String>> exclusions;
        private Output<String> path;
        private @Nullable Output<Integer> sampleSize;

        public Builder() {
    	      // Empty
        }

        public Builder(CrawlerS3TargetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionName = defaults.connectionName;
    	      this.dlqEventQueueArn = defaults.dlqEventQueueArn;
    	      this.eventQueueArn = defaults.eventQueueArn;
    	      this.exclusions = defaults.exclusions;
    	      this.path = defaults.path;
    	      this.sampleSize = defaults.sampleSize;
        }

        public Builder connectionName(@Nullable Output<String> connectionName) {
            this.connectionName = connectionName;
            return this;
        }
        public Builder connectionName(@Nullable String connectionName) {
            this.connectionName = Codegen.ofNullable(connectionName);
            return this;
        }
        public Builder dlqEventQueueArn(@Nullable Output<String> dlqEventQueueArn) {
            this.dlqEventQueueArn = dlqEventQueueArn;
            return this;
        }
        public Builder dlqEventQueueArn(@Nullable String dlqEventQueueArn) {
            this.dlqEventQueueArn = Codegen.ofNullable(dlqEventQueueArn);
            return this;
        }
        public Builder eventQueueArn(@Nullable Output<String> eventQueueArn) {
            this.eventQueueArn = eventQueueArn;
            return this;
        }
        public Builder eventQueueArn(@Nullable String eventQueueArn) {
            this.eventQueueArn = Codegen.ofNullable(eventQueueArn);
            return this;
        }
        public Builder exclusions(@Nullable Output<List<String>> exclusions) {
            this.exclusions = exclusions;
            return this;
        }
        public Builder exclusions(@Nullable List<String> exclusions) {
            this.exclusions = Codegen.ofNullable(exclusions);
            return this;
        }
        public Builder exclusions(String... exclusions) {
            return exclusions(List.of(exclusions));
        }
        public Builder path(Output<String> path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        public Builder path(String path) {
            this.path = Output.of(Objects.requireNonNull(path));
            return this;
        }
        public Builder sampleSize(@Nullable Output<Integer> sampleSize) {
            this.sampleSize = sampleSize;
            return this;
        }
        public Builder sampleSize(@Nullable Integer sampleSize) {
            this.sampleSize = Codegen.ofNullable(sampleSize);
            return this;
        }        public CrawlerS3TargetArgs build() {
            return new CrawlerS3TargetArgs(connectionName, dlqEventQueueArn, eventQueueArn, exclusions, path, sampleSize);
        }
    }
}
