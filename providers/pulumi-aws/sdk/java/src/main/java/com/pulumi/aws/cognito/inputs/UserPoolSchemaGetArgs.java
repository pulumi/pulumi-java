// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cognito.inputs;

import com.pulumi.aws.cognito.inputs.UserPoolSchemaNumberAttributeConstraintsGetArgs;
import com.pulumi.aws.cognito.inputs.UserPoolSchemaStringAttributeConstraintsGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserPoolSchemaGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserPoolSchemaGetArgs Empty = new UserPoolSchemaGetArgs();

    /**
     * Attribute data type. Must be one of `Boolean`, `Number`, `String`, `DateTime`.
     * 
     */
    @Import(name="attributeDataType", required=true)
    private Output<String> attributeDataType;

    public Output<String> attributeDataType() {
        return this.attributeDataType;
    }

    /**
     * Whether the attribute type is developer only.
     * 
     */
    @Import(name="developerOnlyAttribute")
    private @Nullable Output<Boolean> developerOnlyAttribute;

    public Optional<Output<Boolean>> developerOnlyAttribute() {
        return Optional.ofNullable(this.developerOnlyAttribute);
    }

    /**
     * Whether the attribute can be changed once it has been created.
     * 
     */
    @Import(name="mutable")
    private @Nullable Output<Boolean> mutable;

    public Optional<Output<Boolean>> mutable() {
        return Optional.ofNullable(this.mutable);
    }

    /**
     * Name of the attribute.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * Configuration block for the constraints for an attribute of the number type. Detailed below.
     * 
     */
    @Import(name="numberAttributeConstraints")
    private @Nullable Output<UserPoolSchemaNumberAttributeConstraintsGetArgs> numberAttributeConstraints;

    public Optional<Output<UserPoolSchemaNumberAttributeConstraintsGetArgs>> numberAttributeConstraints() {
        return Optional.ofNullable(this.numberAttributeConstraints);
    }

    /**
     * Whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.
     * 
     */
    @Import(name="required")
    private @Nullable Output<Boolean> required;

    public Optional<Output<Boolean>> required() {
        return Optional.ofNullable(this.required);
    }

    /**
     * Constraints for an attribute of the string type. Detailed below.
     * 
     */
    @Import(name="stringAttributeConstraints")
    private @Nullable Output<UserPoolSchemaStringAttributeConstraintsGetArgs> stringAttributeConstraints;

    public Optional<Output<UserPoolSchemaStringAttributeConstraintsGetArgs>> stringAttributeConstraints() {
        return Optional.ofNullable(this.stringAttributeConstraints);
    }

    private UserPoolSchemaGetArgs() {}

    private UserPoolSchemaGetArgs(UserPoolSchemaGetArgs $) {
        this.attributeDataType = $.attributeDataType;
        this.developerOnlyAttribute = $.developerOnlyAttribute;
        this.mutable = $.mutable;
        this.name = $.name;
        this.numberAttributeConstraints = $.numberAttributeConstraints;
        this.required = $.required;
        this.stringAttributeConstraints = $.stringAttributeConstraints;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserPoolSchemaGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserPoolSchemaGetArgs $;

        public Builder() {
            $ = new UserPoolSchemaGetArgs();
        }

        public Builder(UserPoolSchemaGetArgs defaults) {
            $ = new UserPoolSchemaGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder attributeDataType(Output<String> attributeDataType) {
            $.attributeDataType = attributeDataType;
            return this;
        }

        public Builder attributeDataType(String attributeDataType) {
            return attributeDataType(Output.of(attributeDataType));
        }

        public Builder developerOnlyAttribute(@Nullable Output<Boolean> developerOnlyAttribute) {
            $.developerOnlyAttribute = developerOnlyAttribute;
            return this;
        }

        public Builder developerOnlyAttribute(Boolean developerOnlyAttribute) {
            return developerOnlyAttribute(Output.of(developerOnlyAttribute));
        }

        public Builder mutable(@Nullable Output<Boolean> mutable) {
            $.mutable = mutable;
            return this;
        }

        public Builder mutable(Boolean mutable) {
            return mutable(Output.of(mutable));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder numberAttributeConstraints(@Nullable Output<UserPoolSchemaNumberAttributeConstraintsGetArgs> numberAttributeConstraints) {
            $.numberAttributeConstraints = numberAttributeConstraints;
            return this;
        }

        public Builder numberAttributeConstraints(UserPoolSchemaNumberAttributeConstraintsGetArgs numberAttributeConstraints) {
            return numberAttributeConstraints(Output.of(numberAttributeConstraints));
        }

        public Builder required(@Nullable Output<Boolean> required) {
            $.required = required;
            return this;
        }

        public Builder required(Boolean required) {
            return required(Output.of(required));
        }

        public Builder stringAttributeConstraints(@Nullable Output<UserPoolSchemaStringAttributeConstraintsGetArgs> stringAttributeConstraints) {
            $.stringAttributeConstraints = stringAttributeConstraints;
            return this;
        }

        public Builder stringAttributeConstraints(UserPoolSchemaStringAttributeConstraintsGetArgs stringAttributeConstraints) {
            return stringAttributeConstraints(Output.of(stringAttributeConstraints));
        }

        public UserPoolSchemaGetArgs build() {
            $.attributeDataType = Objects.requireNonNull($.attributeDataType, "expected parameter 'attributeDataType' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
