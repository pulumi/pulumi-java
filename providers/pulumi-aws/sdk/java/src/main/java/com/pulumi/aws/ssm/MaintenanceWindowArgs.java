// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ssm;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MaintenanceWindowArgs extends com.pulumi.resources.ResourceArgs {

    public static final MaintenanceWindowArgs Empty = new MaintenanceWindowArgs();

    /**
     * Whether targets must be registered with the Maintenance Window before tasks can be defined for those targets.
     * 
     */
    @Import(name="allowUnassociatedTargets")
      private final @Nullable Output<Boolean> allowUnassociatedTargets;

    public Output<Boolean> allowUnassociatedTargets() {
        return this.allowUnassociatedTargets == null ? Codegen.empty() : this.allowUnassociatedTargets;
    }

    /**
     * The number of hours before the end of the Maintenance Window that Systems Manager stops scheduling new tasks for execution.
     * 
     */
    @Import(name="cutoff", required=true)
      private final Output<Integer> cutoff;

    public Output<Integer> cutoff() {
        return this.cutoff;
    }

    /**
     * A description for the maintenance window.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The duration of the Maintenance Window in hours.
     * 
     */
    @Import(name="duration", required=true)
      private final Output<Integer> duration;

    public Output<Integer> duration() {
        return this.duration;
    }

    /**
     * Whether the maintenance window is enabled. Default: `true`.
     * 
     */
    @Import(name="enabled")
      private final @Nullable Output<Boolean> enabled;

    public Output<Boolean> enabled() {
        return this.enabled == null ? Codegen.empty() : this.enabled;
    }

    /**
     * Timestamp in [ISO-8601 extended format](https://www.iso.org/iso-8601-date-and-time-format.html) when to no longer run the maintenance window.
     * 
     */
    @Import(name="endDate")
      private final @Nullable Output<String> endDate;

    public Output<String> endDate() {
        return this.endDate == null ? Codegen.empty() : this.endDate;
    }

    /**
     * The name of the maintenance window.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The schedule of the Maintenance Window in the form of a [cron](https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-maintenance-cron.html) or rate expression.
     * 
     */
    @Import(name="schedule", required=true)
      private final Output<String> schedule;

    public Output<String> schedule() {
        return this.schedule;
    }

    /**
     * The number of days to wait after the date and time specified by a CRON expression before running the maintenance window.
     * 
     */
    @Import(name="scheduleOffset")
      private final @Nullable Output<Integer> scheduleOffset;

    public Output<Integer> scheduleOffset() {
        return this.scheduleOffset == null ? Codegen.empty() : this.scheduleOffset;
    }

    /**
     * Timezone for schedule in [Internet Assigned Numbers Authority (IANA) Time Zone Database format](https://www.iana.org/time-zones). For example: `America/Los_Angeles`, `etc/UTC`, or `Asia/Seoul`.
     * 
     */
    @Import(name="scheduleTimezone")
      private final @Nullable Output<String> scheduleTimezone;

    public Output<String> scheduleTimezone() {
        return this.scheduleTimezone == null ? Codegen.empty() : this.scheduleTimezone;
    }

    /**
     * Timestamp in [ISO-8601 extended format](https://www.iso.org/iso-8601-date-and-time-format.html) when to begin the maintenance window.
     * 
     */
    @Import(name="startDate")
      private final @Nullable Output<String> startDate;

    public Output<String> startDate() {
        return this.startDate == null ? Codegen.empty() : this.startDate;
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public MaintenanceWindowArgs(
        @Nullable Output<Boolean> allowUnassociatedTargets,
        Output<Integer> cutoff,
        @Nullable Output<String> description,
        Output<Integer> duration,
        @Nullable Output<Boolean> enabled,
        @Nullable Output<String> endDate,
        @Nullable Output<String> name,
        Output<String> schedule,
        @Nullable Output<Integer> scheduleOffset,
        @Nullable Output<String> scheduleTimezone,
        @Nullable Output<String> startDate,
        @Nullable Output<Map<String,String>> tags) {
        this.allowUnassociatedTargets = allowUnassociatedTargets;
        this.cutoff = Objects.requireNonNull(cutoff, "expected parameter 'cutoff' to be non-null");
        this.description = description;
        this.duration = Objects.requireNonNull(duration, "expected parameter 'duration' to be non-null");
        this.enabled = enabled;
        this.endDate = endDate;
        this.name = name;
        this.schedule = Objects.requireNonNull(schedule, "expected parameter 'schedule' to be non-null");
        this.scheduleOffset = scheduleOffset;
        this.scheduleTimezone = scheduleTimezone;
        this.startDate = startDate;
        this.tags = tags;
    }

    private MaintenanceWindowArgs() {
        this.allowUnassociatedTargets = Codegen.empty();
        this.cutoff = Codegen.empty();
        this.description = Codegen.empty();
        this.duration = Codegen.empty();
        this.enabled = Codegen.empty();
        this.endDate = Codegen.empty();
        this.name = Codegen.empty();
        this.schedule = Codegen.empty();
        this.scheduleOffset = Codegen.empty();
        this.scheduleTimezone = Codegen.empty();
        this.startDate = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MaintenanceWindowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> allowUnassociatedTargets;
        private Output<Integer> cutoff;
        private @Nullable Output<String> description;
        private Output<Integer> duration;
        private @Nullable Output<Boolean> enabled;
        private @Nullable Output<String> endDate;
        private @Nullable Output<String> name;
        private Output<String> schedule;
        private @Nullable Output<Integer> scheduleOffset;
        private @Nullable Output<String> scheduleTimezone;
        private @Nullable Output<String> startDate;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(MaintenanceWindowArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowUnassociatedTargets = defaults.allowUnassociatedTargets;
    	      this.cutoff = defaults.cutoff;
    	      this.description = defaults.description;
    	      this.duration = defaults.duration;
    	      this.enabled = defaults.enabled;
    	      this.endDate = defaults.endDate;
    	      this.name = defaults.name;
    	      this.schedule = defaults.schedule;
    	      this.scheduleOffset = defaults.scheduleOffset;
    	      this.scheduleTimezone = defaults.scheduleTimezone;
    	      this.startDate = defaults.startDate;
    	      this.tags = defaults.tags;
        }

        public Builder allowUnassociatedTargets(@Nullable Output<Boolean> allowUnassociatedTargets) {
            this.allowUnassociatedTargets = allowUnassociatedTargets;
            return this;
        }
        public Builder allowUnassociatedTargets(@Nullable Boolean allowUnassociatedTargets) {
            this.allowUnassociatedTargets = Codegen.ofNullable(allowUnassociatedTargets);
            return this;
        }
        public Builder cutoff(Output<Integer> cutoff) {
            this.cutoff = Objects.requireNonNull(cutoff);
            return this;
        }
        public Builder cutoff(Integer cutoff) {
            this.cutoff = Output.of(Objects.requireNonNull(cutoff));
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder duration(Output<Integer> duration) {
            this.duration = Objects.requireNonNull(duration);
            return this;
        }
        public Builder duration(Integer duration) {
            this.duration = Output.of(Objects.requireNonNull(duration));
            return this;
        }
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = Codegen.ofNullable(enabled);
            return this;
        }
        public Builder endDate(@Nullable Output<String> endDate) {
            this.endDate = endDate;
            return this;
        }
        public Builder endDate(@Nullable String endDate) {
            this.endDate = Codegen.ofNullable(endDate);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder schedule(Output<String> schedule) {
            this.schedule = Objects.requireNonNull(schedule);
            return this;
        }
        public Builder schedule(String schedule) {
            this.schedule = Output.of(Objects.requireNonNull(schedule));
            return this;
        }
        public Builder scheduleOffset(@Nullable Output<Integer> scheduleOffset) {
            this.scheduleOffset = scheduleOffset;
            return this;
        }
        public Builder scheduleOffset(@Nullable Integer scheduleOffset) {
            this.scheduleOffset = Codegen.ofNullable(scheduleOffset);
            return this;
        }
        public Builder scheduleTimezone(@Nullable Output<String> scheduleTimezone) {
            this.scheduleTimezone = scheduleTimezone;
            return this;
        }
        public Builder scheduleTimezone(@Nullable String scheduleTimezone) {
            this.scheduleTimezone = Codegen.ofNullable(scheduleTimezone);
            return this;
        }
        public Builder startDate(@Nullable Output<String> startDate) {
            this.startDate = startDate;
            return this;
        }
        public Builder startDate(@Nullable String startDate) {
            this.startDate = Codegen.ofNullable(startDate);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public MaintenanceWindowArgs build() {
            return new MaintenanceWindowArgs(allowUnassociatedTargets, cutoff, description, duration, enabled, endDate, name, schedule, scheduleOffset, scheduleTimezone, startDate, tags);
        }
    }
}
