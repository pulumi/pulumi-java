// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.glue.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ClassifierCsvClassifier {
    /**
     * @return Enables the processing of files that contain only one column.
     * 
     */
    private final @Nullable Boolean allowSingleColumn;
    /**
     * @return Indicates whether the CSV file contains a header. This can be one of &#34;ABSENT&#34;, &#34;PRESENT&#34;, or &#34;UNKNOWN&#34;.
     * 
     */
    private final @Nullable String containsHeader;
    /**
     * @return The delimiter used in the Csv to separate columns.
     * 
     */
    private final @Nullable String delimiter;
    /**
     * @return Specifies whether to trim column values.
     * 
     */
    private final @Nullable Boolean disableValueTrimming;
    /**
     * @return A list of strings representing column names.
     * 
     */
    private final @Nullable List<String> headers;
    /**
     * @return A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
     * 
     */
    private final @Nullable String quoteSymbol;

    @CustomType.Constructor
    private ClassifierCsvClassifier(
        @CustomType.Parameter("allowSingleColumn") @Nullable Boolean allowSingleColumn,
        @CustomType.Parameter("containsHeader") @Nullable String containsHeader,
        @CustomType.Parameter("delimiter") @Nullable String delimiter,
        @CustomType.Parameter("disableValueTrimming") @Nullable Boolean disableValueTrimming,
        @CustomType.Parameter("headers") @Nullable List<String> headers,
        @CustomType.Parameter("quoteSymbol") @Nullable String quoteSymbol) {
        this.allowSingleColumn = allowSingleColumn;
        this.containsHeader = containsHeader;
        this.delimiter = delimiter;
        this.disableValueTrimming = disableValueTrimming;
        this.headers = headers;
        this.quoteSymbol = quoteSymbol;
    }

    /**
     * @return Enables the processing of files that contain only one column.
     * 
     */
    public Optional<Boolean> allowSingleColumn() {
        return Optional.ofNullable(this.allowSingleColumn);
    }
    /**
     * @return Indicates whether the CSV file contains a header. This can be one of &#34;ABSENT&#34;, &#34;PRESENT&#34;, or &#34;UNKNOWN&#34;.
     * 
     */
    public Optional<String> containsHeader() {
        return Optional.ofNullable(this.containsHeader);
    }
    /**
     * @return The delimiter used in the Csv to separate columns.
     * 
     */
    public Optional<String> delimiter() {
        return Optional.ofNullable(this.delimiter);
    }
    /**
     * @return Specifies whether to trim column values.
     * 
     */
    public Optional<Boolean> disableValueTrimming() {
        return Optional.ofNullable(this.disableValueTrimming);
    }
    /**
     * @return A list of strings representing column names.
     * 
     */
    public List<String> headers() {
        return this.headers == null ? List.of() : this.headers;
    }
    /**
     * @return A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
     * 
     */
    public Optional<String> quoteSymbol() {
        return Optional.ofNullable(this.quoteSymbol);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClassifierCsvClassifier defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean allowSingleColumn;
        private @Nullable String containsHeader;
        private @Nullable String delimiter;
        private @Nullable Boolean disableValueTrimming;
        private @Nullable List<String> headers;
        private @Nullable String quoteSymbol;

        public Builder() {
    	      // Empty
        }

        public Builder(ClassifierCsvClassifier defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowSingleColumn = defaults.allowSingleColumn;
    	      this.containsHeader = defaults.containsHeader;
    	      this.delimiter = defaults.delimiter;
    	      this.disableValueTrimming = defaults.disableValueTrimming;
    	      this.headers = defaults.headers;
    	      this.quoteSymbol = defaults.quoteSymbol;
        }

        public Builder allowSingleColumn(@Nullable Boolean allowSingleColumn) {
            this.allowSingleColumn = allowSingleColumn;
            return this;
        }
        public Builder containsHeader(@Nullable String containsHeader) {
            this.containsHeader = containsHeader;
            return this;
        }
        public Builder delimiter(@Nullable String delimiter) {
            this.delimiter = delimiter;
            return this;
        }
        public Builder disableValueTrimming(@Nullable Boolean disableValueTrimming) {
            this.disableValueTrimming = disableValueTrimming;
            return this;
        }
        public Builder headers(@Nullable List<String> headers) {
            this.headers = headers;
            return this;
        }
        public Builder headers(String... headers) {
            return headers(List.of(headers));
        }
        public Builder quoteSymbol(@Nullable String quoteSymbol) {
            this.quoteSymbol = quoteSymbol;
            return this;
        }        public ClassifierCsvClassifier build() {
            return new ClassifierCsvClassifier(allowSingleColumn, containsHeader, delimiter, disableValueTrimming, headers, quoteSymbol);
        }
    }
}
