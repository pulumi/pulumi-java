// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudfront.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DistributionViewerCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final DistributionViewerCertificateArgs Empty = new DistributionViewerCertificateArgs();

    /**
     * The ARN of the [AWS Certificate Manager](https://aws.amazon.com/certificate-manager/)
     * certificate that you wish to use with this distribution. Specify this,
     * `cloudfront_default_certificate`, or `iam_certificate_id`.  The ACM
     * certificate must be in  US-EAST-1.
     * 
     */
    @Import(name="acmCertificateArn")
      private final @Nullable Output<String> acmCertificateArn;

    public Output<String> acmCertificateArn() {
        return this.acmCertificateArn == null ? Codegen.empty() : this.acmCertificateArn;
    }

    /**
     * `true` if you want viewers to use HTTPS
     * to request your objects and you're using the CloudFront domain name for your
     * distribution. Specify this, `acm_certificate_arn`, or `iam_certificate_id`.
     * 
     */
    @Import(name="cloudfrontDefaultCertificate")
      private final @Nullable Output<Boolean> cloudfrontDefaultCertificate;

    public Output<Boolean> cloudfrontDefaultCertificate() {
        return this.cloudfrontDefaultCertificate == null ? Codegen.empty() : this.cloudfrontDefaultCertificate;
    }

    /**
     * The IAM certificate identifier of the custom viewer
     * certificate for this distribution if you are using a custom domain. Specify
     * this, `acm_certificate_arn`, or `cloudfront_default_certificate`.
     * 
     */
    @Import(name="iamCertificateId")
      private final @Nullable Output<String> iamCertificateId;

    public Output<String> iamCertificateId() {
        return this.iamCertificateId == null ? Codegen.empty() : this.iamCertificateId;
    }

    /**
     * The minimum version of the SSL protocol that
     * you want CloudFront to use for HTTPS connections. Can only be set if
     * `cloudfront_default_certificate = false`. See all possible values in
     * [this](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/secure-connections-supported-viewer-protocols-ciphers.html)
     * table under "Security policy." Some examples include: `TLSv1.2_2019` and
     * `TLSv1.2_2021`. Default: `TLSv1`. **NOTE**:
     * If you are using a custom certificate (specified with `acm_certificate_arn`
     * or `iam_certificate_id`), and have specified `sni-only` in
     * `ssl_support_method`, `TLSv1` or later must be specified. If you have
     * specified `vip` in `ssl_support_method`, only `SSLv3` or `TLSv1` can be
     * specified. If you have specified `cloudfront_default_certificate`, `TLSv1`
     * must be specified.
     * 
     */
    @Import(name="minimumProtocolVersion")
      private final @Nullable Output<String> minimumProtocolVersion;

    public Output<String> minimumProtocolVersion() {
        return this.minimumProtocolVersion == null ? Codegen.empty() : this.minimumProtocolVersion;
    }

    @Import(name="sslSupportMethod")
      private final @Nullable Output<String> sslSupportMethod;

    public Output<String> sslSupportMethod() {
        return this.sslSupportMethod == null ? Codegen.empty() : this.sslSupportMethod;
    }

    public DistributionViewerCertificateArgs(
        @Nullable Output<String> acmCertificateArn,
        @Nullable Output<Boolean> cloudfrontDefaultCertificate,
        @Nullable Output<String> iamCertificateId,
        @Nullable Output<String> minimumProtocolVersion,
        @Nullable Output<String> sslSupportMethod) {
        this.acmCertificateArn = acmCertificateArn;
        this.cloudfrontDefaultCertificate = cloudfrontDefaultCertificate;
        this.iamCertificateId = iamCertificateId;
        this.minimumProtocolVersion = minimumProtocolVersion;
        this.sslSupportMethod = sslSupportMethod;
    }

    private DistributionViewerCertificateArgs() {
        this.acmCertificateArn = Codegen.empty();
        this.cloudfrontDefaultCertificate = Codegen.empty();
        this.iamCertificateId = Codegen.empty();
        this.minimumProtocolVersion = Codegen.empty();
        this.sslSupportMethod = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DistributionViewerCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> acmCertificateArn;
        private @Nullable Output<Boolean> cloudfrontDefaultCertificate;
        private @Nullable Output<String> iamCertificateId;
        private @Nullable Output<String> minimumProtocolVersion;
        private @Nullable Output<String> sslSupportMethod;

        public Builder() {
    	      // Empty
        }

        public Builder(DistributionViewerCertificateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acmCertificateArn = defaults.acmCertificateArn;
    	      this.cloudfrontDefaultCertificate = defaults.cloudfrontDefaultCertificate;
    	      this.iamCertificateId = defaults.iamCertificateId;
    	      this.minimumProtocolVersion = defaults.minimumProtocolVersion;
    	      this.sslSupportMethod = defaults.sslSupportMethod;
        }

        public Builder acmCertificateArn(@Nullable Output<String> acmCertificateArn) {
            this.acmCertificateArn = acmCertificateArn;
            return this;
        }
        public Builder acmCertificateArn(@Nullable String acmCertificateArn) {
            this.acmCertificateArn = Codegen.ofNullable(acmCertificateArn);
            return this;
        }
        public Builder cloudfrontDefaultCertificate(@Nullable Output<Boolean> cloudfrontDefaultCertificate) {
            this.cloudfrontDefaultCertificate = cloudfrontDefaultCertificate;
            return this;
        }
        public Builder cloudfrontDefaultCertificate(@Nullable Boolean cloudfrontDefaultCertificate) {
            this.cloudfrontDefaultCertificate = Codegen.ofNullable(cloudfrontDefaultCertificate);
            return this;
        }
        public Builder iamCertificateId(@Nullable Output<String> iamCertificateId) {
            this.iamCertificateId = iamCertificateId;
            return this;
        }
        public Builder iamCertificateId(@Nullable String iamCertificateId) {
            this.iamCertificateId = Codegen.ofNullable(iamCertificateId);
            return this;
        }
        public Builder minimumProtocolVersion(@Nullable Output<String> minimumProtocolVersion) {
            this.minimumProtocolVersion = minimumProtocolVersion;
            return this;
        }
        public Builder minimumProtocolVersion(@Nullable String minimumProtocolVersion) {
            this.minimumProtocolVersion = Codegen.ofNullable(minimumProtocolVersion);
            return this;
        }
        public Builder sslSupportMethod(@Nullable Output<String> sslSupportMethod) {
            this.sslSupportMethod = sslSupportMethod;
            return this;
        }
        public Builder sslSupportMethod(@Nullable String sslSupportMethod) {
            this.sslSupportMethod = Codegen.ofNullable(sslSupportMethod);
            return this;
        }        public DistributionViewerCertificateArgs build() {
            return new DistributionViewerCertificateArgs(acmCertificateArn, cloudfrontDefaultCertificate, iamCertificateId, minimumProtocolVersion, sslSupportMethod);
        }
    }
}
