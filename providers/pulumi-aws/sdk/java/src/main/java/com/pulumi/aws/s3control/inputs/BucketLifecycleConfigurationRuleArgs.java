// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3control.inputs;

import com.pulumi.aws.s3control.inputs.BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs;
import com.pulumi.aws.s3control.inputs.BucketLifecycleConfigurationRuleExpirationArgs;
import com.pulumi.aws.s3control.inputs.BucketLifecycleConfigurationRuleFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BucketLifecycleConfigurationRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketLifecycleConfigurationRuleArgs Empty = new BucketLifecycleConfigurationRuleArgs();

    /**
     * Configuration block containing settings for abort incomplete multipart upload.
     * 
     */
    @Import(name="abortIncompleteMultipartUpload")
      private final @Nullable Output<BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs> abortIncompleteMultipartUpload;

    public Output<BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs> abortIncompleteMultipartUpload() {
        return this.abortIncompleteMultipartUpload == null ? Codegen.empty() : this.abortIncompleteMultipartUpload;
    }

    /**
     * Configuration block containing settings for expiration of objects.
     * 
     */
    @Import(name="expiration")
      private final @Nullable Output<BucketLifecycleConfigurationRuleExpirationArgs> expiration;

    public Output<BucketLifecycleConfigurationRuleExpirationArgs> expiration() {
        return this.expiration == null ? Codegen.empty() : this.expiration;
    }

    /**
     * Configuration block containing settings for filtering.
     * 
     */
    @Import(name="filter")
      private final @Nullable Output<BucketLifecycleConfigurationRuleFilterArgs> filter;

    public Output<BucketLifecycleConfigurationRuleFilterArgs> filter() {
        return this.filter == null ? Codegen.empty() : this.filter;
    }

    /**
     * Unique identifier for the rule.
     * 
     */
    @Import(name="id", required=true)
      private final Output<String> id;

    public Output<String> id() {
        return this.id;
    }

    /**
     * Status of the rule. Valid values: `Enabled` and `Disabled`. Defaults to `Enabled`.
     * 
     */
    @Import(name="status")
      private final @Nullable Output<String> status;

    public Output<String> status() {
        return this.status == null ? Codegen.empty() : this.status;
    }

    public BucketLifecycleConfigurationRuleArgs(
        @Nullable Output<BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs> abortIncompleteMultipartUpload,
        @Nullable Output<BucketLifecycleConfigurationRuleExpirationArgs> expiration,
        @Nullable Output<BucketLifecycleConfigurationRuleFilterArgs> filter,
        Output<String> id,
        @Nullable Output<String> status) {
        this.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload;
        this.expiration = expiration;
        this.filter = filter;
        this.id = Objects.requireNonNull(id, "expected parameter 'id' to be non-null");
        this.status = status;
    }

    private BucketLifecycleConfigurationRuleArgs() {
        this.abortIncompleteMultipartUpload = Codegen.empty();
        this.expiration = Codegen.empty();
        this.filter = Codegen.empty();
        this.id = Codegen.empty();
        this.status = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketLifecycleConfigurationRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs> abortIncompleteMultipartUpload;
        private @Nullable Output<BucketLifecycleConfigurationRuleExpirationArgs> expiration;
        private @Nullable Output<BucketLifecycleConfigurationRuleFilterArgs> filter;
        private Output<String> id;
        private @Nullable Output<String> status;

        public Builder() {
    	      // Empty
        }

        public Builder(BucketLifecycleConfigurationRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.abortIncompleteMultipartUpload = defaults.abortIncompleteMultipartUpload;
    	      this.expiration = defaults.expiration;
    	      this.filter = defaults.filter;
    	      this.id = defaults.id;
    	      this.status = defaults.status;
        }

        public Builder abortIncompleteMultipartUpload(@Nullable Output<BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs> abortIncompleteMultipartUpload) {
            this.abortIncompleteMultipartUpload = abortIncompleteMultipartUpload;
            return this;
        }
        public Builder abortIncompleteMultipartUpload(@Nullable BucketLifecycleConfigurationRuleAbortIncompleteMultipartUploadArgs abortIncompleteMultipartUpload) {
            this.abortIncompleteMultipartUpload = Codegen.ofNullable(abortIncompleteMultipartUpload);
            return this;
        }
        public Builder expiration(@Nullable Output<BucketLifecycleConfigurationRuleExpirationArgs> expiration) {
            this.expiration = expiration;
            return this;
        }
        public Builder expiration(@Nullable BucketLifecycleConfigurationRuleExpirationArgs expiration) {
            this.expiration = Codegen.ofNullable(expiration);
            return this;
        }
        public Builder filter(@Nullable Output<BucketLifecycleConfigurationRuleFilterArgs> filter) {
            this.filter = filter;
            return this;
        }
        public Builder filter(@Nullable BucketLifecycleConfigurationRuleFilterArgs filter) {
            this.filter = Codegen.ofNullable(filter);
            return this;
        }
        public Builder id(Output<String> id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder id(String id) {
            this.id = Output.of(Objects.requireNonNull(id));
            return this;
        }
        public Builder status(@Nullable Output<String> status) {
            this.status = status;
            return this;
        }
        public Builder status(@Nullable String status) {
            this.status = Codegen.ofNullable(status);
            return this;
        }        public BucketLifecycleConfigurationRuleArgs build() {
            return new BucketLifecycleConfigurationRuleArgs(abortIncompleteMultipartUpload, expiration, filter, id, status);
        }
    }
}
