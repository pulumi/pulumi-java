// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.imagebuilder.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetImagePipelineSchedule extends com.pulumi.resources.InvokeArgs {

    public static final GetImagePipelineSchedule Empty = new GetImagePipelineSchedule();

    /**
     * Condition when the pipeline should trigger a new image build.
     * 
     */
    @Import(name="pipelineExecutionStartCondition", required=true)
    private String pipelineExecutionStartCondition;

    /**
     * @return Condition when the pipeline should trigger a new image build.
     * 
     */
    public String pipelineExecutionStartCondition() {
        return this.pipelineExecutionStartCondition;
    }

    /**
     * Cron expression of how often the pipeline start condition is evaluated.
     * 
     */
    @Import(name="scheduleExpression", required=true)
    private String scheduleExpression;

    /**
     * @return Cron expression of how often the pipeline start condition is evaluated.
     * 
     */
    public String scheduleExpression() {
        return this.scheduleExpression;
    }

    private GetImagePipelineSchedule() {}

    private GetImagePipelineSchedule(GetImagePipelineSchedule $) {
        this.pipelineExecutionStartCondition = $.pipelineExecutionStartCondition;
        this.scheduleExpression = $.scheduleExpression;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagePipelineSchedule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagePipelineSchedule $;

        public Builder() {
            $ = new GetImagePipelineSchedule();
        }

        public Builder(GetImagePipelineSchedule defaults) {
            $ = new GetImagePipelineSchedule(Objects.requireNonNull(defaults));
        }

        /**
         * @param pipelineExecutionStartCondition Condition when the pipeline should trigger a new image build.
         * 
         * @return builder
         * 
         */
        public Builder pipelineExecutionStartCondition(String pipelineExecutionStartCondition) {
            $.pipelineExecutionStartCondition = pipelineExecutionStartCondition;
            return this;
        }

        /**
         * @param scheduleExpression Cron expression of how often the pipeline start condition is evaluated.
         * 
         * @return builder
         * 
         */
        public Builder scheduleExpression(String scheduleExpression) {
            $.scheduleExpression = scheduleExpression;
            return this;
        }

        public GetImagePipelineSchedule build() {
            $.pipelineExecutionStartCondition = Objects.requireNonNull($.pipelineExecutionStartCondition, "expected parameter 'pipelineExecutionStartCondition' to be non-null");
            $.scheduleExpression = Objects.requireNonNull($.scheduleExpression, "expected parameter 'scheduleExpression' to be non-null");
            return $;
        }
    }

}
