// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.inputs;

import com.pulumi.aws.ec2.inputs.GetSubnetFilter;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSubnetArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSubnetArgs Empty = new GetSubnetArgs();

    /**
     * Availability zone where the subnet must reside.
     * 
     */
    @Import(name="availabilityZone")
      private final @Nullable String availabilityZone;

    public Optional<String> availabilityZone() {
        return this.availabilityZone == null ? Optional.empty() : Optional.ofNullable(this.availabilityZone);
    }

    /**
     * ID of the Availability Zone for the subnet. This argument is not supported in all regions or partitions. If necessary, use `availability_zone` instead.
     * 
     */
    @Import(name="availabilityZoneId")
      private final @Nullable String availabilityZoneId;

    public Optional<String> availabilityZoneId() {
        return this.availabilityZoneId == null ? Optional.empty() : Optional.ofNullable(this.availabilityZoneId);
    }

    /**
     * CIDR block of the desired subnet.
     * 
     */
    @Import(name="cidrBlock")
      private final @Nullable String cidrBlock;

    public Optional<String> cidrBlock() {
        return this.cidrBlock == null ? Optional.empty() : Optional.ofNullable(this.cidrBlock);
    }

    /**
     * Whether the desired subnet must be the default subnet for its associated availability zone.
     * 
     */
    @Import(name="defaultForAz")
      private final @Nullable Boolean defaultForAz;

    public Optional<Boolean> defaultForAz() {
        return this.defaultForAz == null ? Optional.empty() : Optional.ofNullable(this.defaultForAz);
    }

    /**
     * Configuration block. Detailed below.
     * 
     */
    @Import(name="filters")
      private final @Nullable List<GetSubnetFilter> filters;

    public List<GetSubnetFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }

    /**
     * ID of the specific subnet to retrieve.
     * 
     */
    @Import(name="id")
      private final @Nullable String id;

    public Optional<String> id() {
        return this.id == null ? Optional.empty() : Optional.ofNullable(this.id);
    }

    /**
     * IPv6 CIDR block of the desired subnet.
     * 
     */
    @Import(name="ipv6CidrBlock")
      private final @Nullable String ipv6CidrBlock;

    public Optional<String> ipv6CidrBlock() {
        return this.ipv6CidrBlock == null ? Optional.empty() : Optional.ofNullable(this.ipv6CidrBlock);
    }

    /**
     * State that the desired subnet must have.
     * 
     */
    @Import(name="state")
      private final @Nullable String state;

    public Optional<String> state() {
        return this.state == null ? Optional.empty() : Optional.ofNullable(this.state);
    }

    /**
     * Map of tags, each pair of which must exactly match a pair on the desired subnet.
     * 
     */
    @Import(name="tags")
      private final @Nullable Map<String,String> tags;

    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }

    /**
     * ID of the VPC that the desired subnet belongs to.
     * 
     */
    @Import(name="vpcId")
      private final @Nullable String vpcId;

    public Optional<String> vpcId() {
        return this.vpcId == null ? Optional.empty() : Optional.ofNullable(this.vpcId);
    }

    public GetSubnetArgs(
        @Nullable String availabilityZone,
        @Nullable String availabilityZoneId,
        @Nullable String cidrBlock,
        @Nullable Boolean defaultForAz,
        @Nullable List<GetSubnetFilter> filters,
        @Nullable String id,
        @Nullable String ipv6CidrBlock,
        @Nullable String state,
        @Nullable Map<String,String> tags,
        @Nullable String vpcId) {
        this.availabilityZone = availabilityZone;
        this.availabilityZoneId = availabilityZoneId;
        this.cidrBlock = cidrBlock;
        this.defaultForAz = defaultForAz;
        this.filters = filters;
        this.id = id;
        this.ipv6CidrBlock = ipv6CidrBlock;
        this.state = state;
        this.tags = tags;
        this.vpcId = vpcId;
    }

    private GetSubnetArgs() {
        this.availabilityZone = null;
        this.availabilityZoneId = null;
        this.cidrBlock = null;
        this.defaultForAz = null;
        this.filters = List.of();
        this.id = null;
        this.ipv6CidrBlock = null;
        this.state = null;
        this.tags = Map.of();
        this.vpcId = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubnetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String availabilityZone;
        private @Nullable String availabilityZoneId;
        private @Nullable String cidrBlock;
        private @Nullable Boolean defaultForAz;
        private @Nullable List<GetSubnetFilter> filters;
        private @Nullable String id;
        private @Nullable String ipv6CidrBlock;
        private @Nullable String state;
        private @Nullable Map<String,String> tags;
        private @Nullable String vpcId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetSubnetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityZone = defaults.availabilityZone;
    	      this.availabilityZoneId = defaults.availabilityZoneId;
    	      this.cidrBlock = defaults.cidrBlock;
    	      this.defaultForAz = defaults.defaultForAz;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.ipv6CidrBlock = defaults.ipv6CidrBlock;
    	      this.state = defaults.state;
    	      this.tags = defaults.tags;
    	      this.vpcId = defaults.vpcId;
        }

        public Builder availabilityZone(@Nullable String availabilityZone) {
            this.availabilityZone = availabilityZone;
            return this;
        }
        public Builder availabilityZoneId(@Nullable String availabilityZoneId) {
            this.availabilityZoneId = availabilityZoneId;
            return this;
        }
        public Builder cidrBlock(@Nullable String cidrBlock) {
            this.cidrBlock = cidrBlock;
            return this;
        }
        public Builder defaultForAz(@Nullable Boolean defaultForAz) {
            this.defaultForAz = defaultForAz;
            return this;
        }
        public Builder filters(@Nullable List<GetSubnetFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetSubnetFilter... filters) {
            return filters(List.of(filters));
        }
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        public Builder ipv6CidrBlock(@Nullable String ipv6CidrBlock) {
            this.ipv6CidrBlock = ipv6CidrBlock;
            return this;
        }
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder vpcId(@Nullable String vpcId) {
            this.vpcId = vpcId;
            return this;
        }        public GetSubnetArgs build() {
            return new GetSubnetArgs(availabilityZone, availabilityZoneId, cidrBlock, defaultForAz, filters, id, ipv6CidrBlock, state, tags, vpcId);
        }
    }
}
