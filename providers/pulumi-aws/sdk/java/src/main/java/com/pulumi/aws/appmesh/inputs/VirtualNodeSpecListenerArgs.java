// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appmesh.inputs;

import com.pulumi.aws.appmesh.inputs.VirtualNodeSpecListenerConnectionPoolArgs;
import com.pulumi.aws.appmesh.inputs.VirtualNodeSpecListenerHealthCheckArgs;
import com.pulumi.aws.appmesh.inputs.VirtualNodeSpecListenerOutlierDetectionArgs;
import com.pulumi.aws.appmesh.inputs.VirtualNodeSpecListenerPortMappingArgs;
import com.pulumi.aws.appmesh.inputs.VirtualNodeSpecListenerTimeoutArgs;
import com.pulumi.aws.appmesh.inputs.VirtualNodeSpecListenerTlsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VirtualNodeSpecListenerArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualNodeSpecListenerArgs Empty = new VirtualNodeSpecListenerArgs();

    /**
     * The connection pool information for the listener.
     * 
     */
    @Import(name="connectionPool")
      private final @Nullable Output<VirtualNodeSpecListenerConnectionPoolArgs> connectionPool;

    public Output<VirtualNodeSpecListenerConnectionPoolArgs> connectionPool() {
        return this.connectionPool == null ? Codegen.empty() : this.connectionPool;
    }

    /**
     * The health check information for the listener.
     * 
     */
    @Import(name="healthCheck")
      private final @Nullable Output<VirtualNodeSpecListenerHealthCheckArgs> healthCheck;

    public Output<VirtualNodeSpecListenerHealthCheckArgs> healthCheck() {
        return this.healthCheck == null ? Codegen.empty() : this.healthCheck;
    }

    /**
     * The outlier detection information for the listener.
     * 
     */
    @Import(name="outlierDetection")
      private final @Nullable Output<VirtualNodeSpecListenerOutlierDetectionArgs> outlierDetection;

    public Output<VirtualNodeSpecListenerOutlierDetectionArgs> outlierDetection() {
        return this.outlierDetection == null ? Codegen.empty() : this.outlierDetection;
    }

    /**
     * The port mapping information for the listener.
     * 
     */
    @Import(name="portMapping", required=true)
      private final Output<VirtualNodeSpecListenerPortMappingArgs> portMapping;

    public Output<VirtualNodeSpecListenerPortMappingArgs> portMapping() {
        return this.portMapping;
    }

    /**
     * Timeouts for different protocols.
     * 
     */
    @Import(name="timeout")
      private final @Nullable Output<VirtualNodeSpecListenerTimeoutArgs> timeout;

    public Output<VirtualNodeSpecListenerTimeoutArgs> timeout() {
        return this.timeout == null ? Codegen.empty() : this.timeout;
    }

    /**
     * The Transport Layer Security (TLS) properties for the listener
     * 
     */
    @Import(name="tls")
      private final @Nullable Output<VirtualNodeSpecListenerTlsArgs> tls;

    public Output<VirtualNodeSpecListenerTlsArgs> tls() {
        return this.tls == null ? Codegen.empty() : this.tls;
    }

    public VirtualNodeSpecListenerArgs(
        @Nullable Output<VirtualNodeSpecListenerConnectionPoolArgs> connectionPool,
        @Nullable Output<VirtualNodeSpecListenerHealthCheckArgs> healthCheck,
        @Nullable Output<VirtualNodeSpecListenerOutlierDetectionArgs> outlierDetection,
        Output<VirtualNodeSpecListenerPortMappingArgs> portMapping,
        @Nullable Output<VirtualNodeSpecListenerTimeoutArgs> timeout,
        @Nullable Output<VirtualNodeSpecListenerTlsArgs> tls) {
        this.connectionPool = connectionPool;
        this.healthCheck = healthCheck;
        this.outlierDetection = outlierDetection;
        this.portMapping = Objects.requireNonNull(portMapping, "expected parameter 'portMapping' to be non-null");
        this.timeout = timeout;
        this.tls = tls;
    }

    private VirtualNodeSpecListenerArgs() {
        this.connectionPool = Codegen.empty();
        this.healthCheck = Codegen.empty();
        this.outlierDetection = Codegen.empty();
        this.portMapping = Codegen.empty();
        this.timeout = Codegen.empty();
        this.tls = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualNodeSpecListenerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<VirtualNodeSpecListenerConnectionPoolArgs> connectionPool;
        private @Nullable Output<VirtualNodeSpecListenerHealthCheckArgs> healthCheck;
        private @Nullable Output<VirtualNodeSpecListenerOutlierDetectionArgs> outlierDetection;
        private Output<VirtualNodeSpecListenerPortMappingArgs> portMapping;
        private @Nullable Output<VirtualNodeSpecListenerTimeoutArgs> timeout;
        private @Nullable Output<VirtualNodeSpecListenerTlsArgs> tls;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualNodeSpecListenerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionPool = defaults.connectionPool;
    	      this.healthCheck = defaults.healthCheck;
    	      this.outlierDetection = defaults.outlierDetection;
    	      this.portMapping = defaults.portMapping;
    	      this.timeout = defaults.timeout;
    	      this.tls = defaults.tls;
        }

        public Builder connectionPool(@Nullable Output<VirtualNodeSpecListenerConnectionPoolArgs> connectionPool) {
            this.connectionPool = connectionPool;
            return this;
        }
        public Builder connectionPool(@Nullable VirtualNodeSpecListenerConnectionPoolArgs connectionPool) {
            this.connectionPool = Codegen.ofNullable(connectionPool);
            return this;
        }
        public Builder healthCheck(@Nullable Output<VirtualNodeSpecListenerHealthCheckArgs> healthCheck) {
            this.healthCheck = healthCheck;
            return this;
        }
        public Builder healthCheck(@Nullable VirtualNodeSpecListenerHealthCheckArgs healthCheck) {
            this.healthCheck = Codegen.ofNullable(healthCheck);
            return this;
        }
        public Builder outlierDetection(@Nullable Output<VirtualNodeSpecListenerOutlierDetectionArgs> outlierDetection) {
            this.outlierDetection = outlierDetection;
            return this;
        }
        public Builder outlierDetection(@Nullable VirtualNodeSpecListenerOutlierDetectionArgs outlierDetection) {
            this.outlierDetection = Codegen.ofNullable(outlierDetection);
            return this;
        }
        public Builder portMapping(Output<VirtualNodeSpecListenerPortMappingArgs> portMapping) {
            this.portMapping = Objects.requireNonNull(portMapping);
            return this;
        }
        public Builder portMapping(VirtualNodeSpecListenerPortMappingArgs portMapping) {
            this.portMapping = Output.of(Objects.requireNonNull(portMapping));
            return this;
        }
        public Builder timeout(@Nullable Output<VirtualNodeSpecListenerTimeoutArgs> timeout) {
            this.timeout = timeout;
            return this;
        }
        public Builder timeout(@Nullable VirtualNodeSpecListenerTimeoutArgs timeout) {
            this.timeout = Codegen.ofNullable(timeout);
            return this;
        }
        public Builder tls(@Nullable Output<VirtualNodeSpecListenerTlsArgs> tls) {
            this.tls = tls;
            return this;
        }
        public Builder tls(@Nullable VirtualNodeSpecListenerTlsArgs tls) {
            this.tls = Codegen.ofNullable(tls);
            return this;
        }        public VirtualNodeSpecListenerArgs build() {
            return new VirtualNodeSpecListenerArgs(connectionPool, healthCheck, outlierDetection, portMapping, timeout, tls);
        }
    }
}
