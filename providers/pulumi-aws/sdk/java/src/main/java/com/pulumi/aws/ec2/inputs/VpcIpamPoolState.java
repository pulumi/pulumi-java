// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpcIpamPoolState extends com.pulumi.resources.ResourceArgs {

    public static final VpcIpamPoolState Empty = new VpcIpamPoolState();

    /**
     * The IP protocol assigned to this pool. You must choose either IPv4 or IPv6 protocol for a pool.
     * 
     */
    @Import(name="addressFamily")
    private @Nullable Output<String> addressFamily;

    public Optional<Output<String>> addressFamily() {
        return Optional.ofNullable(this.addressFamily);
    }

    /**
     * A default netmask length for allocations added to this pool. If, for example, the CIDR assigned to this pool is 10.0.0.0/8 and you enter 16 here, new allocations will default to 10.0.0.0/16 (unless you provide a different netmask value when you create the new allocation).
     * 
     */
    @Import(name="allocationDefaultNetmaskLength")
    private @Nullable Output<Integer> allocationDefaultNetmaskLength;

    public Optional<Output<Integer>> allocationDefaultNetmaskLength() {
        return Optional.ofNullable(this.allocationDefaultNetmaskLength);
    }

    /**
     * The maximum netmask length that will be required for CIDR allocations in this pool.
     * 
     */
    @Import(name="allocationMaxNetmaskLength")
    private @Nullable Output<Integer> allocationMaxNetmaskLength;

    public Optional<Output<Integer>> allocationMaxNetmaskLength() {
        return Optional.ofNullable(this.allocationMaxNetmaskLength);
    }

    /**
     * The minimum netmask length that will be required for CIDR allocations in this pool.
     * 
     */
    @Import(name="allocationMinNetmaskLength")
    private @Nullable Output<Integer> allocationMinNetmaskLength;

    public Optional<Output<Integer>> allocationMinNetmaskLength() {
        return Optional.ofNullable(this.allocationMinNetmaskLength);
    }

    /**
     * Tags that are required for resources that use CIDRs from this IPAM pool. Resources that do not have these tags will not be allowed to allocate space from the pool. If the resources have their tags changed after they have allocated space or if the allocation tagging requirements are changed on the pool, the resource may be marked as noncompliant.
     * 
     */
    @Import(name="allocationResourceTags")
    private @Nullable Output<Map<String,String>> allocationResourceTags;

    public Optional<Output<Map<String,String>>> allocationResourceTags() {
        return Optional.ofNullable(this.allocationResourceTags);
    }

    /**
     * Amazon Resource Name (ARN) of IPAM
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * If you include this argument, IPAM automatically imports any VPCs you have in your scope that fall
     * within the CIDR range in the pool.
     * 
     */
    @Import(name="autoImport")
    private @Nullable Output<Boolean> autoImport;

    public Optional<Output<Boolean>> autoImport() {
        return Optional.ofNullable(this.autoImport);
    }

    /**
     * Limits which AWS service the pool can be used in. Only useable on public scopes. Valid Values: `ec2`.
     * 
     */
    @Import(name="awsService")
    private @Nullable Output<String> awsService;

    public Optional<Output<String>> awsService() {
        return Optional.ofNullable(this.awsService);
    }

    /**
     * A description for the IPAM pool.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The ID of the scope in which you would like to create the IPAM pool.
     * 
     */
    @Import(name="ipamScopeId")
    private @Nullable Output<String> ipamScopeId;

    public Optional<Output<String>> ipamScopeId() {
        return Optional.ofNullable(this.ipamScopeId);
    }

    @Import(name="ipamScopeType")
    private @Nullable Output<String> ipamScopeType;

    public Optional<Output<String>> ipamScopeType() {
        return Optional.ofNullable(this.ipamScopeType);
    }

    /**
     * The locale in which you would like to create the IPAM pool. Locale is the Region where you want to make an IPAM pool available for allocations. You can only create pools with locales that match the operating Regions of the IPAM. You can only create VPCs from a pool whose locale matches the VPC&#39;s Region. Possible values: Any AWS region, such as `us-east-1`.
     * 
     */
    @Import(name="locale")
    private @Nullable Output<String> locale;

    public Optional<Output<String>> locale() {
        return Optional.ofNullable(this.locale);
    }

    @Import(name="poolDepth")
    private @Nullable Output<Integer> poolDepth;

    public Optional<Output<Integer>> poolDepth() {
        return Optional.ofNullable(this.poolDepth);
    }

    /**
     * Defines whether or not IPv6 pool space is publicly advertisable over the internet. This option is not available for IPv4 pool space.
     * 
     */
    @Import(name="publiclyAdvertisable")
    private @Nullable Output<Boolean> publiclyAdvertisable;

    public Optional<Output<Boolean>> publiclyAdvertisable() {
        return Optional.ofNullable(this.publiclyAdvertisable);
    }

    /**
     * The ID of the source IPAM pool. Use this argument to create a child pool within an existing pool.
     * 
     */
    @Import(name="sourceIpamPoolId")
    private @Nullable Output<String> sourceIpamPoolId;

    public Optional<Output<String>> sourceIpamPoolId() {
        return Optional.ofNullable(this.sourceIpamPoolId);
    }

    /**
     * The ID of the IPAM
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private VpcIpamPoolState() {}

    private VpcIpamPoolState(VpcIpamPoolState $) {
        this.addressFamily = $.addressFamily;
        this.allocationDefaultNetmaskLength = $.allocationDefaultNetmaskLength;
        this.allocationMaxNetmaskLength = $.allocationMaxNetmaskLength;
        this.allocationMinNetmaskLength = $.allocationMinNetmaskLength;
        this.allocationResourceTags = $.allocationResourceTags;
        this.arn = $.arn;
        this.autoImport = $.autoImport;
        this.awsService = $.awsService;
        this.description = $.description;
        this.ipamScopeId = $.ipamScopeId;
        this.ipamScopeType = $.ipamScopeType;
        this.locale = $.locale;
        this.poolDepth = $.poolDepth;
        this.publiclyAdvertisable = $.publiclyAdvertisable;
        this.sourceIpamPoolId = $.sourceIpamPoolId;
        this.state = $.state;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpcIpamPoolState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpcIpamPoolState $;

        public Builder() {
            $ = new VpcIpamPoolState();
        }

        public Builder(VpcIpamPoolState defaults) {
            $ = new VpcIpamPoolState(Objects.requireNonNull(defaults));
        }

        public Builder addressFamily(@Nullable Output<String> addressFamily) {
            $.addressFamily = addressFamily;
            return this;
        }

        public Builder addressFamily(String addressFamily) {
            return addressFamily(Output.of(addressFamily));
        }

        public Builder allocationDefaultNetmaskLength(@Nullable Output<Integer> allocationDefaultNetmaskLength) {
            $.allocationDefaultNetmaskLength = allocationDefaultNetmaskLength;
            return this;
        }

        public Builder allocationDefaultNetmaskLength(Integer allocationDefaultNetmaskLength) {
            return allocationDefaultNetmaskLength(Output.of(allocationDefaultNetmaskLength));
        }

        public Builder allocationMaxNetmaskLength(@Nullable Output<Integer> allocationMaxNetmaskLength) {
            $.allocationMaxNetmaskLength = allocationMaxNetmaskLength;
            return this;
        }

        public Builder allocationMaxNetmaskLength(Integer allocationMaxNetmaskLength) {
            return allocationMaxNetmaskLength(Output.of(allocationMaxNetmaskLength));
        }

        public Builder allocationMinNetmaskLength(@Nullable Output<Integer> allocationMinNetmaskLength) {
            $.allocationMinNetmaskLength = allocationMinNetmaskLength;
            return this;
        }

        public Builder allocationMinNetmaskLength(Integer allocationMinNetmaskLength) {
            return allocationMinNetmaskLength(Output.of(allocationMinNetmaskLength));
        }

        public Builder allocationResourceTags(@Nullable Output<Map<String,String>> allocationResourceTags) {
            $.allocationResourceTags = allocationResourceTags;
            return this;
        }

        public Builder allocationResourceTags(Map<String,String> allocationResourceTags) {
            return allocationResourceTags(Output.of(allocationResourceTags));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder autoImport(@Nullable Output<Boolean> autoImport) {
            $.autoImport = autoImport;
            return this;
        }

        public Builder autoImport(Boolean autoImport) {
            return autoImport(Output.of(autoImport));
        }

        public Builder awsService(@Nullable Output<String> awsService) {
            $.awsService = awsService;
            return this;
        }

        public Builder awsService(String awsService) {
            return awsService(Output.of(awsService));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder ipamScopeId(@Nullable Output<String> ipamScopeId) {
            $.ipamScopeId = ipamScopeId;
            return this;
        }

        public Builder ipamScopeId(String ipamScopeId) {
            return ipamScopeId(Output.of(ipamScopeId));
        }

        public Builder ipamScopeType(@Nullable Output<String> ipamScopeType) {
            $.ipamScopeType = ipamScopeType;
            return this;
        }

        public Builder ipamScopeType(String ipamScopeType) {
            return ipamScopeType(Output.of(ipamScopeType));
        }

        public Builder locale(@Nullable Output<String> locale) {
            $.locale = locale;
            return this;
        }

        public Builder locale(String locale) {
            return locale(Output.of(locale));
        }

        public Builder poolDepth(@Nullable Output<Integer> poolDepth) {
            $.poolDepth = poolDepth;
            return this;
        }

        public Builder poolDepth(Integer poolDepth) {
            return poolDepth(Output.of(poolDepth));
        }

        public Builder publiclyAdvertisable(@Nullable Output<Boolean> publiclyAdvertisable) {
            $.publiclyAdvertisable = publiclyAdvertisable;
            return this;
        }

        public Builder publiclyAdvertisable(Boolean publiclyAdvertisable) {
            return publiclyAdvertisable(Output.of(publiclyAdvertisable));
        }

        public Builder sourceIpamPoolId(@Nullable Output<String> sourceIpamPoolId) {
            $.sourceIpamPoolId = sourceIpamPoolId;
            return this;
        }

        public Builder sourceIpamPoolId(String sourceIpamPoolId) {
            return sourceIpamPoolId(Output.of(sourceIpamPoolId));
        }

        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        public Builder state(String state) {
            return state(Output.of(state));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public VpcIpamPoolState build() {
            return $;
        }
    }

}
