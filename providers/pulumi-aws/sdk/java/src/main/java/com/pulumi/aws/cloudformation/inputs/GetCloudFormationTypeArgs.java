// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudformation.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCloudFormationTypeArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCloudFormationTypeArgs Empty = new GetCloudFormationTypeArgs();

    /**
     * Amazon Resource Name (ARN) of the CloudFormation Type. For example, `arn:aws:cloudformation:us-west-2::type/resource/AWS-EC2-VPC`.
     * 
     */
    @Import(name="arn")
    private @Nullable String arn;

    /**
     * @return Amazon Resource Name (ARN) of the CloudFormation Type. For example, `arn:aws:cloudformation:us-west-2::type/resource/AWS-EC2-VPC`.
     * 
     */
    public Optional<String> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * CloudFormation Registry Type. For example, `RESOURCE`.
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    /**
     * @return CloudFormation Registry Type. For example, `RESOURCE`.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * CloudFormation Type name. For example, `AWS::EC2::VPC`.
     * 
     */
    @Import(name="typeName")
    private @Nullable String typeName;

    /**
     * @return CloudFormation Type name. For example, `AWS::EC2::VPC`.
     * 
     */
    public Optional<String> typeName() {
        return Optional.ofNullable(this.typeName);
    }

    /**
     * Identifier of the CloudFormation Type version.
     * 
     */
    @Import(name="versionId")
    private @Nullable String versionId;

    /**
     * @return Identifier of the CloudFormation Type version.
     * 
     */
    public Optional<String> versionId() {
        return Optional.ofNullable(this.versionId);
    }

    private GetCloudFormationTypeArgs() {}

    private GetCloudFormationTypeArgs(GetCloudFormationTypeArgs $) {
        this.arn = $.arn;
        this.type = $.type;
        this.typeName = $.typeName;
        this.versionId = $.versionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCloudFormationTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCloudFormationTypeArgs $;

        public Builder() {
            $ = new GetCloudFormationTypeArgs();
        }

        public Builder(GetCloudFormationTypeArgs defaults) {
            $ = new GetCloudFormationTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn Amazon Resource Name (ARN) of the CloudFormation Type. For example, `arn:aws:cloudformation:us-west-2::type/resource/AWS-EC2-VPC`.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable String arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param type CloudFormation Registry Type. For example, `RESOURCE`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        /**
         * @param typeName CloudFormation Type name. For example, `AWS::EC2::VPC`.
         * 
         * @return builder
         * 
         */
        public Builder typeName(@Nullable String typeName) {
            $.typeName = typeName;
            return this;
        }

        /**
         * @param versionId Identifier of the CloudFormation Type version.
         * 
         * @return builder
         * 
         */
        public Builder versionId(@Nullable String versionId) {
            $.versionId = versionId;
            return this;
        }

        public GetCloudFormationTypeArgs build() {
            return $;
        }
    }

}
