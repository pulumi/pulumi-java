// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appautoscaling.inputs;

import com.pulumi.aws.appautoscaling.inputs.PolicyStepScalingPolicyConfigurationStepAdjustmentGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyStepScalingPolicyConfigurationGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyStepScalingPolicyConfigurationGetArgs Empty = new PolicyStepScalingPolicyConfigurationGetArgs();

    /**
     * Specifies whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
     * 
     */
    @Import(name="adjustmentType")
    private @Nullable Output<String> adjustmentType;

    public Optional<Output<String>> adjustmentType() {
        return Optional.ofNullable(this.adjustmentType);
    }

    /**
     * The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
     * 
     */
    @Import(name="cooldown")
    private @Nullable Output<Integer> cooldown;

    public Optional<Output<Integer>> cooldown() {
        return Optional.ofNullable(this.cooldown);
    }

    /**
     * The aggregation type for the policy&#39;s metrics. Valid values are &#34;Minimum&#34;, &#34;Maximum&#34;, and &#34;Average&#34;. Without a value, AWS will treat the aggregation type as &#34;Average&#34;.
     * 
     */
    @Import(name="metricAggregationType")
    private @Nullable Output<String> metricAggregationType;

    public Optional<Output<String>> metricAggregationType() {
        return Optional.ofNullable(this.metricAggregationType);
    }

    /**
     * The minimum number to adjust your scalable dimension as a result of a scaling activity. If the adjustment type is PercentChangeInCapacity, the scaling policy changes the scalable dimension of the scalable target by this amount.
     * 
     */
    @Import(name="minAdjustmentMagnitude")
    private @Nullable Output<Integer> minAdjustmentMagnitude;

    public Optional<Output<Integer>> minAdjustmentMagnitude() {
        return Optional.ofNullable(this.minAdjustmentMagnitude);
    }

    /**
     * A set of adjustments that manage scaling. These have the following structure:
     * 
     */
    @Import(name="stepAdjustments")
    private @Nullable Output<List<PolicyStepScalingPolicyConfigurationStepAdjustmentGetArgs>> stepAdjustments;

    public Optional<Output<List<PolicyStepScalingPolicyConfigurationStepAdjustmentGetArgs>>> stepAdjustments() {
        return Optional.ofNullable(this.stepAdjustments);
    }

    private PolicyStepScalingPolicyConfigurationGetArgs() {}

    private PolicyStepScalingPolicyConfigurationGetArgs(PolicyStepScalingPolicyConfigurationGetArgs $) {
        this.adjustmentType = $.adjustmentType;
        this.cooldown = $.cooldown;
        this.metricAggregationType = $.metricAggregationType;
        this.minAdjustmentMagnitude = $.minAdjustmentMagnitude;
        this.stepAdjustments = $.stepAdjustments;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyStepScalingPolicyConfigurationGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyStepScalingPolicyConfigurationGetArgs $;

        public Builder() {
            $ = new PolicyStepScalingPolicyConfigurationGetArgs();
        }

        public Builder(PolicyStepScalingPolicyConfigurationGetArgs defaults) {
            $ = new PolicyStepScalingPolicyConfigurationGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder adjustmentType(@Nullable Output<String> adjustmentType) {
            $.adjustmentType = adjustmentType;
            return this;
        }

        public Builder adjustmentType(String adjustmentType) {
            return adjustmentType(Output.of(adjustmentType));
        }

        public Builder cooldown(@Nullable Output<Integer> cooldown) {
            $.cooldown = cooldown;
            return this;
        }

        public Builder cooldown(Integer cooldown) {
            return cooldown(Output.of(cooldown));
        }

        public Builder metricAggregationType(@Nullable Output<String> metricAggregationType) {
            $.metricAggregationType = metricAggregationType;
            return this;
        }

        public Builder metricAggregationType(String metricAggregationType) {
            return metricAggregationType(Output.of(metricAggregationType));
        }

        public Builder minAdjustmentMagnitude(@Nullable Output<Integer> minAdjustmentMagnitude) {
            $.minAdjustmentMagnitude = minAdjustmentMagnitude;
            return this;
        }

        public Builder minAdjustmentMagnitude(Integer minAdjustmentMagnitude) {
            return minAdjustmentMagnitude(Output.of(minAdjustmentMagnitude));
        }

        public Builder stepAdjustments(@Nullable Output<List<PolicyStepScalingPolicyConfigurationStepAdjustmentGetArgs>> stepAdjustments) {
            $.stepAdjustments = stepAdjustments;
            return this;
        }

        public Builder stepAdjustments(List<PolicyStepScalingPolicyConfigurationStepAdjustmentGetArgs> stepAdjustments) {
            return stepAdjustments(Output.of(stepAdjustments));
        }

        public Builder stepAdjustments(PolicyStepScalingPolicyConfigurationStepAdjustmentGetArgs... stepAdjustments) {
            return stepAdjustments(List.of(stepAdjustments));
        }

        public PolicyStepScalingPolicyConfigurationGetArgs build() {
            return $;
        }
    }

}
