// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetRouteTableRoute extends com.pulumi.resources.InvokeArgs {

    public static final GetRouteTableRoute Empty = new GetRouteTableRoute();

    /**
     * ID of the Carrier Gateway.
     * 
     */
    @Import(name="carrierGatewayId", required=true)
    private String carrierGatewayId;

    public String carrierGatewayId() {
        return this.carrierGatewayId;
    }

    /**
     * CIDR block of the route.
     * 
     */
    @Import(name="cidrBlock", required=true)
    private String cidrBlock;

    public String cidrBlock() {
        return this.cidrBlock;
    }

    /**
     * The ID of a managed prefix list destination of the route.
     * 
     */
    @Import(name="destinationPrefixListId", required=true)
    private String destinationPrefixListId;

    public String destinationPrefixListId() {
        return this.destinationPrefixListId;
    }

    /**
     * ID of the Egress Only Internet Gateway.
     * 
     */
    @Import(name="egressOnlyGatewayId", required=true)
    private String egressOnlyGatewayId;

    public String egressOnlyGatewayId() {
        return this.egressOnlyGatewayId;
    }

    /**
     * ID of an Internet Gateway or Virtual Private Gateway which is connected to the Route Table (not exported if not passed as a parameter).
     * 
     */
    @Import(name="gatewayId", required=true)
    private String gatewayId;

    public String gatewayId() {
        return this.gatewayId;
    }

    /**
     * EC2 instance ID.
     * 
     */
    @Import(name="instanceId", required=true)
    private String instanceId;

    public String instanceId() {
        return this.instanceId;
    }

    /**
     * IPv6 CIDR block of the route.
     * 
     */
    @Import(name="ipv6CidrBlock", required=true)
    private String ipv6CidrBlock;

    public String ipv6CidrBlock() {
        return this.ipv6CidrBlock;
    }

    /**
     * Local Gateway ID.
     * 
     */
    @Import(name="localGatewayId", required=true)
    private String localGatewayId;

    public String localGatewayId() {
        return this.localGatewayId;
    }

    /**
     * NAT Gateway ID.
     * 
     */
    @Import(name="natGatewayId", required=true)
    private String natGatewayId;

    public String natGatewayId() {
        return this.natGatewayId;
    }

    /**
     * ID of the elastic network interface (eni) to use.
     * 
     */
    @Import(name="networkInterfaceId", required=true)
    private String networkInterfaceId;

    public String networkInterfaceId() {
        return this.networkInterfaceId;
    }

    /**
     * EC2 Transit Gateway ID.
     * 
     */
    @Import(name="transitGatewayId", required=true)
    private String transitGatewayId;

    public String transitGatewayId() {
        return this.transitGatewayId;
    }

    /**
     * VPC Endpoint ID.
     * 
     */
    @Import(name="vpcEndpointId", required=true)
    private String vpcEndpointId;

    public String vpcEndpointId() {
        return this.vpcEndpointId;
    }

    /**
     * VPC Peering ID.
     * 
     */
    @Import(name="vpcPeeringConnectionId", required=true)
    private String vpcPeeringConnectionId;

    public String vpcPeeringConnectionId() {
        return this.vpcPeeringConnectionId;
    }

    private GetRouteTableRoute() {}

    private GetRouteTableRoute(GetRouteTableRoute $) {
        this.carrierGatewayId = $.carrierGatewayId;
        this.cidrBlock = $.cidrBlock;
        this.destinationPrefixListId = $.destinationPrefixListId;
        this.egressOnlyGatewayId = $.egressOnlyGatewayId;
        this.gatewayId = $.gatewayId;
        this.instanceId = $.instanceId;
        this.ipv6CidrBlock = $.ipv6CidrBlock;
        this.localGatewayId = $.localGatewayId;
        this.natGatewayId = $.natGatewayId;
        this.networkInterfaceId = $.networkInterfaceId;
        this.transitGatewayId = $.transitGatewayId;
        this.vpcEndpointId = $.vpcEndpointId;
        this.vpcPeeringConnectionId = $.vpcPeeringConnectionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRouteTableRoute defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRouteTableRoute $;

        public Builder() {
            $ = new GetRouteTableRoute();
        }

        public Builder(GetRouteTableRoute defaults) {
            $ = new GetRouteTableRoute(Objects.requireNonNull(defaults));
        }

        public Builder carrierGatewayId(String carrierGatewayId) {
            $.carrierGatewayId = carrierGatewayId;
            return this;
        }

        public Builder cidrBlock(String cidrBlock) {
            $.cidrBlock = cidrBlock;
            return this;
        }

        public Builder destinationPrefixListId(String destinationPrefixListId) {
            $.destinationPrefixListId = destinationPrefixListId;
            return this;
        }

        public Builder egressOnlyGatewayId(String egressOnlyGatewayId) {
            $.egressOnlyGatewayId = egressOnlyGatewayId;
            return this;
        }

        public Builder gatewayId(String gatewayId) {
            $.gatewayId = gatewayId;
            return this;
        }

        public Builder instanceId(String instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        public Builder ipv6CidrBlock(String ipv6CidrBlock) {
            $.ipv6CidrBlock = ipv6CidrBlock;
            return this;
        }

        public Builder localGatewayId(String localGatewayId) {
            $.localGatewayId = localGatewayId;
            return this;
        }

        public Builder natGatewayId(String natGatewayId) {
            $.natGatewayId = natGatewayId;
            return this;
        }

        public Builder networkInterfaceId(String networkInterfaceId) {
            $.networkInterfaceId = networkInterfaceId;
            return this;
        }

        public Builder transitGatewayId(String transitGatewayId) {
            $.transitGatewayId = transitGatewayId;
            return this;
        }

        public Builder vpcEndpointId(String vpcEndpointId) {
            $.vpcEndpointId = vpcEndpointId;
            return this;
        }

        public Builder vpcPeeringConnectionId(String vpcPeeringConnectionId) {
            $.vpcPeeringConnectionId = vpcPeeringConnectionId;
            return this;
        }

        public GetRouteTableRoute build() {
            $.carrierGatewayId = Objects.requireNonNull($.carrierGatewayId, "expected parameter 'carrierGatewayId' to be non-null");
            $.cidrBlock = Objects.requireNonNull($.cidrBlock, "expected parameter 'cidrBlock' to be non-null");
            $.destinationPrefixListId = Objects.requireNonNull($.destinationPrefixListId, "expected parameter 'destinationPrefixListId' to be non-null");
            $.egressOnlyGatewayId = Objects.requireNonNull($.egressOnlyGatewayId, "expected parameter 'egressOnlyGatewayId' to be non-null");
            $.gatewayId = Objects.requireNonNull($.gatewayId, "expected parameter 'gatewayId' to be non-null");
            $.instanceId = Objects.requireNonNull($.instanceId, "expected parameter 'instanceId' to be non-null");
            $.ipv6CidrBlock = Objects.requireNonNull($.ipv6CidrBlock, "expected parameter 'ipv6CidrBlock' to be non-null");
            $.localGatewayId = Objects.requireNonNull($.localGatewayId, "expected parameter 'localGatewayId' to be non-null");
            $.natGatewayId = Objects.requireNonNull($.natGatewayId, "expected parameter 'natGatewayId' to be non-null");
            $.networkInterfaceId = Objects.requireNonNull($.networkInterfaceId, "expected parameter 'networkInterfaceId' to be non-null");
            $.transitGatewayId = Objects.requireNonNull($.transitGatewayId, "expected parameter 'transitGatewayId' to be non-null");
            $.vpcEndpointId = Objects.requireNonNull($.vpcEndpointId, "expected parameter 'vpcEndpointId' to be non-null");
            $.vpcPeeringConnectionId = Objects.requireNonNull($.vpcPeeringConnectionId, "expected parameter 'vpcPeeringConnectionId' to be non-null");
            return $;
        }
    }

}
