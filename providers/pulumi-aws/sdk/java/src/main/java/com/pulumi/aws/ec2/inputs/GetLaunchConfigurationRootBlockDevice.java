// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetLaunchConfigurationRootBlockDevice extends com.pulumi.resources.InvokeArgs {

    public static final GetLaunchConfigurationRootBlockDevice Empty = new GetLaunchConfigurationRootBlockDevice();

    /**
     * Whether the EBS Volume will be deleted on instance termination.
     * 
     */
    @Import(name="deleteOnTermination", required=true)
    private Boolean deleteOnTermination;

    /**
     * @return Whether the EBS Volume will be deleted on instance termination.
     * 
     */
    public Boolean deleteOnTermination() {
        return this.deleteOnTermination;
    }

    /**
     * Whether the volume is Encrypted.
     * 
     */
    @Import(name="encrypted", required=true)
    private Boolean encrypted;

    /**
     * @return Whether the volume is Encrypted.
     * 
     */
    public Boolean encrypted() {
        return this.encrypted;
    }

    /**
     * The provisioned IOPs of the volume.
     * 
     */
    @Import(name="iops", required=true)
    private Integer iops;

    /**
     * @return The provisioned IOPs of the volume.
     * 
     */
    public Integer iops() {
        return this.iops;
    }

    /**
     * The Throughput of the volume.
     * 
     */
    @Import(name="throughput", required=true)
    private Boolean throughput;

    /**
     * @return The Throughput of the volume.
     * 
     */
    public Boolean throughput() {
        return this.throughput;
    }

    /**
     * The Size of the volume.
     * 
     */
    @Import(name="volumeSize", required=true)
    private Integer volumeSize;

    /**
     * @return The Size of the volume.
     * 
     */
    public Integer volumeSize() {
        return this.volumeSize;
    }

    /**
     * The Type of the volume.
     * 
     */
    @Import(name="volumeType", required=true)
    private String volumeType;

    /**
     * @return The Type of the volume.
     * 
     */
    public String volumeType() {
        return this.volumeType;
    }

    private GetLaunchConfigurationRootBlockDevice() {}

    private GetLaunchConfigurationRootBlockDevice(GetLaunchConfigurationRootBlockDevice $) {
        this.deleteOnTermination = $.deleteOnTermination;
        this.encrypted = $.encrypted;
        this.iops = $.iops;
        this.throughput = $.throughput;
        this.volumeSize = $.volumeSize;
        this.volumeType = $.volumeType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLaunchConfigurationRootBlockDevice defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLaunchConfigurationRootBlockDevice $;

        public Builder() {
            $ = new GetLaunchConfigurationRootBlockDevice();
        }

        public Builder(GetLaunchConfigurationRootBlockDevice defaults) {
            $ = new GetLaunchConfigurationRootBlockDevice(Objects.requireNonNull(defaults));
        }

        /**
         * @param deleteOnTermination Whether the EBS Volume will be deleted on instance termination.
         * 
         * @return builder
         * 
         */
        public Builder deleteOnTermination(Boolean deleteOnTermination) {
            $.deleteOnTermination = deleteOnTermination;
            return this;
        }

        /**
         * @param encrypted Whether the volume is Encrypted.
         * 
         * @return builder
         * 
         */
        public Builder encrypted(Boolean encrypted) {
            $.encrypted = encrypted;
            return this;
        }

        /**
         * @param iops The provisioned IOPs of the volume.
         * 
         * @return builder
         * 
         */
        public Builder iops(Integer iops) {
            $.iops = iops;
            return this;
        }

        /**
         * @param throughput The Throughput of the volume.
         * 
         * @return builder
         * 
         */
        public Builder throughput(Boolean throughput) {
            $.throughput = throughput;
            return this;
        }

        /**
         * @param volumeSize The Size of the volume.
         * 
         * @return builder
         * 
         */
        public Builder volumeSize(Integer volumeSize) {
            $.volumeSize = volumeSize;
            return this;
        }

        /**
         * @param volumeType The Type of the volume.
         * 
         * @return builder
         * 
         */
        public Builder volumeType(String volumeType) {
            $.volumeType = volumeType;
            return this;
        }

        public GetLaunchConfigurationRootBlockDevice build() {
            $.deleteOnTermination = Objects.requireNonNull($.deleteOnTermination, "expected parameter 'deleteOnTermination' to be non-null");
            $.encrypted = Objects.requireNonNull($.encrypted, "expected parameter 'encrypted' to be non-null");
            $.iops = Objects.requireNonNull($.iops, "expected parameter 'iops' to be non-null");
            $.throughput = Objects.requireNonNull($.throughput, "expected parameter 'throughput' to be non-null");
            $.volumeSize = Objects.requireNonNull($.volumeSize, "expected parameter 'volumeSize' to be non-null");
            $.volumeType = Objects.requireNonNull($.volumeType, "expected parameter 'volumeType' to be non-null");
            return $;
        }
    }

}
