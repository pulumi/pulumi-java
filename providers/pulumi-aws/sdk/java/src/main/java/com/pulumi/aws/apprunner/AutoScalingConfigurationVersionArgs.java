// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.apprunner;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AutoScalingConfigurationVersionArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutoScalingConfigurationVersionArgs Empty = new AutoScalingConfigurationVersionArgs();

    /**
     * Name of the auto scaling configuration.
     * 
     */
    @Import(name="autoScalingConfigurationName", required=true)
      private final Output<String> autoScalingConfigurationName;

    public Output<String> autoScalingConfigurationName() {
        return this.autoScalingConfigurationName;
    }

    /**
     * The maximal number of concurrent requests that you want an instance to process. When the number of concurrent requests goes over this limit, App Runner scales up your service.
     * 
     */
    @Import(name="maxConcurrency")
      private final @Nullable Output<Integer> maxConcurrency;

    public Output<Integer> maxConcurrency() {
        return this.maxConcurrency == null ? Codegen.empty() : this.maxConcurrency;
    }

    /**
     * The maximal number of instances that App Runner provisions for your service.
     * 
     */
    @Import(name="maxSize")
      private final @Nullable Output<Integer> maxSize;

    public Output<Integer> maxSize() {
        return this.maxSize == null ? Codegen.empty() : this.maxSize;
    }

    /**
     * The minimal number of instances that App Runner provisions for your service.
     * 
     */
    @Import(name="minSize")
      private final @Nullable Output<Integer> minSize;

    public Output<Integer> minSize() {
        return this.minSize == null ? Codegen.empty() : this.minSize;
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public AutoScalingConfigurationVersionArgs(
        Output<String> autoScalingConfigurationName,
        @Nullable Output<Integer> maxConcurrency,
        @Nullable Output<Integer> maxSize,
        @Nullable Output<Integer> minSize,
        @Nullable Output<Map<String,String>> tags) {
        this.autoScalingConfigurationName = Objects.requireNonNull(autoScalingConfigurationName, "expected parameter 'autoScalingConfigurationName' to be non-null");
        this.maxConcurrency = maxConcurrency;
        this.maxSize = maxSize;
        this.minSize = minSize;
        this.tags = tags;
    }

    private AutoScalingConfigurationVersionArgs() {
        this.autoScalingConfigurationName = Codegen.empty();
        this.maxConcurrency = Codegen.empty();
        this.maxSize = Codegen.empty();
        this.minSize = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AutoScalingConfigurationVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> autoScalingConfigurationName;
        private @Nullable Output<Integer> maxConcurrency;
        private @Nullable Output<Integer> maxSize;
        private @Nullable Output<Integer> minSize;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(AutoScalingConfigurationVersionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoScalingConfigurationName = defaults.autoScalingConfigurationName;
    	      this.maxConcurrency = defaults.maxConcurrency;
    	      this.maxSize = defaults.maxSize;
    	      this.minSize = defaults.minSize;
    	      this.tags = defaults.tags;
        }

        public Builder autoScalingConfigurationName(Output<String> autoScalingConfigurationName) {
            this.autoScalingConfigurationName = Objects.requireNonNull(autoScalingConfigurationName);
            return this;
        }
        public Builder autoScalingConfigurationName(String autoScalingConfigurationName) {
            this.autoScalingConfigurationName = Output.of(Objects.requireNonNull(autoScalingConfigurationName));
            return this;
        }
        public Builder maxConcurrency(@Nullable Output<Integer> maxConcurrency) {
            this.maxConcurrency = maxConcurrency;
            return this;
        }
        public Builder maxConcurrency(@Nullable Integer maxConcurrency) {
            this.maxConcurrency = Codegen.ofNullable(maxConcurrency);
            return this;
        }
        public Builder maxSize(@Nullable Output<Integer> maxSize) {
            this.maxSize = maxSize;
            return this;
        }
        public Builder maxSize(@Nullable Integer maxSize) {
            this.maxSize = Codegen.ofNullable(maxSize);
            return this;
        }
        public Builder minSize(@Nullable Output<Integer> minSize) {
            this.minSize = minSize;
            return this;
        }
        public Builder minSize(@Nullable Integer minSize) {
            this.minSize = Codegen.ofNullable(minSize);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public AutoScalingConfigurationVersionArgs build() {
            return new AutoScalingConfigurationVersionArgs(autoScalingConfigurationName, maxConcurrency, maxSize, minSize, tags);
        }
    }
}
