// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudformation;

import com.pulumi.aws.cloudformation.inputs.StackSetAutoDeploymentArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StackSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final StackSetArgs Empty = new StackSetArgs();

    /**
     * Amazon Resource Number (ARN) of the IAM Role in the administrator account. This must be defined when using the `SELF_MANAGED` permission model.
     * 
     */
    @Import(name="administrationRoleArn")
    private @Nullable Output<String> administrationRoleArn;

    public Optional<Output<String>> administrationRoleArn() {
        return Optional.ofNullable(this.administrationRoleArn);
    }

    /**
     * Configuration block containing the auto-deployment model for your StackSet. This can only be defined when using the `SERVICE_MANAGED` permission model.
     * 
     */
    @Import(name="autoDeployment")
    private @Nullable Output<StackSetAutoDeploymentArgs> autoDeployment;

    public Optional<Output<StackSetAutoDeploymentArgs>> autoDeployment() {
        return Optional.ofNullable(this.autoDeployment);
    }

    /**
     * A list of capabilities. Valid values: `CAPABILITY_IAM`, `CAPABILITY_NAMED_IAM`, `CAPABILITY_AUTO_EXPAND`.
     * 
     */
    @Import(name="capabilities")
    private @Nullable Output<List<String>> capabilities;

    public Optional<Output<List<String>>> capabilities() {
        return Optional.ofNullable(this.capabilities);
    }

    /**
     * Description of the StackSet.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the IAM Role in all target accounts for StackSet operations. Defaults to `AWSCloudFormationStackSetExecutionRole` when using the `SELF_MANAGED` permission model. This should not be defined when using the `SERVICE_MANAGED` permission model.
     * 
     */
    @Import(name="executionRoleName")
    private @Nullable Output<String> executionRoleName;

    public Optional<Output<String>> executionRoleName() {
        return Optional.ofNullable(this.executionRoleName);
    }

    /**
     * Name of the StackSet. The name must be unique in the region where you create your StackSet. The name can contain only alphanumeric characters (case-sensitive) and hyphens. It must start with an alphabetic character and cannot be longer than 128 characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Key-value map of input parameters for the StackSet template. All template parameters, including those with a `Default`, must be configured or ignored with `lifecycle` configuration block `ignore_changes` argument. All `NoEcho` template parameters must be ignored with the `lifecycle` configuration block `ignore_changes` argument.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,String>> parameters;

    public Optional<Output<Map<String,String>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Describes how the IAM roles required for your StackSet are created. Valid values: `SELF_MANAGED` (default), `SERVICE_MANAGED`.
     * 
     */
    @Import(name="permissionModel")
    private @Nullable Output<String> permissionModel;

    public Optional<Output<String>> permissionModel() {
        return Optional.ofNullable(this.permissionModel);
    }

    /**
     * Key-value map of tags to associate with this StackSet and the Stacks created from it. AWS CloudFormation also propagates these tags to supported resources that are created in the Stacks. A maximum number of 50 tags can be specified. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * String containing the CloudFormation template body. Maximum size: 51,200 bytes. Conflicts with `template_url`.
     * 
     */
    @Import(name="templateBody")
    private @Nullable Output<String> templateBody;

    public Optional<Output<String>> templateBody() {
        return Optional.ofNullable(this.templateBody);
    }

    /**
     * String containing the location of a file containing the CloudFormation template body. The URL must point to a template that is located in an Amazon S3 bucket. Maximum location file size: 460,800 bytes. Conflicts with `template_body`.
     * 
     */
    @Import(name="templateUrl")
    private @Nullable Output<String> templateUrl;

    public Optional<Output<String>> templateUrl() {
        return Optional.ofNullable(this.templateUrl);
    }

    private StackSetArgs() {}

    private StackSetArgs(StackSetArgs $) {
        this.administrationRoleArn = $.administrationRoleArn;
        this.autoDeployment = $.autoDeployment;
        this.capabilities = $.capabilities;
        this.description = $.description;
        this.executionRoleName = $.executionRoleName;
        this.name = $.name;
        this.parameters = $.parameters;
        this.permissionModel = $.permissionModel;
        this.tags = $.tags;
        this.templateBody = $.templateBody;
        this.templateUrl = $.templateUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StackSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StackSetArgs $;

        public Builder() {
            $ = new StackSetArgs();
        }

        public Builder(StackSetArgs defaults) {
            $ = new StackSetArgs(Objects.requireNonNull(defaults));
        }

        public Builder administrationRoleArn(@Nullable Output<String> administrationRoleArn) {
            $.administrationRoleArn = administrationRoleArn;
            return this;
        }

        public Builder administrationRoleArn(String administrationRoleArn) {
            return administrationRoleArn(Output.of(administrationRoleArn));
        }

        public Builder autoDeployment(@Nullable Output<StackSetAutoDeploymentArgs> autoDeployment) {
            $.autoDeployment = autoDeployment;
            return this;
        }

        public Builder autoDeployment(StackSetAutoDeploymentArgs autoDeployment) {
            return autoDeployment(Output.of(autoDeployment));
        }

        public Builder capabilities(@Nullable Output<List<String>> capabilities) {
            $.capabilities = capabilities;
            return this;
        }

        public Builder capabilities(List<String> capabilities) {
            return capabilities(Output.of(capabilities));
        }

        public Builder capabilities(String... capabilities) {
            return capabilities(List.of(capabilities));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder executionRoleName(@Nullable Output<String> executionRoleName) {
            $.executionRoleName = executionRoleName;
            return this;
        }

        public Builder executionRoleName(String executionRoleName) {
            return executionRoleName(Output.of(executionRoleName));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder parameters(@Nullable Output<Map<String,String>> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(Map<String,String> parameters) {
            return parameters(Output.of(parameters));
        }

        public Builder permissionModel(@Nullable Output<String> permissionModel) {
            $.permissionModel = permissionModel;
            return this;
        }

        public Builder permissionModel(String permissionModel) {
            return permissionModel(Output.of(permissionModel));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder templateBody(@Nullable Output<String> templateBody) {
            $.templateBody = templateBody;
            return this;
        }

        public Builder templateBody(String templateBody) {
            return templateBody(Output.of(templateBody));
        }

        public Builder templateUrl(@Nullable Output<String> templateUrl) {
            $.templateUrl = templateUrl;
            return this;
        }

        public Builder templateUrl(String templateUrl) {
            return templateUrl(Output.of(templateUrl));
        }

        public StackSetArgs build() {
            return $;
        }
    }

}
