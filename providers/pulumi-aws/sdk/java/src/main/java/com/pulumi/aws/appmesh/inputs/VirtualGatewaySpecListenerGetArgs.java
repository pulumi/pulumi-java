// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appmesh.inputs;

import com.pulumi.aws.appmesh.inputs.VirtualGatewaySpecListenerConnectionPoolGetArgs;
import com.pulumi.aws.appmesh.inputs.VirtualGatewaySpecListenerHealthCheckGetArgs;
import com.pulumi.aws.appmesh.inputs.VirtualGatewaySpecListenerPortMappingGetArgs;
import com.pulumi.aws.appmesh.inputs.VirtualGatewaySpecListenerTlsGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualGatewaySpecListenerGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualGatewaySpecListenerGetArgs Empty = new VirtualGatewaySpecListenerGetArgs();

    /**
     * The connection pool information for the listener.
     * 
     */
    @Import(name="connectionPool")
    private @Nullable Output<VirtualGatewaySpecListenerConnectionPoolGetArgs> connectionPool;

    /**
     * @return The connection pool information for the listener.
     * 
     */
    public Optional<Output<VirtualGatewaySpecListenerConnectionPoolGetArgs>> connectionPool() {
        return Optional.ofNullable(this.connectionPool);
    }

    /**
     * The health check information for the listener.
     * 
     */
    @Import(name="healthCheck")
    private @Nullable Output<VirtualGatewaySpecListenerHealthCheckGetArgs> healthCheck;

    /**
     * @return The health check information for the listener.
     * 
     */
    public Optional<Output<VirtualGatewaySpecListenerHealthCheckGetArgs>> healthCheck() {
        return Optional.ofNullable(this.healthCheck);
    }

    /**
     * The port mapping information for the listener.
     * 
     */
    @Import(name="portMapping", required=true)
    private Output<VirtualGatewaySpecListenerPortMappingGetArgs> portMapping;

    /**
     * @return The port mapping information for the listener.
     * 
     */
    public Output<VirtualGatewaySpecListenerPortMappingGetArgs> portMapping() {
        return this.portMapping;
    }

    /**
     * The Transport Layer Security (TLS) properties for the listener
     * 
     */
    @Import(name="tls")
    private @Nullable Output<VirtualGatewaySpecListenerTlsGetArgs> tls;

    /**
     * @return The Transport Layer Security (TLS) properties for the listener
     * 
     */
    public Optional<Output<VirtualGatewaySpecListenerTlsGetArgs>> tls() {
        return Optional.ofNullable(this.tls);
    }

    private VirtualGatewaySpecListenerGetArgs() {}

    private VirtualGatewaySpecListenerGetArgs(VirtualGatewaySpecListenerGetArgs $) {
        this.connectionPool = $.connectionPool;
        this.healthCheck = $.healthCheck;
        this.portMapping = $.portMapping;
        this.tls = $.tls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualGatewaySpecListenerGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualGatewaySpecListenerGetArgs $;

        public Builder() {
            $ = new VirtualGatewaySpecListenerGetArgs();
        }

        public Builder(VirtualGatewaySpecListenerGetArgs defaults) {
            $ = new VirtualGatewaySpecListenerGetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionPool The connection pool information for the listener.
         * 
         * @return builder
         * 
         */
        public Builder connectionPool(@Nullable Output<VirtualGatewaySpecListenerConnectionPoolGetArgs> connectionPool) {
            $.connectionPool = connectionPool;
            return this;
        }

        /**
         * @param connectionPool The connection pool information for the listener.
         * 
         * @return builder
         * 
         */
        public Builder connectionPool(VirtualGatewaySpecListenerConnectionPoolGetArgs connectionPool) {
            return connectionPool(Output.of(connectionPool));
        }

        /**
         * @param healthCheck The health check information for the listener.
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(@Nullable Output<VirtualGatewaySpecListenerHealthCheckGetArgs> healthCheck) {
            $.healthCheck = healthCheck;
            return this;
        }

        /**
         * @param healthCheck The health check information for the listener.
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(VirtualGatewaySpecListenerHealthCheckGetArgs healthCheck) {
            return healthCheck(Output.of(healthCheck));
        }

        /**
         * @param portMapping The port mapping information for the listener.
         * 
         * @return builder
         * 
         */
        public Builder portMapping(Output<VirtualGatewaySpecListenerPortMappingGetArgs> portMapping) {
            $.portMapping = portMapping;
            return this;
        }

        /**
         * @param portMapping The port mapping information for the listener.
         * 
         * @return builder
         * 
         */
        public Builder portMapping(VirtualGatewaySpecListenerPortMappingGetArgs portMapping) {
            return portMapping(Output.of(portMapping));
        }

        /**
         * @param tls The Transport Layer Security (TLS) properties for the listener
         * 
         * @return builder
         * 
         */
        public Builder tls(@Nullable Output<VirtualGatewaySpecListenerTlsGetArgs> tls) {
            $.tls = tls;
            return this;
        }

        /**
         * @param tls The Transport Layer Security (TLS) properties for the listener
         * 
         * @return builder
         * 
         */
        public Builder tls(VirtualGatewaySpecListenerTlsGetArgs tls) {
            return tls(Output.of(tls));
        }

        public VirtualGatewaySpecListenerGetArgs build() {
            $.portMapping = Objects.requireNonNull($.portMapping, "expected parameter 'portMapping' to be non-null");
            return $;
        }
    }

}
