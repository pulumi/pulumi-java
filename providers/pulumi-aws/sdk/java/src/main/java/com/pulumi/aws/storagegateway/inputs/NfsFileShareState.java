// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.storagegateway.inputs;

import com.pulumi.aws.storagegateway.inputs.NfsFileShareCacheAttributesGetArgs;
import com.pulumi.aws.storagegateway.inputs.NfsFileShareNfsFileShareDefaultsGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NfsFileShareState extends com.pulumi.resources.ResourceArgs {

    public static final NfsFileShareState Empty = new NfsFileShareState();

    /**
     * Amazon Resource Name (ARN) of the NFS File Share.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The Amazon Resource Name (ARN) of the storage used for audit logs.
     * 
     */
    @Import(name="auditDestinationArn")
    private @Nullable Output<String> auditDestinationArn;

    public Optional<Output<String>> auditDestinationArn() {
        return Optional.ofNullable(this.auditDestinationArn);
    }

    /**
     * Refresh cache information. see Cache Attributes for more details.
     * 
     */
    @Import(name="cacheAttributes")
    private @Nullable Output<NfsFileShareCacheAttributesGetArgs> cacheAttributes;

    public Optional<Output<NfsFileShareCacheAttributesGetArgs>> cacheAttributes() {
        return Optional.ofNullable(this.cacheAttributes);
    }

    /**
     * The list of clients that are allowed to access the file gateway. The list must contain either valid IP addresses or valid CIDR blocks. Set to `[&#34;0.0.0.0/0&#34;]` to not limit access. Minimum 1 item. Maximum 100 items.
     * 
     */
    @Import(name="clientLists")
    private @Nullable Output<List<String>> clientLists;

    public Optional<Output<List<String>>> clientLists() {
        return Optional.ofNullable(this.clientLists);
    }

    /**
     * The default [storage class](https://docs.aws.amazon.com/storagegateway/latest/APIReference/API_CreateNFSFileShare.html#StorageGateway-CreateNFSFileShare-request-DefaultStorageClass) for objects put into an Amazon S3 bucket by the file gateway. Defaults to `S3_STANDARD`.
     * 
     */
    @Import(name="defaultStorageClass")
    private @Nullable Output<String> defaultStorageClass;

    public Optional<Output<String>> defaultStorageClass() {
        return Optional.ofNullable(this.defaultStorageClass);
    }

    /**
     * The name of the file share. Must be set if an S3 prefix name is set in `location_arn`.
     * 
     */
    @Import(name="fileShareName")
    private @Nullable Output<String> fileShareName;

    public Optional<Output<String>> fileShareName() {
        return Optional.ofNullable(this.fileShareName);
    }

    /**
     * ID of the NFS File Share.
     * 
     */
    @Import(name="fileshareId")
    private @Nullable Output<String> fileshareId;

    public Optional<Output<String>> fileshareId() {
        return Optional.ofNullable(this.fileshareId);
    }

    /**
     * Amazon Resource Name (ARN) of the file gateway.
     * 
     */
    @Import(name="gatewayArn")
    private @Nullable Output<String> gatewayArn;

    public Optional<Output<String>> gatewayArn() {
        return Optional.ofNullable(this.gatewayArn);
    }

    /**
     * Boolean value that enables guessing of the MIME type for uploaded objects based on file extensions. Defaults to `true`.
     * 
     */
    @Import(name="guessMimeTypeEnabled")
    private @Nullable Output<Boolean> guessMimeTypeEnabled;

    public Optional<Output<Boolean>> guessMimeTypeEnabled() {
        return Optional.ofNullable(this.guessMimeTypeEnabled);
    }

    /**
     * Boolean value if `true` to use Amazon S3 server side encryption with your own AWS KMS key, or `false` to use a key managed by Amazon S3. Defaults to `false`.
     * 
     */
    @Import(name="kmsEncrypted")
    private @Nullable Output<Boolean> kmsEncrypted;

    public Optional<Output<Boolean>> kmsEncrypted() {
        return Optional.ofNullable(this.kmsEncrypted);
    }

    /**
     * Amazon Resource Name (ARN) for KMS key used for Amazon S3 server side encryption. This value can only be set when `kms_encrypted` is true.
     * 
     */
    @Import(name="kmsKeyArn")
    private @Nullable Output<String> kmsKeyArn;

    public Optional<Output<String>> kmsKeyArn() {
        return Optional.ofNullable(this.kmsKeyArn);
    }

    /**
     * The ARN of the backed storage used for storing file data.
     * 
     */
    @Import(name="locationArn")
    private @Nullable Output<String> locationArn;

    public Optional<Output<String>> locationArn() {
        return Optional.ofNullable(this.locationArn);
    }

    /**
     * Nested argument with file share default values. More information below. see NFS File Share Defaults for more details.
     * 
     */
    @Import(name="nfsFileShareDefaults")
    private @Nullable Output<NfsFileShareNfsFileShareDefaultsGetArgs> nfsFileShareDefaults;

    public Optional<Output<NfsFileShareNfsFileShareDefaultsGetArgs>> nfsFileShareDefaults() {
        return Optional.ofNullable(this.nfsFileShareDefaults);
    }

    /**
     * The notification policy of the file share. For more information see the [AWS Documentation](https://docs.aws.amazon.com/storagegateway/latest/APIReference/API_CreateNFSFileShare.html#StorageGateway-CreateNFSFileShare-request-NotificationPolicy). Default value is `{}`.
     * 
     */
    @Import(name="notificationPolicy")
    private @Nullable Output<String> notificationPolicy;

    public Optional<Output<String>> notificationPolicy() {
        return Optional.ofNullable(this.notificationPolicy);
    }

    /**
     * Access Control List permission for S3 bucket objects. Defaults to `private`.
     * 
     */
    @Import(name="objectAcl")
    private @Nullable Output<String> objectAcl;

    public Optional<Output<String>> objectAcl() {
        return Optional.ofNullable(this.objectAcl);
    }

    /**
     * File share path used by the NFS client to identify the mount point.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Boolean to indicate write status of file share. File share does not accept writes if `true`. Defaults to `false`.
     * 
     */
    @Import(name="readOnly")
    private @Nullable Output<Boolean> readOnly;

    public Optional<Output<Boolean>> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    /**
     * Boolean who pays the cost of the request and the data download from the Amazon S3 bucket. Set this value to `true` if you want the requester to pay instead of the bucket owner. Defaults to `false`.
     * 
     */
    @Import(name="requesterPays")
    private @Nullable Output<Boolean> requesterPays;

    public Optional<Output<Boolean>> requesterPays() {
        return Optional.ofNullable(this.requesterPays);
    }

    /**
     * The ARN of the AWS Identity and Access Management (IAM) role that a file gateway assumes when it accesses the underlying storage.
     * 
     */
    @Import(name="roleArn")
    private @Nullable Output<String> roleArn;

    public Optional<Output<String>> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    /**
     * Maps a user to anonymous user. Defaults to `RootSquash`. Valid values: `RootSquash` (only root is mapped to anonymous user), `NoSquash` (no one is mapped to anonymous user), `AllSquash` (everyone is mapped to anonymous user)
     * 
     */
    @Import(name="squash")
    private @Nullable Output<String> squash;

    public Optional<Output<String>> squash() {
        return Optional.ofNullable(this.squash);
    }

    /**
     * Key-value map of resource tags. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    private NfsFileShareState() {}

    private NfsFileShareState(NfsFileShareState $) {
        this.arn = $.arn;
        this.auditDestinationArn = $.auditDestinationArn;
        this.cacheAttributes = $.cacheAttributes;
        this.clientLists = $.clientLists;
        this.defaultStorageClass = $.defaultStorageClass;
        this.fileShareName = $.fileShareName;
        this.fileshareId = $.fileshareId;
        this.gatewayArn = $.gatewayArn;
        this.guessMimeTypeEnabled = $.guessMimeTypeEnabled;
        this.kmsEncrypted = $.kmsEncrypted;
        this.kmsKeyArn = $.kmsKeyArn;
        this.locationArn = $.locationArn;
        this.nfsFileShareDefaults = $.nfsFileShareDefaults;
        this.notificationPolicy = $.notificationPolicy;
        this.objectAcl = $.objectAcl;
        this.path = $.path;
        this.readOnly = $.readOnly;
        this.requesterPays = $.requesterPays;
        this.roleArn = $.roleArn;
        this.squash = $.squash;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NfsFileShareState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NfsFileShareState $;

        public Builder() {
            $ = new NfsFileShareState();
        }

        public Builder(NfsFileShareState defaults) {
            $ = new NfsFileShareState(Objects.requireNonNull(defaults));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder auditDestinationArn(@Nullable Output<String> auditDestinationArn) {
            $.auditDestinationArn = auditDestinationArn;
            return this;
        }

        public Builder auditDestinationArn(String auditDestinationArn) {
            return auditDestinationArn(Output.of(auditDestinationArn));
        }

        public Builder cacheAttributes(@Nullable Output<NfsFileShareCacheAttributesGetArgs> cacheAttributes) {
            $.cacheAttributes = cacheAttributes;
            return this;
        }

        public Builder cacheAttributes(NfsFileShareCacheAttributesGetArgs cacheAttributes) {
            return cacheAttributes(Output.of(cacheAttributes));
        }

        public Builder clientLists(@Nullable Output<List<String>> clientLists) {
            $.clientLists = clientLists;
            return this;
        }

        public Builder clientLists(List<String> clientLists) {
            return clientLists(Output.of(clientLists));
        }

        public Builder clientLists(String... clientLists) {
            return clientLists(List.of(clientLists));
        }

        public Builder defaultStorageClass(@Nullable Output<String> defaultStorageClass) {
            $.defaultStorageClass = defaultStorageClass;
            return this;
        }

        public Builder defaultStorageClass(String defaultStorageClass) {
            return defaultStorageClass(Output.of(defaultStorageClass));
        }

        public Builder fileShareName(@Nullable Output<String> fileShareName) {
            $.fileShareName = fileShareName;
            return this;
        }

        public Builder fileShareName(String fileShareName) {
            return fileShareName(Output.of(fileShareName));
        }

        public Builder fileshareId(@Nullable Output<String> fileshareId) {
            $.fileshareId = fileshareId;
            return this;
        }

        public Builder fileshareId(String fileshareId) {
            return fileshareId(Output.of(fileshareId));
        }

        public Builder gatewayArn(@Nullable Output<String> gatewayArn) {
            $.gatewayArn = gatewayArn;
            return this;
        }

        public Builder gatewayArn(String gatewayArn) {
            return gatewayArn(Output.of(gatewayArn));
        }

        public Builder guessMimeTypeEnabled(@Nullable Output<Boolean> guessMimeTypeEnabled) {
            $.guessMimeTypeEnabled = guessMimeTypeEnabled;
            return this;
        }

        public Builder guessMimeTypeEnabled(Boolean guessMimeTypeEnabled) {
            return guessMimeTypeEnabled(Output.of(guessMimeTypeEnabled));
        }

        public Builder kmsEncrypted(@Nullable Output<Boolean> kmsEncrypted) {
            $.kmsEncrypted = kmsEncrypted;
            return this;
        }

        public Builder kmsEncrypted(Boolean kmsEncrypted) {
            return kmsEncrypted(Output.of(kmsEncrypted));
        }

        public Builder kmsKeyArn(@Nullable Output<String> kmsKeyArn) {
            $.kmsKeyArn = kmsKeyArn;
            return this;
        }

        public Builder kmsKeyArn(String kmsKeyArn) {
            return kmsKeyArn(Output.of(kmsKeyArn));
        }

        public Builder locationArn(@Nullable Output<String> locationArn) {
            $.locationArn = locationArn;
            return this;
        }

        public Builder locationArn(String locationArn) {
            return locationArn(Output.of(locationArn));
        }

        public Builder nfsFileShareDefaults(@Nullable Output<NfsFileShareNfsFileShareDefaultsGetArgs> nfsFileShareDefaults) {
            $.nfsFileShareDefaults = nfsFileShareDefaults;
            return this;
        }

        public Builder nfsFileShareDefaults(NfsFileShareNfsFileShareDefaultsGetArgs nfsFileShareDefaults) {
            return nfsFileShareDefaults(Output.of(nfsFileShareDefaults));
        }

        public Builder notificationPolicy(@Nullable Output<String> notificationPolicy) {
            $.notificationPolicy = notificationPolicy;
            return this;
        }

        public Builder notificationPolicy(String notificationPolicy) {
            return notificationPolicy(Output.of(notificationPolicy));
        }

        public Builder objectAcl(@Nullable Output<String> objectAcl) {
            $.objectAcl = objectAcl;
            return this;
        }

        public Builder objectAcl(String objectAcl) {
            return objectAcl(Output.of(objectAcl));
        }

        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        public Builder path(String path) {
            return path(Output.of(path));
        }

        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        public Builder readOnly(Boolean readOnly) {
            return readOnly(Output.of(readOnly));
        }

        public Builder requesterPays(@Nullable Output<Boolean> requesterPays) {
            $.requesterPays = requesterPays;
            return this;
        }

        public Builder requesterPays(Boolean requesterPays) {
            return requesterPays(Output.of(requesterPays));
        }

        public Builder roleArn(@Nullable Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public Builder squash(@Nullable Output<String> squash) {
            $.squash = squash;
            return this;
        }

        public Builder squash(String squash) {
            return squash(Output.of(squash));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public NfsFileShareState build() {
            return $;
        }
    }

}
