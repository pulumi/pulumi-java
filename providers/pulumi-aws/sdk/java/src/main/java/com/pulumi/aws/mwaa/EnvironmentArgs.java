// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.mwaa;

import com.pulumi.aws.mwaa.inputs.EnvironmentLoggingConfigurationArgs;
import com.pulumi.aws.mwaa.inputs.EnvironmentNetworkConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EnvironmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final EnvironmentArgs Empty = new EnvironmentArgs();

    /**
     * The `airflow_configuration_options` parameter specifies airflow override options. Check the [Official documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html#configuring-env-variables-reference) for all possible configuration options.
     * 
     */
    @Import(name="airflowConfigurationOptions")
    private @Nullable Output<Map<String,String>> airflowConfigurationOptions;

    public Optional<Output<Map<String,String>>> airflowConfigurationOptions() {
        return Optional.ofNullable(this.airflowConfigurationOptions);
    }

    /**
     * Airflow version of your environment, will be set by default to the latest version that MWAA supports.
     * 
     */
    @Import(name="airflowVersion")
    private @Nullable Output<String> airflowVersion;

    public Optional<Output<String>> airflowVersion() {
        return Optional.ofNullable(this.airflowVersion);
    }

    /**
     * The relative path to the DAG folder on your Amazon S3 storage bucket. For example, dags. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
     * 
     */
    @Import(name="dagS3Path", required=true)
    private Output<String> dagS3Path;

    public Output<String> dagS3Path() {
        return this.dagS3Path;
    }

    /**
     * Environment class for the cluster. Possible options are `mw1.small`, `mw1.medium`, `mw1.large`. Will be set by default to `mw1.small`. Please check the [AWS Pricing](https://aws.amazon.com/de/managed-workflows-for-apache-airflow/pricing/) for more information about the environment classes.
     * 
     */
    @Import(name="environmentClass")
    private @Nullable Output<String> environmentClass;

    public Optional<Output<String>> environmentClass() {
        return Optional.ofNullable(this.environmentClass);
    }

    /**
     * The Amazon Resource Name (ARN) of the task execution role that the Amazon MWAA and its environment can assume. Check the [official AWS documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-create-role.html) for the detailed role specification.
     * 
     */
    @Import(name="executionRoleArn", required=true)
    private Output<String> executionRoleArn;

    public Output<String> executionRoleArn() {
        return this.executionRoleArn;
    }

    /**
     * The Amazon Resource Name (ARN) of your KMS key that you want to use for encryption. Will be set to the ARN of the managed KMS key `aws/airflow` by default. Please check the [Official Documentation](https://docs.aws.amazon.com/mwaa/latest/userguide/custom-keys-certs.html) for more information.
     * 
     */
    @Import(name="kmsKey")
    private @Nullable Output<String> kmsKey;

    public Optional<Output<String>> kmsKey() {
        return Optional.ofNullable(this.kmsKey);
    }

    /**
     * The Apache Airflow logs you want to send to Amazon CloudWatch Logs.
     * 
     */
    @Import(name="loggingConfiguration")
    private @Nullable Output<EnvironmentLoggingConfigurationArgs> loggingConfiguration;

    public Optional<Output<EnvironmentLoggingConfigurationArgs>> loggingConfiguration() {
        return Optional.ofNullable(this.loggingConfiguration);
    }

    /**
     * The maximum number of workers that can be automatically scaled up. Value need to be between `1` and `25`. Will be `10` by default.
     * 
     */
    @Import(name="maxWorkers")
    private @Nullable Output<Integer> maxWorkers;

    public Optional<Output<Integer>> maxWorkers() {
        return Optional.ofNullable(this.maxWorkers);
    }

    /**
     * The minimum number of workers that you want to run in your environment. Will be `1` by default.
     * 
     */
    @Import(name="minWorkers")
    private @Nullable Output<Integer> minWorkers;

    public Optional<Output<Integer>> minWorkers() {
        return Optional.ofNullable(this.minWorkers);
    }

    /**
     * The name of the Apache Airflow Environment
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the network configuration for your Apache Airflow Environment. This includes two private subnets as well as security groups for the Airflow environment. Each subnet requires internet connection, otherwise the deployment will fail. See Network configuration below for details.
     * 
     */
    @Import(name="networkConfiguration", required=true)
    private Output<EnvironmentNetworkConfigurationArgs> networkConfiguration;

    public Output<EnvironmentNetworkConfigurationArgs> networkConfiguration() {
        return this.networkConfiguration;
    }

    /**
     * The plugins.zip file version you want to use.
     * 
     */
    @Import(name="pluginsS3ObjectVersion")
    private @Nullable Output<String> pluginsS3ObjectVersion;

    public Optional<Output<String>> pluginsS3ObjectVersion() {
        return Optional.ofNullable(this.pluginsS3ObjectVersion);
    }

    /**
     * The relative path to the plugins.zip file on your Amazon S3 storage bucket. For example, plugins.zip. If a relative path is provided in the request, then plugins_s3_object_version is required. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
     * 
     */
    @Import(name="pluginsS3Path")
    private @Nullable Output<String> pluginsS3Path;

    public Optional<Output<String>> pluginsS3Path() {
        return Optional.ofNullable(this.pluginsS3Path);
    }

    /**
     * The requirements.txt file version you want to use.
     * 
     */
    @Import(name="requirementsS3ObjectVersion")
    private @Nullable Output<String> requirementsS3ObjectVersion;

    public Optional<Output<String>> requirementsS3ObjectVersion() {
        return Optional.ofNullable(this.requirementsS3ObjectVersion);
    }

    /**
     * The relative path to the requirements.txt file on your Amazon S3 storage bucket. For example, requirements.txt. If a relative path is provided in the request, then requirements_s3_object_version is required. For more information, see [Importing DAGs on Amazon MWAA](https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import.html).
     * 
     */
    @Import(name="requirementsS3Path")
    private @Nullable Output<String> requirementsS3Path;

    public Optional<Output<String>> requirementsS3Path() {
        return Optional.ofNullable(this.requirementsS3Path);
    }

    /**
     * The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example, arn:aws:s3:::airflow-mybucketname.
     * 
     */
    @Import(name="sourceBucketArn", required=true)
    private Output<String> sourceBucketArn;

    public Output<String> sourceBucketArn() {
        return this.sourceBucketArn;
    }

    /**
     * A map of resource tags to associate with the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Specifies whether the webserver should be accessible over the internet or via your specified VPC. Possible options: `PRIVATE_ONLY` (default) and `PUBLIC_ONLY`.
     * 
     */
    @Import(name="webserverAccessMode")
    private @Nullable Output<String> webserverAccessMode;

    public Optional<Output<String>> webserverAccessMode() {
        return Optional.ofNullable(this.webserverAccessMode);
    }

    /**
     * Specifies the start date for the weekly maintenance window.
     * 
     */
    @Import(name="weeklyMaintenanceWindowStart")
    private @Nullable Output<String> weeklyMaintenanceWindowStart;

    public Optional<Output<String>> weeklyMaintenanceWindowStart() {
        return Optional.ofNullable(this.weeklyMaintenanceWindowStart);
    }

    private EnvironmentArgs() {}

    private EnvironmentArgs(EnvironmentArgs $) {
        this.airflowConfigurationOptions = $.airflowConfigurationOptions;
        this.airflowVersion = $.airflowVersion;
        this.dagS3Path = $.dagS3Path;
        this.environmentClass = $.environmentClass;
        this.executionRoleArn = $.executionRoleArn;
        this.kmsKey = $.kmsKey;
        this.loggingConfiguration = $.loggingConfiguration;
        this.maxWorkers = $.maxWorkers;
        this.minWorkers = $.minWorkers;
        this.name = $.name;
        this.networkConfiguration = $.networkConfiguration;
        this.pluginsS3ObjectVersion = $.pluginsS3ObjectVersion;
        this.pluginsS3Path = $.pluginsS3Path;
        this.requirementsS3ObjectVersion = $.requirementsS3ObjectVersion;
        this.requirementsS3Path = $.requirementsS3Path;
        this.sourceBucketArn = $.sourceBucketArn;
        this.tags = $.tags;
        this.webserverAccessMode = $.webserverAccessMode;
        this.weeklyMaintenanceWindowStart = $.weeklyMaintenanceWindowStart;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvironmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvironmentArgs $;

        public Builder() {
            $ = new EnvironmentArgs();
        }

        public Builder(EnvironmentArgs defaults) {
            $ = new EnvironmentArgs(Objects.requireNonNull(defaults));
        }

        public Builder airflowConfigurationOptions(@Nullable Output<Map<String,String>> airflowConfigurationOptions) {
            $.airflowConfigurationOptions = airflowConfigurationOptions;
            return this;
        }

        public Builder airflowConfigurationOptions(Map<String,String> airflowConfigurationOptions) {
            return airflowConfigurationOptions(Output.of(airflowConfigurationOptions));
        }

        public Builder airflowVersion(@Nullable Output<String> airflowVersion) {
            $.airflowVersion = airflowVersion;
            return this;
        }

        public Builder airflowVersion(String airflowVersion) {
            return airflowVersion(Output.of(airflowVersion));
        }

        public Builder dagS3Path(Output<String> dagS3Path) {
            $.dagS3Path = dagS3Path;
            return this;
        }

        public Builder dagS3Path(String dagS3Path) {
            return dagS3Path(Output.of(dagS3Path));
        }

        public Builder environmentClass(@Nullable Output<String> environmentClass) {
            $.environmentClass = environmentClass;
            return this;
        }

        public Builder environmentClass(String environmentClass) {
            return environmentClass(Output.of(environmentClass));
        }

        public Builder executionRoleArn(Output<String> executionRoleArn) {
            $.executionRoleArn = executionRoleArn;
            return this;
        }

        public Builder executionRoleArn(String executionRoleArn) {
            return executionRoleArn(Output.of(executionRoleArn));
        }

        public Builder kmsKey(@Nullable Output<String> kmsKey) {
            $.kmsKey = kmsKey;
            return this;
        }

        public Builder kmsKey(String kmsKey) {
            return kmsKey(Output.of(kmsKey));
        }

        public Builder loggingConfiguration(@Nullable Output<EnvironmentLoggingConfigurationArgs> loggingConfiguration) {
            $.loggingConfiguration = loggingConfiguration;
            return this;
        }

        public Builder loggingConfiguration(EnvironmentLoggingConfigurationArgs loggingConfiguration) {
            return loggingConfiguration(Output.of(loggingConfiguration));
        }

        public Builder maxWorkers(@Nullable Output<Integer> maxWorkers) {
            $.maxWorkers = maxWorkers;
            return this;
        }

        public Builder maxWorkers(Integer maxWorkers) {
            return maxWorkers(Output.of(maxWorkers));
        }

        public Builder minWorkers(@Nullable Output<Integer> minWorkers) {
            $.minWorkers = minWorkers;
            return this;
        }

        public Builder minWorkers(Integer minWorkers) {
            return minWorkers(Output.of(minWorkers));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder networkConfiguration(Output<EnvironmentNetworkConfigurationArgs> networkConfiguration) {
            $.networkConfiguration = networkConfiguration;
            return this;
        }

        public Builder networkConfiguration(EnvironmentNetworkConfigurationArgs networkConfiguration) {
            return networkConfiguration(Output.of(networkConfiguration));
        }

        public Builder pluginsS3ObjectVersion(@Nullable Output<String> pluginsS3ObjectVersion) {
            $.pluginsS3ObjectVersion = pluginsS3ObjectVersion;
            return this;
        }

        public Builder pluginsS3ObjectVersion(String pluginsS3ObjectVersion) {
            return pluginsS3ObjectVersion(Output.of(pluginsS3ObjectVersion));
        }

        public Builder pluginsS3Path(@Nullable Output<String> pluginsS3Path) {
            $.pluginsS3Path = pluginsS3Path;
            return this;
        }

        public Builder pluginsS3Path(String pluginsS3Path) {
            return pluginsS3Path(Output.of(pluginsS3Path));
        }

        public Builder requirementsS3ObjectVersion(@Nullable Output<String> requirementsS3ObjectVersion) {
            $.requirementsS3ObjectVersion = requirementsS3ObjectVersion;
            return this;
        }

        public Builder requirementsS3ObjectVersion(String requirementsS3ObjectVersion) {
            return requirementsS3ObjectVersion(Output.of(requirementsS3ObjectVersion));
        }

        public Builder requirementsS3Path(@Nullable Output<String> requirementsS3Path) {
            $.requirementsS3Path = requirementsS3Path;
            return this;
        }

        public Builder requirementsS3Path(String requirementsS3Path) {
            return requirementsS3Path(Output.of(requirementsS3Path));
        }

        public Builder sourceBucketArn(Output<String> sourceBucketArn) {
            $.sourceBucketArn = sourceBucketArn;
            return this;
        }

        public Builder sourceBucketArn(String sourceBucketArn) {
            return sourceBucketArn(Output.of(sourceBucketArn));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder webserverAccessMode(@Nullable Output<String> webserverAccessMode) {
            $.webserverAccessMode = webserverAccessMode;
            return this;
        }

        public Builder webserverAccessMode(String webserverAccessMode) {
            return webserverAccessMode(Output.of(webserverAccessMode));
        }

        public Builder weeklyMaintenanceWindowStart(@Nullable Output<String> weeklyMaintenanceWindowStart) {
            $.weeklyMaintenanceWindowStart = weeklyMaintenanceWindowStart;
            return this;
        }

        public Builder weeklyMaintenanceWindowStart(String weeklyMaintenanceWindowStart) {
            return weeklyMaintenanceWindowStart(Output.of(weeklyMaintenanceWindowStart));
        }

        public EnvironmentArgs build() {
            $.dagS3Path = Objects.requireNonNull($.dagS3Path, "expected parameter 'dagS3Path' to be non-null");
            $.executionRoleArn = Objects.requireNonNull($.executionRoleArn, "expected parameter 'executionRoleArn' to be non-null");
            $.networkConfiguration = Objects.requireNonNull($.networkConfiguration, "expected parameter 'networkConfiguration' to be non-null");
            $.sourceBucketArn = Objects.requireNonNull($.sourceBucketArn, "expected parameter 'sourceBucketArn' to be non-null");
            return $;
        }
    }

}
