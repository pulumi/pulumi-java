// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ecr;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


public final class PullThroughCacheRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final PullThroughCacheRuleArgs Empty = new PullThroughCacheRuleArgs();

    /**
     * The repository name prefix to use when caching images from the source registry.
     * 
     */
    @Import(name="ecrRepositoryPrefix", required=true)
      private final Output<String> ecrRepositoryPrefix;

    public Output<String> ecrRepositoryPrefix() {
        return this.ecrRepositoryPrefix;
    }

    /**
     * The registry URL of the upstream public registry to use as the source.
     * 
     */
    @Import(name="upstreamRegistryUrl", required=true)
      private final Output<String> upstreamRegistryUrl;

    public Output<String> upstreamRegistryUrl() {
        return this.upstreamRegistryUrl;
    }

    public PullThroughCacheRuleArgs(
        Output<String> ecrRepositoryPrefix,
        Output<String> upstreamRegistryUrl) {
        this.ecrRepositoryPrefix = Objects.requireNonNull(ecrRepositoryPrefix, "expected parameter 'ecrRepositoryPrefix' to be non-null");
        this.upstreamRegistryUrl = Objects.requireNonNull(upstreamRegistryUrl, "expected parameter 'upstreamRegistryUrl' to be non-null");
    }

    private PullThroughCacheRuleArgs() {
        this.ecrRepositoryPrefix = Codegen.empty();
        this.upstreamRegistryUrl = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PullThroughCacheRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> ecrRepositoryPrefix;
        private Output<String> upstreamRegistryUrl;

        public Builder() {
    	      // Empty
        }

        public Builder(PullThroughCacheRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ecrRepositoryPrefix = defaults.ecrRepositoryPrefix;
    	      this.upstreamRegistryUrl = defaults.upstreamRegistryUrl;
        }

        public Builder ecrRepositoryPrefix(Output<String> ecrRepositoryPrefix) {
            this.ecrRepositoryPrefix = Objects.requireNonNull(ecrRepositoryPrefix);
            return this;
        }
        public Builder ecrRepositoryPrefix(String ecrRepositoryPrefix) {
            this.ecrRepositoryPrefix = Output.of(Objects.requireNonNull(ecrRepositoryPrefix));
            return this;
        }
        public Builder upstreamRegistryUrl(Output<String> upstreamRegistryUrl) {
            this.upstreamRegistryUrl = Objects.requireNonNull(upstreamRegistryUrl);
            return this;
        }
        public Builder upstreamRegistryUrl(String upstreamRegistryUrl) {
            this.upstreamRegistryUrl = Output.of(Objects.requireNonNull(upstreamRegistryUrl));
            return this;
        }        public PullThroughCacheRuleArgs build() {
            return new PullThroughCacheRuleArgs(ecrRepositoryPrefix, upstreamRegistryUrl);
        }
    }
}
