// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.storagegateway.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewaySmbActiveDirectorySettingsGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final GatewaySmbActiveDirectorySettingsGetArgs Empty = new GatewaySmbActiveDirectorySettingsGetArgs();

    @Import(name="activeDirectoryStatus")
    private @Nullable Output<String> activeDirectoryStatus;

    public Optional<Output<String>> activeDirectoryStatus() {
        return Optional.ofNullable(this.activeDirectoryStatus);
    }

    /**
     * List of IPv4 addresses, NetBIOS names, or host names of your domain server.
     * If you need to specify the port number include it after the colon (“:”). For example, `mydc.mydomain.com:389`.
     * 
     */
    @Import(name="domainControllers")
    private @Nullable Output<List<String>> domainControllers;

    public Optional<Output<List<String>>> domainControllers() {
        return Optional.ofNullable(this.domainControllers);
    }

    /**
     * The name of the domain that you want the gateway to join.
     * 
     */
    @Import(name="domainName", required=true)
    private Output<String> domainName;

    public Output<String> domainName() {
        return this.domainName;
    }

    /**
     * The organizational unit (OU) is a container in an Active Directory that can hold users, groups,
     * computers, and other OUs and this parameter specifies the OU that the gateway will join within the AD domain.
     * 
     */
    @Import(name="organizationalUnit")
    private @Nullable Output<String> organizationalUnit;

    public Optional<Output<String>> organizationalUnit() {
        return Optional.ofNullable(this.organizationalUnit);
    }

    /**
     * The password of the user who has permission to add the gateway to the Active Directory domain.
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    public Output<String> password() {
        return this.password;
    }

    /**
     * Specifies the time in seconds, in which the JoinDomain operation must complete. The default is `20` seconds.
     * 
     */
    @Import(name="timeoutInSeconds")
    private @Nullable Output<Integer> timeoutInSeconds;

    public Optional<Output<Integer>> timeoutInSeconds() {
        return Optional.ofNullable(this.timeoutInSeconds);
    }

    /**
     * The user name of user who has permission to add the gateway to the Active Directory domain.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    public Output<String> username() {
        return this.username;
    }

    private GatewaySmbActiveDirectorySettingsGetArgs() {}

    private GatewaySmbActiveDirectorySettingsGetArgs(GatewaySmbActiveDirectorySettingsGetArgs $) {
        this.activeDirectoryStatus = $.activeDirectoryStatus;
        this.domainControllers = $.domainControllers;
        this.domainName = $.domainName;
        this.organizationalUnit = $.organizationalUnit;
        this.password = $.password;
        this.timeoutInSeconds = $.timeoutInSeconds;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewaySmbActiveDirectorySettingsGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewaySmbActiveDirectorySettingsGetArgs $;

        public Builder() {
            $ = new GatewaySmbActiveDirectorySettingsGetArgs();
        }

        public Builder(GatewaySmbActiveDirectorySettingsGetArgs defaults) {
            $ = new GatewaySmbActiveDirectorySettingsGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder activeDirectoryStatus(@Nullable Output<String> activeDirectoryStatus) {
            $.activeDirectoryStatus = activeDirectoryStatus;
            return this;
        }

        public Builder activeDirectoryStatus(String activeDirectoryStatus) {
            return activeDirectoryStatus(Output.of(activeDirectoryStatus));
        }

        public Builder domainControllers(@Nullable Output<List<String>> domainControllers) {
            $.domainControllers = domainControllers;
            return this;
        }

        public Builder domainControllers(List<String> domainControllers) {
            return domainControllers(Output.of(domainControllers));
        }

        public Builder domainControllers(String... domainControllers) {
            return domainControllers(List.of(domainControllers));
        }

        public Builder domainName(Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        public Builder organizationalUnit(@Nullable Output<String> organizationalUnit) {
            $.organizationalUnit = organizationalUnit;
            return this;
        }

        public Builder organizationalUnit(String organizationalUnit) {
            return organizationalUnit(Output.of(organizationalUnit));
        }

        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        public Builder password(String password) {
            return password(Output.of(password));
        }

        public Builder timeoutInSeconds(@Nullable Output<Integer> timeoutInSeconds) {
            $.timeoutInSeconds = timeoutInSeconds;
            return this;
        }

        public Builder timeoutInSeconds(Integer timeoutInSeconds) {
            return timeoutInSeconds(Output.of(timeoutInSeconds));
        }

        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        public Builder username(String username) {
            return username(Output.of(username));
        }

        public GatewaySmbActiveDirectorySettingsGetArgs build() {
            $.domainName = Objects.requireNonNull($.domainName, "expected parameter 'domainName' to be non-null");
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            return $;
        }
    }

}
