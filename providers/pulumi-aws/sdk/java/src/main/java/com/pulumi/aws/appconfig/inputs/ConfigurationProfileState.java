// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appconfig.inputs;

import com.pulumi.aws.appconfig.inputs.ConfigurationProfileValidatorGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ConfigurationProfileState extends com.pulumi.resources.ResourceArgs {

    public static final ConfigurationProfileState Empty = new ConfigurationProfileState();

    /**
     * The application ID. Must be between 4 and 7 characters in length.
     * 
     */
    @Import(name="applicationId")
      private final @Nullable Output<String> applicationId;

    public Output<String> applicationId() {
        return this.applicationId == null ? Codegen.empty() : this.applicationId;
    }

    /**
     * The Amazon Resource Name (ARN) of the AppConfig Configuration Profile.
     * 
     */
    @Import(name="arn")
      private final @Nullable Output<String> arn;

    public Output<String> arn() {
        return this.arn == null ? Codegen.empty() : this.arn;
    }

    /**
     * The configuration profile ID.
     * 
     */
    @Import(name="configurationProfileId")
      private final @Nullable Output<String> configurationProfileId;

    public Output<String> configurationProfileId() {
        return this.configurationProfileId == null ? Codegen.empty() : this.configurationProfileId;
    }

    /**
     * The description of the configuration profile. Can be at most 1024 characters.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * A URI to locate the configuration. You can specify the AWS AppConfig hosted configuration store, Systems Manager (SSM) document, an SSM Parameter Store parameter, or an Amazon S3 object. For the hosted configuration store, specify `hosted`. For an SSM document, specify either the document name in the format `ssm-document://<Document_name>` or the Amazon Resource Name (ARN). For a parameter, specify either the parameter name in the format `ssm-parameter://<Parameter_name>` or the ARN. For an Amazon S3 object, specify the URI in the following format: `s3://<bucket>/<objectKey>`.
     * 
     */
    @Import(name="locationUri")
      private final @Nullable Output<String> locationUri;

    public Output<String> locationUri() {
        return this.locationUri == null ? Codegen.empty() : this.locationUri;
    }

    /**
     * The name for the configuration profile. Must be between 1 and 64 characters in length.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The ARN of an IAM role with permission to access the configuration at the specified `location_uri`. A retrieval role ARN is not required for configurations stored in the AWS AppConfig `hosted` configuration store. It is required for all other sources that store your configuration.
     * 
     */
    @Import(name="retrievalRoleArn")
      private final @Nullable Output<String> retrievalRoleArn;

    public Output<String> retrievalRoleArn() {
        return this.retrievalRoleArn == null ? Codegen.empty() : this.retrievalRoleArn;
    }

    /**
     * A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
      private final @Nullable Output<Map<String,String>> tagsAll;

    public Output<Map<String,String>> tagsAll() {
        return this.tagsAll == null ? Codegen.empty() : this.tagsAll;
    }

    /**
     * A set of methods for validating the configuration. Maximum of 2. See Validator below for more details.
     * 
     */
    @Import(name="validators")
      private final @Nullable Output<List<ConfigurationProfileValidatorGetArgs>> validators;

    public Output<List<ConfigurationProfileValidatorGetArgs>> validators() {
        return this.validators == null ? Codegen.empty() : this.validators;
    }

    public ConfigurationProfileState(
        @Nullable Output<String> applicationId,
        @Nullable Output<String> arn,
        @Nullable Output<String> configurationProfileId,
        @Nullable Output<String> description,
        @Nullable Output<String> locationUri,
        @Nullable Output<String> name,
        @Nullable Output<String> retrievalRoleArn,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Map<String,String>> tagsAll,
        @Nullable Output<List<ConfigurationProfileValidatorGetArgs>> validators) {
        this.applicationId = applicationId;
        this.arn = arn;
        this.configurationProfileId = configurationProfileId;
        this.description = description;
        this.locationUri = locationUri;
        this.name = name;
        this.retrievalRoleArn = retrievalRoleArn;
        this.tags = tags;
        this.tagsAll = tagsAll;
        this.validators = validators;
    }

    private ConfigurationProfileState() {
        this.applicationId = Codegen.empty();
        this.arn = Codegen.empty();
        this.configurationProfileId = Codegen.empty();
        this.description = Codegen.empty();
        this.locationUri = Codegen.empty();
        this.name = Codegen.empty();
        this.retrievalRoleArn = Codegen.empty();
        this.tags = Codegen.empty();
        this.tagsAll = Codegen.empty();
        this.validators = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigurationProfileState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> applicationId;
        private @Nullable Output<String> arn;
        private @Nullable Output<String> configurationProfileId;
        private @Nullable Output<String> description;
        private @Nullable Output<String> locationUri;
        private @Nullable Output<String> name;
        private @Nullable Output<String> retrievalRoleArn;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Map<String,String>> tagsAll;
        private @Nullable Output<List<ConfigurationProfileValidatorGetArgs>> validators;

        public Builder() {
    	      // Empty
        }

        public Builder(ConfigurationProfileState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationId = defaults.applicationId;
    	      this.arn = defaults.arn;
    	      this.configurationProfileId = defaults.configurationProfileId;
    	      this.description = defaults.description;
    	      this.locationUri = defaults.locationUri;
    	      this.name = defaults.name;
    	      this.retrievalRoleArn = defaults.retrievalRoleArn;
    	      this.tags = defaults.tags;
    	      this.tagsAll = defaults.tagsAll;
    	      this.validators = defaults.validators;
        }

        public Builder applicationId(@Nullable Output<String> applicationId) {
            this.applicationId = applicationId;
            return this;
        }
        public Builder applicationId(@Nullable String applicationId) {
            this.applicationId = Codegen.ofNullable(applicationId);
            return this;
        }
        public Builder arn(@Nullable Output<String> arn) {
            this.arn = arn;
            return this;
        }
        public Builder arn(@Nullable String arn) {
            this.arn = Codegen.ofNullable(arn);
            return this;
        }
        public Builder configurationProfileId(@Nullable Output<String> configurationProfileId) {
            this.configurationProfileId = configurationProfileId;
            return this;
        }
        public Builder configurationProfileId(@Nullable String configurationProfileId) {
            this.configurationProfileId = Codegen.ofNullable(configurationProfileId);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder locationUri(@Nullable Output<String> locationUri) {
            this.locationUri = locationUri;
            return this;
        }
        public Builder locationUri(@Nullable String locationUri) {
            this.locationUri = Codegen.ofNullable(locationUri);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder retrievalRoleArn(@Nullable Output<String> retrievalRoleArn) {
            this.retrievalRoleArn = retrievalRoleArn;
            return this;
        }
        public Builder retrievalRoleArn(@Nullable String retrievalRoleArn) {
            this.retrievalRoleArn = Codegen.ofNullable(retrievalRoleArn);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            this.tagsAll = tagsAll;
            return this;
        }
        public Builder tagsAll(@Nullable Map<String,String> tagsAll) {
            this.tagsAll = Codegen.ofNullable(tagsAll);
            return this;
        }
        public Builder validators(@Nullable Output<List<ConfigurationProfileValidatorGetArgs>> validators) {
            this.validators = validators;
            return this;
        }
        public Builder validators(@Nullable List<ConfigurationProfileValidatorGetArgs> validators) {
            this.validators = Codegen.ofNullable(validators);
            return this;
        }
        public Builder validators(ConfigurationProfileValidatorGetArgs... validators) {
            return validators(List.of(validators));
        }        public ConfigurationProfileState build() {
            return new ConfigurationProfileState(applicationId, arn, configurationProfileId, description, locationUri, name, retrievalRoleArn, tags, tagsAll, validators);
        }
    }
}
