// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.lambda.outputs;

import com.pulumi.aws.lambda.outputs.GetFunctionDeadLetterConfig;
import com.pulumi.aws.lambda.outputs.GetFunctionEnvironment;
import com.pulumi.aws.lambda.outputs.GetFunctionEphemeralStorage;
import com.pulumi.aws.lambda.outputs.GetFunctionFileSystemConfig;
import com.pulumi.aws.lambda.outputs.GetFunctionTracingConfig;
import com.pulumi.aws.lambda.outputs.GetFunctionVpcConfig;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetFunctionResult {
    /**
     * @return The instruction set architecture for the Lambda function.
     * 
     */
    private final List<String> architectures;
    /**
     * @return Unqualified (no `:QUALIFIER` or `:VERSION` suffix) Amazon Resource Name (ARN) identifying your Lambda Function. See also `qualified_arn`.
     * 
     */
    private final String arn;
    /**
     * @return Amazon Resource Name (ARN) for a Code Signing Configuration.
     * 
     */
    private final String codeSigningConfigArn;
    /**
     * @return Configure the function&#39;s *dead letter queue*.
     * 
     */
    private final GetFunctionDeadLetterConfig deadLetterConfig;
    /**
     * @return Description of what your Lambda Function does.
     * 
     */
    private final String description;
    /**
     * @return The Lambda environment&#39;s configuration settings.
     * 
     */
    private final GetFunctionEnvironment environment;
    /**
     * @return The amount of Ephemeral storage(`/tmp`) allocated for the Lambda Function.
     * 
     */
    private final List<GetFunctionEphemeralStorage> ephemeralStorages;
    /**
     * @return The connection settings for an Amazon EFS file system.
     * 
     */
    private final List<GetFunctionFileSystemConfig> fileSystemConfigs;
    private final String functionName;
    /**
     * @return The function entrypoint in your code.
     * 
     */
    private final String handler;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private final String id;
    /**
     * @return The URI of the container image.
     * 
     */
    private final String imageUri;
    /**
     * @return The ARN to be used for invoking Lambda Function from API Gateway.
     * 
     */
    private final String invokeArn;
    /**
     * @return The ARN for the KMS encryption key.
     * 
     */
    private final String kmsKeyArn;
    /**
     * @return The date this resource was last modified.
     * 
     */
    private final String lastModified;
    /**
     * @return A list of Lambda Layer ARNs attached to your Lambda Function.
     * 
     */
    private final List<String> layers;
    /**
     * @return Amount of memory in MB your Lambda Function can use at runtime.
     * 
     */
    private final Integer memorySize;
    /**
     * @return Qualified (`:QUALIFIER` or `:VERSION` suffix) Amazon Resource Name (ARN) identifying your Lambda Function. See also `arn`.
     * 
     */
    private final String qualifiedArn;
    private final @Nullable String qualifier;
    /**
     * @return The amount of reserved concurrent executions for this lambda function or `-1` if unreserved.
     * 
     */
    private final Integer reservedConcurrentExecutions;
    /**
     * @return IAM role attached to the Lambda Function.
     * 
     */
    private final String role;
    /**
     * @return The runtime environment for the Lambda function.
     * 
     */
    private final String runtime;
    /**
     * @return The Amazon Resource Name (ARN) of a signing job.
     * 
     */
    private final String signingJobArn;
    /**
     * @return The Amazon Resource Name (ARN) for a signing profile version.
     * 
     */
    private final String signingProfileVersionArn;
    /**
     * @return Base64-encoded representation of raw SHA-256 sum of the zip file.
     * 
     */
    private final String sourceCodeHash;
    /**
     * @return The size in bytes of the function .zip file.
     * 
     */
    private final Integer sourceCodeSize;
    private final Map<String,String> tags;
    /**
     * @return The function execution time at which Lambda should terminate the function.
     * 
     */
    private final Integer timeout;
    /**
     * @return Tracing settings of the function.
     * 
     */
    private final GetFunctionTracingConfig tracingConfig;
    /**
     * @return The version of the Lambda function.
     * 
     */
    private final String version;
    /**
     * @return VPC configuration associated with your Lambda function.
     * 
     */
    private final GetFunctionVpcConfig vpcConfig;

    @CustomType.Constructor
    private GetFunctionResult(
        @CustomType.Parameter("architectures") List<String> architectures,
        @CustomType.Parameter("arn") String arn,
        @CustomType.Parameter("codeSigningConfigArn") String codeSigningConfigArn,
        @CustomType.Parameter("deadLetterConfig") GetFunctionDeadLetterConfig deadLetterConfig,
        @CustomType.Parameter("description") String description,
        @CustomType.Parameter("environment") GetFunctionEnvironment environment,
        @CustomType.Parameter("ephemeralStorages") List<GetFunctionEphemeralStorage> ephemeralStorages,
        @CustomType.Parameter("fileSystemConfigs") List<GetFunctionFileSystemConfig> fileSystemConfigs,
        @CustomType.Parameter("functionName") String functionName,
        @CustomType.Parameter("handler") String handler,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("imageUri") String imageUri,
        @CustomType.Parameter("invokeArn") String invokeArn,
        @CustomType.Parameter("kmsKeyArn") String kmsKeyArn,
        @CustomType.Parameter("lastModified") String lastModified,
        @CustomType.Parameter("layers") List<String> layers,
        @CustomType.Parameter("memorySize") Integer memorySize,
        @CustomType.Parameter("qualifiedArn") String qualifiedArn,
        @CustomType.Parameter("qualifier") @Nullable String qualifier,
        @CustomType.Parameter("reservedConcurrentExecutions") Integer reservedConcurrentExecutions,
        @CustomType.Parameter("role") String role,
        @CustomType.Parameter("runtime") String runtime,
        @CustomType.Parameter("signingJobArn") String signingJobArn,
        @CustomType.Parameter("signingProfileVersionArn") String signingProfileVersionArn,
        @CustomType.Parameter("sourceCodeHash") String sourceCodeHash,
        @CustomType.Parameter("sourceCodeSize") Integer sourceCodeSize,
        @CustomType.Parameter("tags") Map<String,String> tags,
        @CustomType.Parameter("timeout") Integer timeout,
        @CustomType.Parameter("tracingConfig") GetFunctionTracingConfig tracingConfig,
        @CustomType.Parameter("version") String version,
        @CustomType.Parameter("vpcConfig") GetFunctionVpcConfig vpcConfig) {
        this.architectures = architectures;
        this.arn = arn;
        this.codeSigningConfigArn = codeSigningConfigArn;
        this.deadLetterConfig = deadLetterConfig;
        this.description = description;
        this.environment = environment;
        this.ephemeralStorages = ephemeralStorages;
        this.fileSystemConfigs = fileSystemConfigs;
        this.functionName = functionName;
        this.handler = handler;
        this.id = id;
        this.imageUri = imageUri;
        this.invokeArn = invokeArn;
        this.kmsKeyArn = kmsKeyArn;
        this.lastModified = lastModified;
        this.layers = layers;
        this.memorySize = memorySize;
        this.qualifiedArn = qualifiedArn;
        this.qualifier = qualifier;
        this.reservedConcurrentExecutions = reservedConcurrentExecutions;
        this.role = role;
        this.runtime = runtime;
        this.signingJobArn = signingJobArn;
        this.signingProfileVersionArn = signingProfileVersionArn;
        this.sourceCodeHash = sourceCodeHash;
        this.sourceCodeSize = sourceCodeSize;
        this.tags = tags;
        this.timeout = timeout;
        this.tracingConfig = tracingConfig;
        this.version = version;
        this.vpcConfig = vpcConfig;
    }

    /**
     * @return The instruction set architecture for the Lambda function.
     * 
     */
    public List<String> architectures() {
        return this.architectures;
    }
    /**
     * @return Unqualified (no `:QUALIFIER` or `:VERSION` suffix) Amazon Resource Name (ARN) identifying your Lambda Function. See also `qualified_arn`.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return Amazon Resource Name (ARN) for a Code Signing Configuration.
     * 
     */
    public String codeSigningConfigArn() {
        return this.codeSigningConfigArn;
    }
    /**
     * @return Configure the function&#39;s *dead letter queue*.
     * 
     */
    public GetFunctionDeadLetterConfig deadLetterConfig() {
        return this.deadLetterConfig;
    }
    /**
     * @return Description of what your Lambda Function does.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The Lambda environment&#39;s configuration settings.
     * 
     */
    public GetFunctionEnvironment environment() {
        return this.environment;
    }
    /**
     * @return The amount of Ephemeral storage(`/tmp`) allocated for the Lambda Function.
     * 
     */
    public List<GetFunctionEphemeralStorage> ephemeralStorages() {
        return this.ephemeralStorages;
    }
    /**
     * @return The connection settings for an Amazon EFS file system.
     * 
     */
    public List<GetFunctionFileSystemConfig> fileSystemConfigs() {
        return this.fileSystemConfigs;
    }
    public String functionName() {
        return this.functionName;
    }
    /**
     * @return The function entrypoint in your code.
     * 
     */
    public String handler() {
        return this.handler;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The URI of the container image.
     * 
     */
    public String imageUri() {
        return this.imageUri;
    }
    /**
     * @return The ARN to be used for invoking Lambda Function from API Gateway.
     * 
     */
    public String invokeArn() {
        return this.invokeArn;
    }
    /**
     * @return The ARN for the KMS encryption key.
     * 
     */
    public String kmsKeyArn() {
        return this.kmsKeyArn;
    }
    /**
     * @return The date this resource was last modified.
     * 
     */
    public String lastModified() {
        return this.lastModified;
    }
    /**
     * @return A list of Lambda Layer ARNs attached to your Lambda Function.
     * 
     */
    public List<String> layers() {
        return this.layers;
    }
    /**
     * @return Amount of memory in MB your Lambda Function can use at runtime.
     * 
     */
    public Integer memorySize() {
        return this.memorySize;
    }
    /**
     * @return Qualified (`:QUALIFIER` or `:VERSION` suffix) Amazon Resource Name (ARN) identifying your Lambda Function. See also `arn`.
     * 
     */
    public String qualifiedArn() {
        return this.qualifiedArn;
    }
    public Optional<String> qualifier() {
        return Optional.ofNullable(this.qualifier);
    }
    /**
     * @return The amount of reserved concurrent executions for this lambda function or `-1` if unreserved.
     * 
     */
    public Integer reservedConcurrentExecutions() {
        return this.reservedConcurrentExecutions;
    }
    /**
     * @return IAM role attached to the Lambda Function.
     * 
     */
    public String role() {
        return this.role;
    }
    /**
     * @return The runtime environment for the Lambda function.
     * 
     */
    public String runtime() {
        return this.runtime;
    }
    /**
     * @return The Amazon Resource Name (ARN) of a signing job.
     * 
     */
    public String signingJobArn() {
        return this.signingJobArn;
    }
    /**
     * @return The Amazon Resource Name (ARN) for a signing profile version.
     * 
     */
    public String signingProfileVersionArn() {
        return this.signingProfileVersionArn;
    }
    /**
     * @return Base64-encoded representation of raw SHA-256 sum of the zip file.
     * 
     */
    public String sourceCodeHash() {
        return this.sourceCodeHash;
    }
    /**
     * @return The size in bytes of the function .zip file.
     * 
     */
    public Integer sourceCodeSize() {
        return this.sourceCodeSize;
    }
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return The function execution time at which Lambda should terminate the function.
     * 
     */
    public Integer timeout() {
        return this.timeout;
    }
    /**
     * @return Tracing settings of the function.
     * 
     */
    public GetFunctionTracingConfig tracingConfig() {
        return this.tracingConfig;
    }
    /**
     * @return The version of the Lambda function.
     * 
     */
    public String version() {
        return this.version;
    }
    /**
     * @return VPC configuration associated with your Lambda function.
     * 
     */
    public GetFunctionVpcConfig vpcConfig() {
        return this.vpcConfig;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFunctionResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> architectures;
        private String arn;
        private String codeSigningConfigArn;
        private GetFunctionDeadLetterConfig deadLetterConfig;
        private String description;
        private GetFunctionEnvironment environment;
        private List<GetFunctionEphemeralStorage> ephemeralStorages;
        private List<GetFunctionFileSystemConfig> fileSystemConfigs;
        private String functionName;
        private String handler;
        private String id;
        private String imageUri;
        private String invokeArn;
        private String kmsKeyArn;
        private String lastModified;
        private List<String> layers;
        private Integer memorySize;
        private String qualifiedArn;
        private @Nullable String qualifier;
        private Integer reservedConcurrentExecutions;
        private String role;
        private String runtime;
        private String signingJobArn;
        private String signingProfileVersionArn;
        private String sourceCodeHash;
        private Integer sourceCodeSize;
        private Map<String,String> tags;
        private Integer timeout;
        private GetFunctionTracingConfig tracingConfig;
        private String version;
        private GetFunctionVpcConfig vpcConfig;

        public Builder() {
    	      // Empty
        }

        public Builder(GetFunctionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architectures = defaults.architectures;
    	      this.arn = defaults.arn;
    	      this.codeSigningConfigArn = defaults.codeSigningConfigArn;
    	      this.deadLetterConfig = defaults.deadLetterConfig;
    	      this.description = defaults.description;
    	      this.environment = defaults.environment;
    	      this.ephemeralStorages = defaults.ephemeralStorages;
    	      this.fileSystemConfigs = defaults.fileSystemConfigs;
    	      this.functionName = defaults.functionName;
    	      this.handler = defaults.handler;
    	      this.id = defaults.id;
    	      this.imageUri = defaults.imageUri;
    	      this.invokeArn = defaults.invokeArn;
    	      this.kmsKeyArn = defaults.kmsKeyArn;
    	      this.lastModified = defaults.lastModified;
    	      this.layers = defaults.layers;
    	      this.memorySize = defaults.memorySize;
    	      this.qualifiedArn = defaults.qualifiedArn;
    	      this.qualifier = defaults.qualifier;
    	      this.reservedConcurrentExecutions = defaults.reservedConcurrentExecutions;
    	      this.role = defaults.role;
    	      this.runtime = defaults.runtime;
    	      this.signingJobArn = defaults.signingJobArn;
    	      this.signingProfileVersionArn = defaults.signingProfileVersionArn;
    	      this.sourceCodeHash = defaults.sourceCodeHash;
    	      this.sourceCodeSize = defaults.sourceCodeSize;
    	      this.tags = defaults.tags;
    	      this.timeout = defaults.timeout;
    	      this.tracingConfig = defaults.tracingConfig;
    	      this.version = defaults.version;
    	      this.vpcConfig = defaults.vpcConfig;
        }

        public Builder architectures(List<String> architectures) {
            this.architectures = Objects.requireNonNull(architectures);
            return this;
        }
        public Builder architectures(String... architectures) {
            return architectures(List.of(architectures));
        }
        public Builder arn(String arn) {
            this.arn = Objects.requireNonNull(arn);
            return this;
        }
        public Builder codeSigningConfigArn(String codeSigningConfigArn) {
            this.codeSigningConfigArn = Objects.requireNonNull(codeSigningConfigArn);
            return this;
        }
        public Builder deadLetterConfig(GetFunctionDeadLetterConfig deadLetterConfig) {
            this.deadLetterConfig = Objects.requireNonNull(deadLetterConfig);
            return this;
        }
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder environment(GetFunctionEnvironment environment) {
            this.environment = Objects.requireNonNull(environment);
            return this;
        }
        public Builder ephemeralStorages(List<GetFunctionEphemeralStorage> ephemeralStorages) {
            this.ephemeralStorages = Objects.requireNonNull(ephemeralStorages);
            return this;
        }
        public Builder ephemeralStorages(GetFunctionEphemeralStorage... ephemeralStorages) {
            return ephemeralStorages(List.of(ephemeralStorages));
        }
        public Builder fileSystemConfigs(List<GetFunctionFileSystemConfig> fileSystemConfigs) {
            this.fileSystemConfigs = Objects.requireNonNull(fileSystemConfigs);
            return this;
        }
        public Builder fileSystemConfigs(GetFunctionFileSystemConfig... fileSystemConfigs) {
            return fileSystemConfigs(List.of(fileSystemConfigs));
        }
        public Builder functionName(String functionName) {
            this.functionName = Objects.requireNonNull(functionName);
            return this;
        }
        public Builder handler(String handler) {
            this.handler = Objects.requireNonNull(handler);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder imageUri(String imageUri) {
            this.imageUri = Objects.requireNonNull(imageUri);
            return this;
        }
        public Builder invokeArn(String invokeArn) {
            this.invokeArn = Objects.requireNonNull(invokeArn);
            return this;
        }
        public Builder kmsKeyArn(String kmsKeyArn) {
            this.kmsKeyArn = Objects.requireNonNull(kmsKeyArn);
            return this;
        }
        public Builder lastModified(String lastModified) {
            this.lastModified = Objects.requireNonNull(lastModified);
            return this;
        }
        public Builder layers(List<String> layers) {
            this.layers = Objects.requireNonNull(layers);
            return this;
        }
        public Builder layers(String... layers) {
            return layers(List.of(layers));
        }
        public Builder memorySize(Integer memorySize) {
            this.memorySize = Objects.requireNonNull(memorySize);
            return this;
        }
        public Builder qualifiedArn(String qualifiedArn) {
            this.qualifiedArn = Objects.requireNonNull(qualifiedArn);
            return this;
        }
        public Builder qualifier(@Nullable String qualifier) {
            this.qualifier = qualifier;
            return this;
        }
        public Builder reservedConcurrentExecutions(Integer reservedConcurrentExecutions) {
            this.reservedConcurrentExecutions = Objects.requireNonNull(reservedConcurrentExecutions);
            return this;
        }
        public Builder role(String role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }
        public Builder runtime(String runtime) {
            this.runtime = Objects.requireNonNull(runtime);
            return this;
        }
        public Builder signingJobArn(String signingJobArn) {
            this.signingJobArn = Objects.requireNonNull(signingJobArn);
            return this;
        }
        public Builder signingProfileVersionArn(String signingProfileVersionArn) {
            this.signingProfileVersionArn = Objects.requireNonNull(signingProfileVersionArn);
            return this;
        }
        public Builder sourceCodeHash(String sourceCodeHash) {
            this.sourceCodeHash = Objects.requireNonNull(sourceCodeHash);
            return this;
        }
        public Builder sourceCodeSize(Integer sourceCodeSize) {
            this.sourceCodeSize = Objects.requireNonNull(sourceCodeSize);
            return this;
        }
        public Builder tags(Map<String,String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder timeout(Integer timeout) {
            this.timeout = Objects.requireNonNull(timeout);
            return this;
        }
        public Builder tracingConfig(GetFunctionTracingConfig tracingConfig) {
            this.tracingConfig = Objects.requireNonNull(tracingConfig);
            return this;
        }
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public Builder vpcConfig(GetFunctionVpcConfig vpcConfig) {
            this.vpcConfig = Objects.requireNonNull(vpcConfig);
            return this;
        }        public GetFunctionResult build() {
            return new GetFunctionResult(architectures, arn, codeSigningConfigArn, deadLetterConfig, description, environment, ephemeralStorages, fileSystemConfigs, functionName, handler, id, imageUri, invokeArn, kmsKeyArn, lastModified, layers, memorySize, qualifiedArn, qualifier, reservedConcurrentExecutions, role, runtime, signingJobArn, signingProfileVersionArn, sourceCodeHash, sourceCodeSize, tags, timeout, tracingConfig, version, vpcConfig);
        }
    }
}
