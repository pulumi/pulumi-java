// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.xray;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SamplingRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final SamplingRuleArgs Empty = new SamplingRuleArgs();

    /**
     * Matches attributes derived from the request.
     * 
     */
    @Import(name="attributes")
      private final @Nullable Output<Map<String,String>> attributes;

    public Output<Map<String,String>> attributes() {
        return this.attributes == null ? Codegen.empty() : this.attributes;
    }

    /**
     * The percentage of matching requests to instrument, after the reservoir is exhausted.
     * 
     */
    @Import(name="fixedRate", required=true)
      private final Output<Double> fixedRate;

    public Output<Double> fixedRate() {
        return this.fixedRate;
    }

    /**
     * Matches the hostname from a request URL.
     * 
     */
    @Import(name="host", required=true)
      private final Output<String> host;

    public Output<String> host() {
        return this.host;
    }

    /**
     * Matches the HTTP method of a request.
     * 
     */
    @Import(name="httpMethod", required=true)
      private final Output<String> httpMethod;

    public Output<String> httpMethod() {
        return this.httpMethod;
    }

    /**
     * The priority of the sampling rule.
     * 
     */
    @Import(name="priority", required=true)
      private final Output<Integer> priority;

    public Output<Integer> priority() {
        return this.priority;
    }

    /**
     * A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
     * 
     */
    @Import(name="reservoirSize", required=true)
      private final Output<Integer> reservoirSize;

    public Output<Integer> reservoirSize() {
        return this.reservoirSize;
    }

    /**
     * Matches the ARN of the AWS resource on which the service runs.
     * 
     */
    @Import(name="resourceArn", required=true)
      private final Output<String> resourceArn;

    public Output<String> resourceArn() {
        return this.resourceArn;
    }

    /**
     * The name of the sampling rule.
     * 
     */
    @Import(name="ruleName")
      private final @Nullable Output<String> ruleName;

    public Output<String> ruleName() {
        return this.ruleName == null ? Codegen.empty() : this.ruleName;
    }

    /**
     * Matches the `name` that the service uses to identify itself in segments.
     * 
     */
    @Import(name="serviceName", required=true)
      private final Output<String> serviceName;

    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * Matches the `origin` that the service uses to identify its type in segments.
     * 
     */
    @Import(name="serviceType", required=true)
      private final Output<String> serviceType;

    public Output<String> serviceType() {
        return this.serviceType;
    }

    /**
     * Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * Matches the path from a request URL.
     * 
     */
    @Import(name="urlPath", required=true)
      private final Output<String> urlPath;

    public Output<String> urlPath() {
        return this.urlPath;
    }

    /**
     * The version of the sampling rule format (`1` )
     * 
     */
    @Import(name="version", required=true)
      private final Output<Integer> version;

    public Output<Integer> version() {
        return this.version;
    }

    public SamplingRuleArgs(
        @Nullable Output<Map<String,String>> attributes,
        Output<Double> fixedRate,
        Output<String> host,
        Output<String> httpMethod,
        Output<Integer> priority,
        Output<Integer> reservoirSize,
        Output<String> resourceArn,
        @Nullable Output<String> ruleName,
        Output<String> serviceName,
        Output<String> serviceType,
        @Nullable Output<Map<String,String>> tags,
        Output<String> urlPath,
        Output<Integer> version) {
        this.attributes = attributes;
        this.fixedRate = Objects.requireNonNull(fixedRate, "expected parameter 'fixedRate' to be non-null");
        this.host = Objects.requireNonNull(host, "expected parameter 'host' to be non-null");
        this.httpMethod = Objects.requireNonNull(httpMethod, "expected parameter 'httpMethod' to be non-null");
        this.priority = Objects.requireNonNull(priority, "expected parameter 'priority' to be non-null");
        this.reservoirSize = Objects.requireNonNull(reservoirSize, "expected parameter 'reservoirSize' to be non-null");
        this.resourceArn = Objects.requireNonNull(resourceArn, "expected parameter 'resourceArn' to be non-null");
        this.ruleName = ruleName;
        this.serviceName = Objects.requireNonNull(serviceName, "expected parameter 'serviceName' to be non-null");
        this.serviceType = Objects.requireNonNull(serviceType, "expected parameter 'serviceType' to be non-null");
        this.tags = tags;
        this.urlPath = Objects.requireNonNull(urlPath, "expected parameter 'urlPath' to be non-null");
        this.version = Objects.requireNonNull(version, "expected parameter 'version' to be non-null");
    }

    private SamplingRuleArgs() {
        this.attributes = Codegen.empty();
        this.fixedRate = Codegen.empty();
        this.host = Codegen.empty();
        this.httpMethod = Codegen.empty();
        this.priority = Codegen.empty();
        this.reservoirSize = Codegen.empty();
        this.resourceArn = Codegen.empty();
        this.ruleName = Codegen.empty();
        this.serviceName = Codegen.empty();
        this.serviceType = Codegen.empty();
        this.tags = Codegen.empty();
        this.urlPath = Codegen.empty();
        this.version = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SamplingRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Map<String,String>> attributes;
        private Output<Double> fixedRate;
        private Output<String> host;
        private Output<String> httpMethod;
        private Output<Integer> priority;
        private Output<Integer> reservoirSize;
        private Output<String> resourceArn;
        private @Nullable Output<String> ruleName;
        private Output<String> serviceName;
        private Output<String> serviceType;
        private @Nullable Output<Map<String,String>> tags;
        private Output<String> urlPath;
        private Output<Integer> version;

        public Builder() {
    	      // Empty
        }

        public Builder(SamplingRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attributes = defaults.attributes;
    	      this.fixedRate = defaults.fixedRate;
    	      this.host = defaults.host;
    	      this.httpMethod = defaults.httpMethod;
    	      this.priority = defaults.priority;
    	      this.reservoirSize = defaults.reservoirSize;
    	      this.resourceArn = defaults.resourceArn;
    	      this.ruleName = defaults.ruleName;
    	      this.serviceName = defaults.serviceName;
    	      this.serviceType = defaults.serviceType;
    	      this.tags = defaults.tags;
    	      this.urlPath = defaults.urlPath;
    	      this.version = defaults.version;
        }

        public Builder attributes(@Nullable Output<Map<String,String>> attributes) {
            this.attributes = attributes;
            return this;
        }
        public Builder attributes(@Nullable Map<String,String> attributes) {
            this.attributes = Codegen.ofNullable(attributes);
            return this;
        }
        public Builder fixedRate(Output<Double> fixedRate) {
            this.fixedRate = Objects.requireNonNull(fixedRate);
            return this;
        }
        public Builder fixedRate(Double fixedRate) {
            this.fixedRate = Output.of(Objects.requireNonNull(fixedRate));
            return this;
        }
        public Builder host(Output<String> host) {
            this.host = Objects.requireNonNull(host);
            return this;
        }
        public Builder host(String host) {
            this.host = Output.of(Objects.requireNonNull(host));
            return this;
        }
        public Builder httpMethod(Output<String> httpMethod) {
            this.httpMethod = Objects.requireNonNull(httpMethod);
            return this;
        }
        public Builder httpMethod(String httpMethod) {
            this.httpMethod = Output.of(Objects.requireNonNull(httpMethod));
            return this;
        }
        public Builder priority(Output<Integer> priority) {
            this.priority = Objects.requireNonNull(priority);
            return this;
        }
        public Builder priority(Integer priority) {
            this.priority = Output.of(Objects.requireNonNull(priority));
            return this;
        }
        public Builder reservoirSize(Output<Integer> reservoirSize) {
            this.reservoirSize = Objects.requireNonNull(reservoirSize);
            return this;
        }
        public Builder reservoirSize(Integer reservoirSize) {
            this.reservoirSize = Output.of(Objects.requireNonNull(reservoirSize));
            return this;
        }
        public Builder resourceArn(Output<String> resourceArn) {
            this.resourceArn = Objects.requireNonNull(resourceArn);
            return this;
        }
        public Builder resourceArn(String resourceArn) {
            this.resourceArn = Output.of(Objects.requireNonNull(resourceArn));
            return this;
        }
        public Builder ruleName(@Nullable Output<String> ruleName) {
            this.ruleName = ruleName;
            return this;
        }
        public Builder ruleName(@Nullable String ruleName) {
            this.ruleName = Codegen.ofNullable(ruleName);
            return this;
        }
        public Builder serviceName(Output<String> serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }
        public Builder serviceName(String serviceName) {
            this.serviceName = Output.of(Objects.requireNonNull(serviceName));
            return this;
        }
        public Builder serviceType(Output<String> serviceType) {
            this.serviceType = Objects.requireNonNull(serviceType);
            return this;
        }
        public Builder serviceType(String serviceType) {
            this.serviceType = Output.of(Objects.requireNonNull(serviceType));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder urlPath(Output<String> urlPath) {
            this.urlPath = Objects.requireNonNull(urlPath);
            return this;
        }
        public Builder urlPath(String urlPath) {
            this.urlPath = Output.of(Objects.requireNonNull(urlPath));
            return this;
        }
        public Builder version(Output<Integer> version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public Builder version(Integer version) {
            this.version = Output.of(Objects.requireNonNull(version));
            return this;
        }        public SamplingRuleArgs build() {
            return new SamplingRuleArgs(attributes, fixedRate, host, httpMethod, priority, reservoirSize, resourceArn, ruleName, serviceName, serviceType, tags, urlPath, version);
        }
    }
}
