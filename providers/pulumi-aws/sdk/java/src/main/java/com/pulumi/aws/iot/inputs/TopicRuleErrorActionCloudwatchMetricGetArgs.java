// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.iot.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TopicRuleErrorActionCloudwatchMetricGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final TopicRuleErrorActionCloudwatchMetricGetArgs Empty = new TopicRuleErrorActionCloudwatchMetricGetArgs();

    /**
     * The CloudWatch metric name.
     * 
     */
    @Import(name="metricName", required=true)
    private Output<String> metricName;

    public Output<String> metricName() {
        return this.metricName;
    }

    /**
     * The CloudWatch metric namespace name.
     * 
     */
    @Import(name="metricNamespace", required=true)
    private Output<String> metricNamespace;

    public Output<String> metricNamespace() {
        return this.metricNamespace;
    }

    /**
     * An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
     * 
     */
    @Import(name="metricTimestamp")
    private @Nullable Output<String> metricTimestamp;

    public Optional<Output<String>> metricTimestamp() {
        return Optional.ofNullable(this.metricTimestamp);
    }

    /**
     * The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
     * 
     */
    @Import(name="metricUnit", required=true)
    private Output<String> metricUnit;

    public Output<String> metricUnit() {
        return this.metricUnit;
    }

    /**
     * The CloudWatch metric value.
     * 
     */
    @Import(name="metricValue", required=true)
    private Output<String> metricValue;

    public Output<String> metricValue() {
        return this.metricValue;
    }

    /**
     * The IAM role ARN that allows access to the CloudWatch metric.
     * 
     */
    @Import(name="roleArn", required=true)
    private Output<String> roleArn;

    public Output<String> roleArn() {
        return this.roleArn;
    }

    private TopicRuleErrorActionCloudwatchMetricGetArgs() {}

    private TopicRuleErrorActionCloudwatchMetricGetArgs(TopicRuleErrorActionCloudwatchMetricGetArgs $) {
        this.metricName = $.metricName;
        this.metricNamespace = $.metricNamespace;
        this.metricTimestamp = $.metricTimestamp;
        this.metricUnit = $.metricUnit;
        this.metricValue = $.metricValue;
        this.roleArn = $.roleArn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TopicRuleErrorActionCloudwatchMetricGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TopicRuleErrorActionCloudwatchMetricGetArgs $;

        public Builder() {
            $ = new TopicRuleErrorActionCloudwatchMetricGetArgs();
        }

        public Builder(TopicRuleErrorActionCloudwatchMetricGetArgs defaults) {
            $ = new TopicRuleErrorActionCloudwatchMetricGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder metricName(Output<String> metricName) {
            $.metricName = metricName;
            return this;
        }

        public Builder metricName(String metricName) {
            return metricName(Output.of(metricName));
        }

        public Builder metricNamespace(Output<String> metricNamespace) {
            $.metricNamespace = metricNamespace;
            return this;
        }

        public Builder metricNamespace(String metricNamespace) {
            return metricNamespace(Output.of(metricNamespace));
        }

        public Builder metricTimestamp(@Nullable Output<String> metricTimestamp) {
            $.metricTimestamp = metricTimestamp;
            return this;
        }

        public Builder metricTimestamp(String metricTimestamp) {
            return metricTimestamp(Output.of(metricTimestamp));
        }

        public Builder metricUnit(Output<String> metricUnit) {
            $.metricUnit = metricUnit;
            return this;
        }

        public Builder metricUnit(String metricUnit) {
            return metricUnit(Output.of(metricUnit));
        }

        public Builder metricValue(Output<String> metricValue) {
            $.metricValue = metricValue;
            return this;
        }

        public Builder metricValue(String metricValue) {
            return metricValue(Output.of(metricValue));
        }

        public Builder roleArn(Output<String> roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        public Builder roleArn(String roleArn) {
            return roleArn(Output.of(roleArn));
        }

        public TopicRuleErrorActionCloudwatchMetricGetArgs build() {
            $.metricName = Objects.requireNonNull($.metricName, "expected parameter 'metricName' to be non-null");
            $.metricNamespace = Objects.requireNonNull($.metricNamespace, "expected parameter 'metricNamespace' to be non-null");
            $.metricUnit = Objects.requireNonNull($.metricUnit, "expected parameter 'metricUnit' to be non-null");
            $.metricValue = Objects.requireNonNull($.metricValue, "expected parameter 'metricValue' to be non-null");
            $.roleArn = Objects.requireNonNull($.roleArn, "expected parameter 'roleArn' to be non-null");
            return $;
        }
    }

}
