// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.mq.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BrokerUserArgs extends com.pulumi.resources.ResourceArgs {

    public static final BrokerUserArgs Empty = new BrokerUserArgs();

    /**
     * Whether to enable access to the [ActiveMQ Web Console](http://activemq.apache.org/web-console.html) for the user. Applies to `engine_type` of `ActiveMQ` only.
     * 
     */
    @Import(name="consoleAccess")
      private final @Nullable Output<Boolean> consoleAccess;

    public Output<Boolean> consoleAccess() {
        return this.consoleAccess == null ? Codegen.empty() : this.consoleAccess;
    }

    /**
     * List of groups (20 maximum) to which the ActiveMQ user belongs. Applies to `engine_type` of `ActiveMQ` only.
     * 
     */
    @Import(name="groups")
      private final @Nullable Output<List<String>> groups;

    public Output<List<String>> groups() {
        return this.groups == null ? Codegen.empty() : this.groups;
    }

    /**
     * Password of the user. It must be 12 to 250 characters long, at least 4 unique characters, and must not contain commas.
     * 
     */
    @Import(name="password", required=true)
      private final Output<String> password;

    public Output<String> password() {
        return this.password;
    }

    /**
     * Username of the user.
     * 
     */
    @Import(name="username", required=true)
      private final Output<String> username;

    public Output<String> username() {
        return this.username;
    }

    public BrokerUserArgs(
        @Nullable Output<Boolean> consoleAccess,
        @Nullable Output<List<String>> groups,
        Output<String> password,
        Output<String> username) {
        this.consoleAccess = consoleAccess;
        this.groups = groups;
        this.password = Objects.requireNonNull(password, "expected parameter 'password' to be non-null");
        this.username = Objects.requireNonNull(username, "expected parameter 'username' to be non-null");
    }

    private BrokerUserArgs() {
        this.consoleAccess = Codegen.empty();
        this.groups = Codegen.empty();
        this.password = Codegen.empty();
        this.username = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BrokerUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> consoleAccess;
        private @Nullable Output<List<String>> groups;
        private Output<String> password;
        private Output<String> username;

        public Builder() {
    	      // Empty
        }

        public Builder(BrokerUserArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.consoleAccess = defaults.consoleAccess;
    	      this.groups = defaults.groups;
    	      this.password = defaults.password;
    	      this.username = defaults.username;
        }

        public Builder consoleAccess(@Nullable Output<Boolean> consoleAccess) {
            this.consoleAccess = consoleAccess;
            return this;
        }
        public Builder consoleAccess(@Nullable Boolean consoleAccess) {
            this.consoleAccess = Codegen.ofNullable(consoleAccess);
            return this;
        }
        public Builder groups(@Nullable Output<List<String>> groups) {
            this.groups = groups;
            return this;
        }
        public Builder groups(@Nullable List<String> groups) {
            this.groups = Codegen.ofNullable(groups);
            return this;
        }
        public Builder groups(String... groups) {
            return groups(List.of(groups));
        }
        public Builder password(Output<String> password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }
        public Builder password(String password) {
            this.password = Output.of(Objects.requireNonNull(password));
            return this;
        }
        public Builder username(Output<String> username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        public Builder username(String username) {
            this.username = Output.of(Objects.requireNonNull(username));
            return this;
        }        public BrokerUserArgs build() {
            return new BrokerUserArgs(consoleAccess, groups, password, username);
        }
    }
}
