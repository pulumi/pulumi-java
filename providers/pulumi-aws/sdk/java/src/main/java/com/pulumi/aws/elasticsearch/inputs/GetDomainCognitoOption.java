// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elasticsearch.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class GetDomainCognitoOption extends com.pulumi.resources.InvokeArgs {

    public static final GetDomainCognitoOption Empty = new GetDomainCognitoOption();

    /**
     * Whether node to node encryption is enabled.
     * 
     */
    @Import(name="enabled", required=true)
    private Boolean enabled;

    /**
     * @return Whether node to node encryption is enabled.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * The Cognito Identity pool used by the domain.
     * 
     */
    @Import(name="identityPoolId", required=true)
    private String identityPoolId;

    /**
     * @return The Cognito Identity pool used by the domain.
     * 
     */
    public String identityPoolId() {
        return this.identityPoolId;
    }

    /**
     * The IAM Role with the AmazonESCognitoAccess policy attached.
     * 
     */
    @Import(name="roleArn", required=true)
    private String roleArn;

    /**
     * @return The IAM Role with the AmazonESCognitoAccess policy attached.
     * 
     */
    public String roleArn() {
        return this.roleArn;
    }

    /**
     * The Cognito User pool used by the domain.
     * 
     */
    @Import(name="userPoolId", required=true)
    private String userPoolId;

    /**
     * @return The Cognito User pool used by the domain.
     * 
     */
    public String userPoolId() {
        return this.userPoolId;
    }

    private GetDomainCognitoOption() {}

    private GetDomainCognitoOption(GetDomainCognitoOption $) {
        this.enabled = $.enabled;
        this.identityPoolId = $.identityPoolId;
        this.roleArn = $.roleArn;
        this.userPoolId = $.userPoolId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDomainCognitoOption defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDomainCognitoOption $;

        public Builder() {
            $ = new GetDomainCognitoOption();
        }

        public Builder(GetDomainCognitoOption defaults) {
            $ = new GetDomainCognitoOption(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Whether node to node encryption is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param identityPoolId The Cognito Identity pool used by the domain.
         * 
         * @return builder
         * 
         */
        public Builder identityPoolId(String identityPoolId) {
            $.identityPoolId = identityPoolId;
            return this;
        }

        /**
         * @param roleArn The IAM Role with the AmazonESCognitoAccess policy attached.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(String roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param userPoolId The Cognito User pool used by the domain.
         * 
         * @return builder
         * 
         */
        public Builder userPoolId(String userPoolId) {
            $.userPoolId = userPoolId;
            return this;
        }

        public GetDomainCognitoOption build() {
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.identityPoolId = Objects.requireNonNull($.identityPoolId, "expected parameter 'identityPoolId' to be non-null");
            $.roleArn = Objects.requireNonNull($.roleArn, "expected parameter 'roleArn' to be non-null");
            $.userPoolId = Objects.requireNonNull($.userPoolId, "expected parameter 'userPoolId' to be non-null");
            return $;
        }
    }

}
