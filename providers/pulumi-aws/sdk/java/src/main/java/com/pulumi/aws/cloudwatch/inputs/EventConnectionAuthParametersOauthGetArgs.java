// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.cloudwatch.inputs;

import com.pulumi.aws.cloudwatch.inputs.EventConnectionAuthParametersOauthClientParametersGetArgs;
import com.pulumi.aws.cloudwatch.inputs.EventConnectionAuthParametersOauthOauthHttpParametersGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventConnectionAuthParametersOauthGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventConnectionAuthParametersOauthGetArgs Empty = new EventConnectionAuthParametersOauthGetArgs();

    /**
     * The URL to the authorization endpoint.
     * 
     */
    @Import(name="authorizationEndpoint", required=true)
    private Output<String> authorizationEndpoint;

    /**
     * @return The URL to the authorization endpoint.
     * 
     */
    public Output<String> authorizationEndpoint() {
        return this.authorizationEndpoint;
    }

    /**
     * Contains the client parameters for OAuth authorization. Contains the following two parameters.
     * 
     */
    @Import(name="clientParameters")
    private @Nullable Output<EventConnectionAuthParametersOauthClientParametersGetArgs> clientParameters;

    /**
     * @return Contains the client parameters for OAuth authorization. Contains the following two parameters.
     * 
     */
    public Optional<Output<EventConnectionAuthParametersOauthClientParametersGetArgs>> clientParameters() {
        return Optional.ofNullable(this.clientParameters);
    }

    /**
     * A password for the authorization. Created and stored in AWS Secrets Manager.
     * 
     */
    @Import(name="httpMethod", required=true)
    private Output<String> httpMethod;

    /**
     * @return A password for the authorization. Created and stored in AWS Secrets Manager.
     * 
     */
    public Output<String> httpMethod() {
        return this.httpMethod;
    }

    /**
     * OAuth Http Parameters are additional credentials used to sign the request to the authorization endpoint to exchange the OAuth Client information for an access token. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
     * 
     */
    @Import(name="oauthHttpParameters", required=true)
    private Output<EventConnectionAuthParametersOauthOauthHttpParametersGetArgs> oauthHttpParameters;

    /**
     * @return OAuth Http Parameters are additional credentials used to sign the request to the authorization endpoint to exchange the OAuth Client information for an access token. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
     * 
     */
    public Output<EventConnectionAuthParametersOauthOauthHttpParametersGetArgs> oauthHttpParameters() {
        return this.oauthHttpParameters;
    }

    private EventConnectionAuthParametersOauthGetArgs() {}

    private EventConnectionAuthParametersOauthGetArgs(EventConnectionAuthParametersOauthGetArgs $) {
        this.authorizationEndpoint = $.authorizationEndpoint;
        this.clientParameters = $.clientParameters;
        this.httpMethod = $.httpMethod;
        this.oauthHttpParameters = $.oauthHttpParameters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventConnectionAuthParametersOauthGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventConnectionAuthParametersOauthGetArgs $;

        public Builder() {
            $ = new EventConnectionAuthParametersOauthGetArgs();
        }

        public Builder(EventConnectionAuthParametersOauthGetArgs defaults) {
            $ = new EventConnectionAuthParametersOauthGetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizationEndpoint The URL to the authorization endpoint.
         * 
         * @return builder
         * 
         */
        public Builder authorizationEndpoint(Output<String> authorizationEndpoint) {
            $.authorizationEndpoint = authorizationEndpoint;
            return this;
        }

        /**
         * @param authorizationEndpoint The URL to the authorization endpoint.
         * 
         * @return builder
         * 
         */
        public Builder authorizationEndpoint(String authorizationEndpoint) {
            return authorizationEndpoint(Output.of(authorizationEndpoint));
        }

        /**
         * @param clientParameters Contains the client parameters for OAuth authorization. Contains the following two parameters.
         * 
         * @return builder
         * 
         */
        public Builder clientParameters(@Nullable Output<EventConnectionAuthParametersOauthClientParametersGetArgs> clientParameters) {
            $.clientParameters = clientParameters;
            return this;
        }

        /**
         * @param clientParameters Contains the client parameters for OAuth authorization. Contains the following two parameters.
         * 
         * @return builder
         * 
         */
        public Builder clientParameters(EventConnectionAuthParametersOauthClientParametersGetArgs clientParameters) {
            return clientParameters(Output.of(clientParameters));
        }

        /**
         * @param httpMethod A password for the authorization. Created and stored in AWS Secrets Manager.
         * 
         * @return builder
         * 
         */
        public Builder httpMethod(Output<String> httpMethod) {
            $.httpMethod = httpMethod;
            return this;
        }

        /**
         * @param httpMethod A password for the authorization. Created and stored in AWS Secrets Manager.
         * 
         * @return builder
         * 
         */
        public Builder httpMethod(String httpMethod) {
            return httpMethod(Output.of(httpMethod));
        }

        /**
         * @param oauthHttpParameters OAuth Http Parameters are additional credentials used to sign the request to the authorization endpoint to exchange the OAuth Client information for an access token. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder oauthHttpParameters(Output<EventConnectionAuthParametersOauthOauthHttpParametersGetArgs> oauthHttpParameters) {
            $.oauthHttpParameters = oauthHttpParameters;
            return this;
        }

        /**
         * @param oauthHttpParameters OAuth Http Parameters are additional credentials used to sign the request to the authorization endpoint to exchange the OAuth Client information for an access token. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
         * 
         * @return builder
         * 
         */
        public Builder oauthHttpParameters(EventConnectionAuthParametersOauthOauthHttpParametersGetArgs oauthHttpParameters) {
            return oauthHttpParameters(Output.of(oauthHttpParameters));
        }

        public EventConnectionAuthParametersOauthGetArgs build() {
            $.authorizationEndpoint = Objects.requireNonNull($.authorizationEndpoint, "expected parameter 'authorizationEndpoint' to be non-null");
            $.httpMethod = Objects.requireNonNull($.httpMethod, "expected parameter 'httpMethod' to be non-null");
            $.oauthHttpParameters = Objects.requireNonNull($.oauthHttpParameters, "expected parameter 'oauthHttpParameters' to be non-null");
            return $;
        }
    }

}
