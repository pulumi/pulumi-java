// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elasticsearch.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetDomainEbsOption extends com.pulumi.resources.InvokeArgs {

    public static final GetDomainEbsOption Empty = new GetDomainEbsOption();

    /**
     * Whether EBS volumes are attached to data nodes in the domain.
     * 
     */
    @Import(name="ebsEnabled", required=true)
    private Boolean ebsEnabled;

    /**
     * @return Whether EBS volumes are attached to data nodes in the domain.
     * 
     */
    public Boolean ebsEnabled() {
        return this.ebsEnabled;
    }

    /**
     * The baseline input/output (I/O) performance of EBS volumes attached to data nodes.
     * 
     */
    @Import(name="iops", required=true)
    private Integer iops;

    /**
     * @return The baseline input/output (I/O) performance of EBS volumes attached to data nodes.
     * 
     */
    public Integer iops() {
        return this.iops;
    }

    /**
     * The size of EBS volumes attached to data nodes (in GB).
     * 
     */
    @Import(name="volumeSize", required=true)
    private Integer volumeSize;

    /**
     * @return The size of EBS volumes attached to data nodes (in GB).
     * 
     */
    public Integer volumeSize() {
        return this.volumeSize;
    }

    /**
     * The type of EBS volumes attached to data nodes.
     * 
     */
    @Import(name="volumeType", required=true)
    private String volumeType;

    /**
     * @return The type of EBS volumes attached to data nodes.
     * 
     */
    public String volumeType() {
        return this.volumeType;
    }

    private GetDomainEbsOption() {}

    private GetDomainEbsOption(GetDomainEbsOption $) {
        this.ebsEnabled = $.ebsEnabled;
        this.iops = $.iops;
        this.volumeSize = $.volumeSize;
        this.volumeType = $.volumeType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDomainEbsOption defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDomainEbsOption $;

        public Builder() {
            $ = new GetDomainEbsOption();
        }

        public Builder(GetDomainEbsOption defaults) {
            $ = new GetDomainEbsOption(Objects.requireNonNull(defaults));
        }

        /**
         * @param ebsEnabled Whether EBS volumes are attached to data nodes in the domain.
         * 
         * @return builder
         * 
         */
        public Builder ebsEnabled(Boolean ebsEnabled) {
            $.ebsEnabled = ebsEnabled;
            return this;
        }

        /**
         * @param iops The baseline input/output (I/O) performance of EBS volumes attached to data nodes.
         * 
         * @return builder
         * 
         */
        public Builder iops(Integer iops) {
            $.iops = iops;
            return this;
        }

        /**
         * @param volumeSize The size of EBS volumes attached to data nodes (in GB).
         * 
         * @return builder
         * 
         */
        public Builder volumeSize(Integer volumeSize) {
            $.volumeSize = volumeSize;
            return this;
        }

        /**
         * @param volumeType The type of EBS volumes attached to data nodes.
         * 
         * @return builder
         * 
         */
        public Builder volumeType(String volumeType) {
            $.volumeType = volumeType;
            return this;
        }

        public GetDomainEbsOption build() {
            $.ebsEnabled = Objects.requireNonNull($.ebsEnabled, "expected parameter 'ebsEnabled' to be non-null");
            $.iops = Objects.requireNonNull($.iops, "expected parameter 'iops' to be non-null");
            $.volumeSize = Objects.requireNonNull($.volumeSize, "expected parameter 'volumeSize' to be non-null");
            $.volumeType = Objects.requireNonNull($.volumeType, "expected parameter 'volumeType' to be non-null");
            return $;
        }
    }

}
