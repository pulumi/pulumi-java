// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.ec2.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetIpamPreviewNextCidrArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetIpamPreviewNextCidrArgs Empty = new GetIpamPreviewNextCidrArgs();

    /**
     * Exclude a particular CIDR range from being returned by the pool.
     * 
     */
    @Import(name="disallowedCidrs")
    private Output</* @Nullable */ List<String>> disallowedCidrs;

    /**
     * @return Exclude a particular CIDR range from being returned by the pool.
     * 
     */
    public Output</* @Nullable */ List<String>> disallowedCidrs() {
        return this.disallowedCidrs;
    }

    /**
     * The ID of the pool to which you want to assign a CIDR.
     * 
     */
    @Import(name="ipamPoolId", required=true)
    private Output<String> ipamPoolId;

    /**
     * @return The ID of the pool to which you want to assign a CIDR.
     * 
     */
    public Output<String> ipamPoolId() {
        return this.ipamPoolId;
    }

    /**
     * The netmask length of the CIDR you would like to preview from the IPAM pool.
     * 
     */
    @Import(name="netmaskLength")
    private Output</* @Nullable */ Integer> netmaskLength;

    /**
     * @return The netmask length of the CIDR you would like to preview from the IPAM pool.
     * 
     */
    public Output</* @Nullable */ Integer> netmaskLength() {
        return this.netmaskLength;
    }

    private GetIpamPreviewNextCidrArgs() {}

    private GetIpamPreviewNextCidrArgs(GetIpamPreviewNextCidrArgs $) {
        this.disallowedCidrs = $.disallowedCidrs;
        this.ipamPoolId = $.ipamPoolId;
        this.netmaskLength = $.netmaskLength;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetIpamPreviewNextCidrArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetIpamPreviewNextCidrArgs $;

        public Builder() {
            $ = new GetIpamPreviewNextCidrArgs();
        }

        public Builder(GetIpamPreviewNextCidrArgs defaults) {
            $ = new GetIpamPreviewNextCidrArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param disallowedCidrs Exclude a particular CIDR range from being returned by the pool.
         * 
         * @return builder
         * 
         */
        public Builder disallowedCidrs(Output</* @Nullable */ List<String>> disallowedCidrs) {
            $.disallowedCidrs = disallowedCidrs;
            return this;
        }

        /**
         * @param disallowedCidrs Exclude a particular CIDR range from being returned by the pool.
         * 
         * @return builder
         * 
         */
        public Builder disallowedCidrs(@Nullable List<String> disallowedCidrs) {
            return disallowedCidrs(Output.of(disallowedCidrs));
        }

        /**
         * @param disallowedCidrs Exclude a particular CIDR range from being returned by the pool.
         * 
         * @return builder
         * 
         */
        public Builder disallowedCidrs(String... disallowedCidrs) {
            return disallowedCidrs(List.of(disallowedCidrs));
        }

        /**
         * @param ipamPoolId The ID of the pool to which you want to assign a CIDR.
         * 
         * @return builder
         * 
         */
        public Builder ipamPoolId(Output<String> ipamPoolId) {
            $.ipamPoolId = ipamPoolId;
            return this;
        }

        /**
         * @param ipamPoolId The ID of the pool to which you want to assign a CIDR.
         * 
         * @return builder
         * 
         */
        public Builder ipamPoolId(String ipamPoolId) {
            return ipamPoolId(Output.of(ipamPoolId));
        }

        /**
         * @param netmaskLength The netmask length of the CIDR you would like to preview from the IPAM pool.
         * 
         * @return builder
         * 
         */
        public Builder netmaskLength(Output</* @Nullable */ Integer> netmaskLength) {
            $.netmaskLength = netmaskLength;
            return this;
        }

        /**
         * @param netmaskLength The netmask length of the CIDR you would like to preview from the IPAM pool.
         * 
         * @return builder
         * 
         */
        public Builder netmaskLength(@Nullable Integer netmaskLength) {
            return netmaskLength(Output.of(netmaskLength));
        }

        public GetIpamPreviewNextCidrArgs build() {
            $.ipamPoolId = Objects.requireNonNull($.ipamPoolId, "expected parameter 'ipamPoolId' to be non-null");
            return $;
        }
    }

}
