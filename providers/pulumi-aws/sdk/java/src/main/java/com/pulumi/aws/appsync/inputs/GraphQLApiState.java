// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appsync.inputs;

import com.pulumi.aws.appsync.inputs.GraphQLApiAdditionalAuthenticationProviderGetArgs;
import com.pulumi.aws.appsync.inputs.GraphQLApiLambdaAuthorizerConfigGetArgs;
import com.pulumi.aws.appsync.inputs.GraphQLApiLogConfigGetArgs;
import com.pulumi.aws.appsync.inputs.GraphQLApiOpenidConnectConfigGetArgs;
import com.pulumi.aws.appsync.inputs.GraphQLApiUserPoolConfigGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GraphQLApiState extends com.pulumi.resources.ResourceArgs {

    public static final GraphQLApiState Empty = new GraphQLApiState();

    /**
     * One or more additional authentication providers for the GraphqlApi. Defined below.
     * 
     */
    @Import(name="additionalAuthenticationProviders")
    private @Nullable Output<List<GraphQLApiAdditionalAuthenticationProviderGetArgs>> additionalAuthenticationProviders;

    public Optional<Output<List<GraphQLApiAdditionalAuthenticationProviderGetArgs>>> additionalAuthenticationProviders() {
        return Optional.ofNullable(this.additionalAuthenticationProviders);
    }

    /**
     * The ARN
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The authentication type. Valid values: `API_KEY`, `AWS_IAM`, `AMAZON_COGNITO_USER_POOLS`, `OPENID_CONNECT`, `AWS_LAMBDA`
     * 
     */
    @Import(name="authenticationType")
    private @Nullable Output<String> authenticationType;

    public Optional<Output<String>> authenticationType() {
        return Optional.ofNullable(this.authenticationType);
    }

    /**
     * Nested argument containing Lambda authorizer configuration. Defined below.
     * 
     */
    @Import(name="lambdaAuthorizerConfig")
    private @Nullable Output<GraphQLApiLambdaAuthorizerConfigGetArgs> lambdaAuthorizerConfig;

    public Optional<Output<GraphQLApiLambdaAuthorizerConfigGetArgs>> lambdaAuthorizerConfig() {
        return Optional.ofNullable(this.lambdaAuthorizerConfig);
    }

    /**
     * Nested argument containing logging configuration. Defined below.
     * 
     */
    @Import(name="logConfig")
    private @Nullable Output<GraphQLApiLogConfigGetArgs> logConfig;

    public Optional<Output<GraphQLApiLogConfigGetArgs>> logConfig() {
        return Optional.ofNullable(this.logConfig);
    }

    /**
     * A user-supplied name for the GraphqlApi.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Nested argument containing OpenID Connect configuration. Defined below.
     * 
     */
    @Import(name="openidConnectConfig")
    private @Nullable Output<GraphQLApiOpenidConnectConfigGetArgs> openidConnectConfig;

    public Optional<Output<GraphQLApiOpenidConnectConfigGetArgs>> openidConnectConfig() {
        return Optional.ofNullable(this.openidConnectConfig);
    }

    /**
     * The schema definition, in GraphQL schema language format. This provider cannot perform drift detection of this configuration.
     * 
     */
    @Import(name="schema")
    private @Nullable Output<String> schema;

    public Optional<Output<String>> schema() {
        return Optional.ofNullable(this.schema);
    }

    /**
     * A map of tags to assign to the resource. .If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
     * 
     */
    @Import(name="tagsAll")
    private @Nullable Output<Map<String,String>> tagsAll;

    public Optional<Output<Map<String,String>>> tagsAll() {
        return Optional.ofNullable(this.tagsAll);
    }

    /**
     * Map of URIs associated with the APIE.g., `uris[&#34;GRAPHQL&#34;] = https://ID.appsync-api.REGION.amazonaws.com/graphql`
     * 
     */
    @Import(name="uris")
    private @Nullable Output<Map<String,String>> uris;

    public Optional<Output<Map<String,String>>> uris() {
        return Optional.ofNullable(this.uris);
    }

    /**
     * The Amazon Cognito User Pool configuration. Defined below.
     * 
     */
    @Import(name="userPoolConfig")
    private @Nullable Output<GraphQLApiUserPoolConfigGetArgs> userPoolConfig;

    public Optional<Output<GraphQLApiUserPoolConfigGetArgs>> userPoolConfig() {
        return Optional.ofNullable(this.userPoolConfig);
    }

    /**
     * Whether tracing with X-ray is enabled. Defaults to false.
     * 
     */
    @Import(name="xrayEnabled")
    private @Nullable Output<Boolean> xrayEnabled;

    public Optional<Output<Boolean>> xrayEnabled() {
        return Optional.ofNullable(this.xrayEnabled);
    }

    private GraphQLApiState() {}

    private GraphQLApiState(GraphQLApiState $) {
        this.additionalAuthenticationProviders = $.additionalAuthenticationProviders;
        this.arn = $.arn;
        this.authenticationType = $.authenticationType;
        this.lambdaAuthorizerConfig = $.lambdaAuthorizerConfig;
        this.logConfig = $.logConfig;
        this.name = $.name;
        this.openidConnectConfig = $.openidConnectConfig;
        this.schema = $.schema;
        this.tags = $.tags;
        this.tagsAll = $.tagsAll;
        this.uris = $.uris;
        this.userPoolConfig = $.userPoolConfig;
        this.xrayEnabled = $.xrayEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GraphQLApiState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GraphQLApiState $;

        public Builder() {
            $ = new GraphQLApiState();
        }

        public Builder(GraphQLApiState defaults) {
            $ = new GraphQLApiState(Objects.requireNonNull(defaults));
        }

        public Builder additionalAuthenticationProviders(@Nullable Output<List<GraphQLApiAdditionalAuthenticationProviderGetArgs>> additionalAuthenticationProviders) {
            $.additionalAuthenticationProviders = additionalAuthenticationProviders;
            return this;
        }

        public Builder additionalAuthenticationProviders(List<GraphQLApiAdditionalAuthenticationProviderGetArgs> additionalAuthenticationProviders) {
            return additionalAuthenticationProviders(Output.of(additionalAuthenticationProviders));
        }

        public Builder additionalAuthenticationProviders(GraphQLApiAdditionalAuthenticationProviderGetArgs... additionalAuthenticationProviders) {
            return additionalAuthenticationProviders(List.of(additionalAuthenticationProviders));
        }

        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        public Builder authenticationType(@Nullable Output<String> authenticationType) {
            $.authenticationType = authenticationType;
            return this;
        }

        public Builder authenticationType(String authenticationType) {
            return authenticationType(Output.of(authenticationType));
        }

        public Builder lambdaAuthorizerConfig(@Nullable Output<GraphQLApiLambdaAuthorizerConfigGetArgs> lambdaAuthorizerConfig) {
            $.lambdaAuthorizerConfig = lambdaAuthorizerConfig;
            return this;
        }

        public Builder lambdaAuthorizerConfig(GraphQLApiLambdaAuthorizerConfigGetArgs lambdaAuthorizerConfig) {
            return lambdaAuthorizerConfig(Output.of(lambdaAuthorizerConfig));
        }

        public Builder logConfig(@Nullable Output<GraphQLApiLogConfigGetArgs> logConfig) {
            $.logConfig = logConfig;
            return this;
        }

        public Builder logConfig(GraphQLApiLogConfigGetArgs logConfig) {
            return logConfig(Output.of(logConfig));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder openidConnectConfig(@Nullable Output<GraphQLApiOpenidConnectConfigGetArgs> openidConnectConfig) {
            $.openidConnectConfig = openidConnectConfig;
            return this;
        }

        public Builder openidConnectConfig(GraphQLApiOpenidConnectConfigGetArgs openidConnectConfig) {
            return openidConnectConfig(Output.of(openidConnectConfig));
        }

        public Builder schema(@Nullable Output<String> schema) {
            $.schema = schema;
            return this;
        }

        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tagsAll(@Nullable Output<Map<String,String>> tagsAll) {
            $.tagsAll = tagsAll;
            return this;
        }

        public Builder tagsAll(Map<String,String> tagsAll) {
            return tagsAll(Output.of(tagsAll));
        }

        public Builder uris(@Nullable Output<Map<String,String>> uris) {
            $.uris = uris;
            return this;
        }

        public Builder uris(Map<String,String> uris) {
            return uris(Output.of(uris));
        }

        public Builder userPoolConfig(@Nullable Output<GraphQLApiUserPoolConfigGetArgs> userPoolConfig) {
            $.userPoolConfig = userPoolConfig;
            return this;
        }

        public Builder userPoolConfig(GraphQLApiUserPoolConfigGetArgs userPoolConfig) {
            return userPoolConfig(Output.of(userPoolConfig));
        }

        public Builder xrayEnabled(@Nullable Output<Boolean> xrayEnabled) {
            $.xrayEnabled = xrayEnabled;
            return this;
        }

        public Builder xrayEnabled(Boolean xrayEnabled) {
            return xrayEnabled(Output.of(xrayEnabled));
        }

        public GraphQLApiState build() {
            return $;
        }
    }

}
