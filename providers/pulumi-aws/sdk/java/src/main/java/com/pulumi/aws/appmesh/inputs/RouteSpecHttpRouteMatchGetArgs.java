// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appmesh.inputs;

import com.pulumi.aws.appmesh.inputs.RouteSpecHttpRouteMatchHeaderGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouteSpecHttpRouteMatchGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouteSpecHttpRouteMatchGetArgs Empty = new RouteSpecHttpRouteMatchGetArgs();

    /**
     * The client request headers to match on.
     * 
     */
    @Import(name="headers")
    private @Nullable Output<List<RouteSpecHttpRouteMatchHeaderGetArgs>> headers;

    public Optional<Output<List<RouteSpecHttpRouteMatchHeaderGetArgs>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * The client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
     * 
     */
    @Import(name="method")
    private @Nullable Output<String> method;

    public Optional<Output<String>> method() {
        return Optional.ofNullable(this.method);
    }

    /**
     * The value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
     * This parameter must always start with /, which by itself matches all requests to the virtual router service name.
     * 
     */
    @Import(name="prefix", required=true)
    private Output<String> prefix;

    public Output<String> prefix() {
        return this.prefix;
    }

    /**
     * The client request header scheme to match on. Valid values: `http`, `https`.
     * 
     */
    @Import(name="scheme")
    private @Nullable Output<String> scheme;

    public Optional<Output<String>> scheme() {
        return Optional.ofNullable(this.scheme);
    }

    private RouteSpecHttpRouteMatchGetArgs() {}

    private RouteSpecHttpRouteMatchGetArgs(RouteSpecHttpRouteMatchGetArgs $) {
        this.headers = $.headers;
        this.method = $.method;
        this.prefix = $.prefix;
        this.scheme = $.scheme;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteSpecHttpRouteMatchGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteSpecHttpRouteMatchGetArgs $;

        public Builder() {
            $ = new RouteSpecHttpRouteMatchGetArgs();
        }

        public Builder(RouteSpecHttpRouteMatchGetArgs defaults) {
            $ = new RouteSpecHttpRouteMatchGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder headers(@Nullable Output<List<RouteSpecHttpRouteMatchHeaderGetArgs>> headers) {
            $.headers = headers;
            return this;
        }

        public Builder headers(List<RouteSpecHttpRouteMatchHeaderGetArgs> headers) {
            return headers(Output.of(headers));
        }

        public Builder headers(RouteSpecHttpRouteMatchHeaderGetArgs... headers) {
            return headers(List.of(headers));
        }

        public Builder method(@Nullable Output<String> method) {
            $.method = method;
            return this;
        }

        public Builder method(String method) {
            return method(Output.of(method));
        }

        public Builder prefix(Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        public Builder scheme(@Nullable Output<String> scheme) {
            $.scheme = scheme;
            return this;
        }

        public Builder scheme(String scheme) {
            return scheme(Output.of(scheme));
        }

        public RouteSpecHttpRouteMatchGetArgs build() {
            $.prefix = Objects.requireNonNull($.prefix, "expected parameter 'prefix' to be non-null");
            return $;
        }
    }

}
