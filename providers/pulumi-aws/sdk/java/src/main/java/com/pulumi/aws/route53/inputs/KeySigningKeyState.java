// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.route53.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KeySigningKeyState extends com.pulumi.resources.ResourceArgs {

    public static final KeySigningKeyState Empty = new KeySigningKeyState();

    /**
     * A string used to represent the delegation signer digest algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.3](https://tools.ietf.org/html/rfc8624#section-3.3).
     * 
     */
    @Import(name="digestAlgorithmMnemonic")
    private @Nullable Output<String> digestAlgorithmMnemonic;

    public Optional<Output<String>> digestAlgorithmMnemonic() {
        return Optional.ofNullable(this.digestAlgorithmMnemonic);
    }

    /**
     * An integer used to represent the delegation signer digest algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.3](https://tools.ietf.org/html/rfc8624#section-3.3).
     * 
     */
    @Import(name="digestAlgorithmType")
    private @Nullable Output<Integer> digestAlgorithmType;

    public Optional<Output<Integer>> digestAlgorithmType() {
        return Optional.ofNullable(this.digestAlgorithmType);
    }

    /**
     * A cryptographic digest of a DNSKEY resource record (RR). DNSKEY records are used to publish the public key that resolvers can use to verify DNSSEC signatures that are used to secure certain kinds of information provided by the DNS system.
     * 
     */
    @Import(name="digestValue")
    private @Nullable Output<String> digestValue;

    public Optional<Output<String>> digestValue() {
        return Optional.ofNullable(this.digestValue);
    }

    /**
     * A string that represents a DNSKEY record.
     * 
     */
    @Import(name="dnskeyRecord")
    private @Nullable Output<String> dnskeyRecord;

    public Optional<Output<String>> dnskeyRecord() {
        return Optional.ofNullable(this.dnskeyRecord);
    }

    /**
     * A string that represents a delegation signer (DS) record.
     * 
     */
    @Import(name="dsRecord")
    private @Nullable Output<String> dsRecord;

    public Optional<Output<String>> dsRecord() {
        return Optional.ofNullable(this.dsRecord);
    }

    /**
     * An integer that specifies how the key is used. For key-signing key (KSK), this value is always 257.
     * 
     */
    @Import(name="flag")
    private @Nullable Output<Integer> flag;

    public Optional<Output<Integer>> flag() {
        return Optional.ofNullable(this.flag);
    }

    /**
     * Identifier of the Route 53 Hosted Zone.
     * 
     */
    @Import(name="hostedZoneId")
    private @Nullable Output<String> hostedZoneId;

    public Optional<Output<String>> hostedZoneId() {
        return Optional.ofNullable(this.hostedZoneId);
    }

    /**
     * Amazon Resource Name (ARN) of the Key Management Service (KMS) Key. This must be unique for each key-signing key (KSK) in a single hosted zone. This key must be in the `us-east-1` Region and meet certain requirements, which are described in the [Route 53 Developer Guide](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec-cmk-requirements.html) and [Route 53 API Reference](https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateKeySigningKey.html).
     * 
     */
    @Import(name="keyManagementServiceArn")
    private @Nullable Output<String> keyManagementServiceArn;

    public Optional<Output<String>> keyManagementServiceArn() {
        return Optional.ofNullable(this.keyManagementServiceArn);
    }

    /**
     * An integer used to identify the DNSSEC record for the domain name. The process used to calculate the value is described in [RFC-4034 Appendix B](https://tools.ietf.org/rfc/rfc4034.txt).
     * 
     */
    @Import(name="keyTag")
    private @Nullable Output<Integer> keyTag;

    public Optional<Output<Integer>> keyTag() {
        return Optional.ofNullable(this.keyTag);
    }

    /**
     * Name of the key-signing key (KSK). Must be unique for each key-singing key in the same hosted zone.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The public key, represented as a Base64 encoding, as required by [RFC-4034 Page 5](https://tools.ietf.org/rfc/rfc4034.txt).
     * 
     */
    @Import(name="publicKey")
    private @Nullable Output<String> publicKey;

    public Optional<Output<String>> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }

    /**
     * A string used to represent the signing algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.1](https://tools.ietf.org/html/rfc8624#section-3.1).
     * 
     */
    @Import(name="signingAlgorithmMnemonic")
    private @Nullable Output<String> signingAlgorithmMnemonic;

    public Optional<Output<String>> signingAlgorithmMnemonic() {
        return Optional.ofNullable(this.signingAlgorithmMnemonic);
    }

    /**
     * An integer used to represent the signing algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.1](https://tools.ietf.org/html/rfc8624#section-3.1).
     * 
     */
    @Import(name="signingAlgorithmType")
    private @Nullable Output<Integer> signingAlgorithmType;

    public Optional<Output<Integer>> signingAlgorithmType() {
        return Optional.ofNullable(this.signingAlgorithmType);
    }

    /**
     * Status of the key-signing key (KSK). Valid values: `ACTIVE`, `INACTIVE`. Defaults to `ACTIVE`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private KeySigningKeyState() {}

    private KeySigningKeyState(KeySigningKeyState $) {
        this.digestAlgorithmMnemonic = $.digestAlgorithmMnemonic;
        this.digestAlgorithmType = $.digestAlgorithmType;
        this.digestValue = $.digestValue;
        this.dnskeyRecord = $.dnskeyRecord;
        this.dsRecord = $.dsRecord;
        this.flag = $.flag;
        this.hostedZoneId = $.hostedZoneId;
        this.keyManagementServiceArn = $.keyManagementServiceArn;
        this.keyTag = $.keyTag;
        this.name = $.name;
        this.publicKey = $.publicKey;
        this.signingAlgorithmMnemonic = $.signingAlgorithmMnemonic;
        this.signingAlgorithmType = $.signingAlgorithmType;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeySigningKeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeySigningKeyState $;

        public Builder() {
            $ = new KeySigningKeyState();
        }

        public Builder(KeySigningKeyState defaults) {
            $ = new KeySigningKeyState(Objects.requireNonNull(defaults));
        }

        public Builder digestAlgorithmMnemonic(@Nullable Output<String> digestAlgorithmMnemonic) {
            $.digestAlgorithmMnemonic = digestAlgorithmMnemonic;
            return this;
        }

        public Builder digestAlgorithmMnemonic(String digestAlgorithmMnemonic) {
            return digestAlgorithmMnemonic(Output.of(digestAlgorithmMnemonic));
        }

        public Builder digestAlgorithmType(@Nullable Output<Integer> digestAlgorithmType) {
            $.digestAlgorithmType = digestAlgorithmType;
            return this;
        }

        public Builder digestAlgorithmType(Integer digestAlgorithmType) {
            return digestAlgorithmType(Output.of(digestAlgorithmType));
        }

        public Builder digestValue(@Nullable Output<String> digestValue) {
            $.digestValue = digestValue;
            return this;
        }

        public Builder digestValue(String digestValue) {
            return digestValue(Output.of(digestValue));
        }

        public Builder dnskeyRecord(@Nullable Output<String> dnskeyRecord) {
            $.dnskeyRecord = dnskeyRecord;
            return this;
        }

        public Builder dnskeyRecord(String dnskeyRecord) {
            return dnskeyRecord(Output.of(dnskeyRecord));
        }

        public Builder dsRecord(@Nullable Output<String> dsRecord) {
            $.dsRecord = dsRecord;
            return this;
        }

        public Builder dsRecord(String dsRecord) {
            return dsRecord(Output.of(dsRecord));
        }

        public Builder flag(@Nullable Output<Integer> flag) {
            $.flag = flag;
            return this;
        }

        public Builder flag(Integer flag) {
            return flag(Output.of(flag));
        }

        public Builder hostedZoneId(@Nullable Output<String> hostedZoneId) {
            $.hostedZoneId = hostedZoneId;
            return this;
        }

        public Builder hostedZoneId(String hostedZoneId) {
            return hostedZoneId(Output.of(hostedZoneId));
        }

        public Builder keyManagementServiceArn(@Nullable Output<String> keyManagementServiceArn) {
            $.keyManagementServiceArn = keyManagementServiceArn;
            return this;
        }

        public Builder keyManagementServiceArn(String keyManagementServiceArn) {
            return keyManagementServiceArn(Output.of(keyManagementServiceArn));
        }

        public Builder keyTag(@Nullable Output<Integer> keyTag) {
            $.keyTag = keyTag;
            return this;
        }

        public Builder keyTag(Integer keyTag) {
            return keyTag(Output.of(keyTag));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder publicKey(@Nullable Output<String> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        public Builder publicKey(String publicKey) {
            return publicKey(Output.of(publicKey));
        }

        public Builder signingAlgorithmMnemonic(@Nullable Output<String> signingAlgorithmMnemonic) {
            $.signingAlgorithmMnemonic = signingAlgorithmMnemonic;
            return this;
        }

        public Builder signingAlgorithmMnemonic(String signingAlgorithmMnemonic) {
            return signingAlgorithmMnemonic(Output.of(signingAlgorithmMnemonic));
        }

        public Builder signingAlgorithmType(@Nullable Output<Integer> signingAlgorithmType) {
            $.signingAlgorithmType = signingAlgorithmType;
            return this;
        }

        public Builder signingAlgorithmType(Integer signingAlgorithmType) {
            return signingAlgorithmType(Output.of(signingAlgorithmType));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public KeySigningKeyState build() {
            return $;
        }
    }

}
