// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appmesh.inputs;

import com.pulumi.aws.appmesh.inputs.VirtualNodeSpecListenerTimeoutHttp2IdleGetArgs;
import com.pulumi.aws.appmesh.inputs.VirtualNodeSpecListenerTimeoutHttp2PerRequestGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualNodeSpecListenerTimeoutHttp2GetArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualNodeSpecListenerTimeoutHttp2GetArgs Empty = new VirtualNodeSpecListenerTimeoutHttp2GetArgs();

    /**
     * The idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
     * 
     */
    @Import(name="idle")
    private @Nullable Output<VirtualNodeSpecListenerTimeoutHttp2IdleGetArgs> idle;

    /**
     * @return The idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
     * 
     */
    public Optional<Output<VirtualNodeSpecListenerTimeoutHttp2IdleGetArgs>> idle() {
        return Optional.ofNullable(this.idle);
    }

    /**
     * The per request timeout.
     * 
     */
    @Import(name="perRequest")
    private @Nullable Output<VirtualNodeSpecListenerTimeoutHttp2PerRequestGetArgs> perRequest;

    /**
     * @return The per request timeout.
     * 
     */
    public Optional<Output<VirtualNodeSpecListenerTimeoutHttp2PerRequestGetArgs>> perRequest() {
        return Optional.ofNullable(this.perRequest);
    }

    private VirtualNodeSpecListenerTimeoutHttp2GetArgs() {}

    private VirtualNodeSpecListenerTimeoutHttp2GetArgs(VirtualNodeSpecListenerTimeoutHttp2GetArgs $) {
        this.idle = $.idle;
        this.perRequest = $.perRequest;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualNodeSpecListenerTimeoutHttp2GetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualNodeSpecListenerTimeoutHttp2GetArgs $;

        public Builder() {
            $ = new VirtualNodeSpecListenerTimeoutHttp2GetArgs();
        }

        public Builder(VirtualNodeSpecListenerTimeoutHttp2GetArgs defaults) {
            $ = new VirtualNodeSpecListenerTimeoutHttp2GetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param idle The idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
         * 
         * @return builder
         * 
         */
        public Builder idle(@Nullable Output<VirtualNodeSpecListenerTimeoutHttp2IdleGetArgs> idle) {
            $.idle = idle;
            return this;
        }

        /**
         * @param idle The idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
         * 
         * @return builder
         * 
         */
        public Builder idle(VirtualNodeSpecListenerTimeoutHttp2IdleGetArgs idle) {
            return idle(Output.of(idle));
        }

        /**
         * @param perRequest The per request timeout.
         * 
         * @return builder
         * 
         */
        public Builder perRequest(@Nullable Output<VirtualNodeSpecListenerTimeoutHttp2PerRequestGetArgs> perRequest) {
            $.perRequest = perRequest;
            return this;
        }

        /**
         * @param perRequest The per request timeout.
         * 
         * @return builder
         * 
         */
        public Builder perRequest(VirtualNodeSpecListenerTimeoutHttp2PerRequestGetArgs perRequest) {
            return perRequest(Output.of(perRequest));
        }

        public VirtualNodeSpecListenerTimeoutHttp2GetArgs build() {
            return $;
        }
    }

}
