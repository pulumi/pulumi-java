// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetBucketObjectsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetBucketObjectsArgs Empty = new GetBucketObjectsArgs();

    /**
     * Lists object keys in this S3 bucket. Alternatively, an [S3 access point](https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html) ARN can be specified
     * 
     */
    @Import(name="bucket", required=true)
      private final String bucket;

    public String bucket() {
        return this.bucket;
    }

    /**
     * A character used to group keys (Default: none)
     * 
     */
    @Import(name="delimiter")
      private final @Nullable String delimiter;

    public Optional<String> delimiter() {
        return this.delimiter == null ? Optional.empty() : Optional.ofNullable(this.delimiter);
    }

    /**
     * Encodes keys using this method (Default: none; besides none, only "url" can be used)
     * 
     */
    @Import(name="encodingType")
      private final @Nullable String encodingType;

    public Optional<String> encodingType() {
        return this.encodingType == null ? Optional.empty() : Optional.ofNullable(this.encodingType);
    }

    /**
     * Boolean specifying whether to populate the owner list (Default: false)
     * 
     */
    @Import(name="fetchOwner")
      private final @Nullable Boolean fetchOwner;

    public Optional<Boolean> fetchOwner() {
        return this.fetchOwner == null ? Optional.empty() : Optional.ofNullable(this.fetchOwner);
    }

    /**
     * Maximum object keys to return (Default: 1000)
     * 
     */
    @Import(name="maxKeys")
      private final @Nullable Integer maxKeys;

    public Optional<Integer> maxKeys() {
        return this.maxKeys == null ? Optional.empty() : Optional.ofNullable(this.maxKeys);
    }

    /**
     * Limits results to object keys with this prefix (Default: none)
     * 
     */
    @Import(name="prefix")
      private final @Nullable String prefix;

    public Optional<String> prefix() {
        return this.prefix == null ? Optional.empty() : Optional.ofNullable(this.prefix);
    }

    /**
     * Returns key names lexicographically after a specific object key in your bucket (Default: none; S3 lists object keys in UTF-8 character encoding in lexicographical order)
     * 
     */
    @Import(name="startAfter")
      private final @Nullable String startAfter;

    public Optional<String> startAfter() {
        return this.startAfter == null ? Optional.empty() : Optional.ofNullable(this.startAfter);
    }

    public GetBucketObjectsArgs(
        String bucket,
        @Nullable String delimiter,
        @Nullable String encodingType,
        @Nullable Boolean fetchOwner,
        @Nullable Integer maxKeys,
        @Nullable String prefix,
        @Nullable String startAfter) {
        this.bucket = Objects.requireNonNull(bucket, "expected parameter 'bucket' to be non-null");
        this.delimiter = delimiter;
        this.encodingType = encodingType;
        this.fetchOwner = fetchOwner;
        this.maxKeys = maxKeys;
        this.prefix = prefix;
        this.startAfter = startAfter;
    }

    private GetBucketObjectsArgs() {
        this.bucket = null;
        this.delimiter = null;
        this.encodingType = null;
        this.fetchOwner = null;
        this.maxKeys = null;
        this.prefix = null;
        this.startAfter = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBucketObjectsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String bucket;
        private @Nullable String delimiter;
        private @Nullable String encodingType;
        private @Nullable Boolean fetchOwner;
        private @Nullable Integer maxKeys;
        private @Nullable String prefix;
        private @Nullable String startAfter;

        public Builder() {
    	      // Empty
        }

        public Builder(GetBucketObjectsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.delimiter = defaults.delimiter;
    	      this.encodingType = defaults.encodingType;
    	      this.fetchOwner = defaults.fetchOwner;
    	      this.maxKeys = defaults.maxKeys;
    	      this.prefix = defaults.prefix;
    	      this.startAfter = defaults.startAfter;
        }

        public Builder bucket(String bucket) {
            this.bucket = Objects.requireNonNull(bucket);
            return this;
        }
        public Builder delimiter(@Nullable String delimiter) {
            this.delimiter = delimiter;
            return this;
        }
        public Builder encodingType(@Nullable String encodingType) {
            this.encodingType = encodingType;
            return this;
        }
        public Builder fetchOwner(@Nullable Boolean fetchOwner) {
            this.fetchOwner = fetchOwner;
            return this;
        }
        public Builder maxKeys(@Nullable Integer maxKeys) {
            this.maxKeys = maxKeys;
            return this;
        }
        public Builder prefix(@Nullable String prefix) {
            this.prefix = prefix;
            return this;
        }
        public Builder startAfter(@Nullable String startAfter) {
            this.startAfter = startAfter;
            return this;
        }        public GetBucketObjectsArgs build() {
            return new GetBucketObjectsArgs(bucket, delimiter, encodingType, fetchOwner, maxKeys, prefix, startAfter);
        }
    }
}
