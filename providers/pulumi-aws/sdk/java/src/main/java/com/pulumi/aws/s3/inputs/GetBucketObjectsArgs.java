// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.s3.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetBucketObjectsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetBucketObjectsArgs Empty = new GetBucketObjectsArgs();

    /**
     * Lists object keys in this S3 bucket. Alternatively, an [S3 access point](https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html) ARN can be specified
     * 
     * @deprecated
     * Use the aws_s3_objects data source instead
     * 
     */
    @Deprecated /* Use the aws_s3_objects data source instead */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return Lists object keys in this S3 bucket. Alternatively, an [S3 access point](https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html) ARN can be specified
     * 
     * @deprecated
     * Use the aws_s3_objects data source instead
     * 
     */
    @Deprecated /* Use the aws_s3_objects data source instead */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * A character used to group keys (Default: none)
     * 
     */
    @Import(name="delimiter")
    private Output</* @Nullable */ String> delimiter;

    /**
     * @return A character used to group keys (Default: none)
     * 
     */
    public Output</* @Nullable */ String> delimiter() {
        return this.delimiter;
    }

    /**
     * Encodes keys using this method (Default: none; besides none, only &#34;url&#34; can be used)
     * 
     */
    @Import(name="encodingType")
    private Output</* @Nullable */ String> encodingType;

    /**
     * @return Encodes keys using this method (Default: none; besides none, only &#34;url&#34; can be used)
     * 
     */
    public Output</* @Nullable */ String> encodingType() {
        return this.encodingType;
    }

    /**
     * Boolean specifying whether to populate the owner list (Default: false)
     * 
     */
    @Import(name="fetchOwner")
    private Output</* @Nullable */ Boolean> fetchOwner;

    /**
     * @return Boolean specifying whether to populate the owner list (Default: false)
     * 
     */
    public Output</* @Nullable */ Boolean> fetchOwner() {
        return this.fetchOwner;
    }

    /**
     * Maximum object keys to return (Default: 1000)
     * 
     */
    @Import(name="maxKeys")
    private Output</* @Nullable */ Integer> maxKeys;

    /**
     * @return Maximum object keys to return (Default: 1000)
     * 
     */
    public Output</* @Nullable */ Integer> maxKeys() {
        return this.maxKeys;
    }

    /**
     * Limits results to object keys with this prefix (Default: none)
     * 
     */
    @Import(name="prefix")
    private Output</* @Nullable */ String> prefix;

    /**
     * @return Limits results to object keys with this prefix (Default: none)
     * 
     */
    public Output</* @Nullable */ String> prefix() {
        return this.prefix;
    }

    /**
     * Returns key names lexicographically after a specific object key in your bucket (Default: none; S3 lists object keys in UTF-8 character encoding in lexicographical order)
     * 
     */
    @Import(name="startAfter")
    private Output</* @Nullable */ String> startAfter;

    /**
     * @return Returns key names lexicographically after a specific object key in your bucket (Default: none; S3 lists object keys in UTF-8 character encoding in lexicographical order)
     * 
     */
    public Output</* @Nullable */ String> startAfter() {
        return this.startAfter;
    }

    private GetBucketObjectsArgs() {}

    private GetBucketObjectsArgs(GetBucketObjectsArgs $) {
        this.bucket = $.bucket;
        this.delimiter = $.delimiter;
        this.encodingType = $.encodingType;
        this.fetchOwner = $.fetchOwner;
        this.maxKeys = $.maxKeys;
        this.prefix = $.prefix;
        this.startAfter = $.startAfter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetBucketObjectsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetBucketObjectsArgs $;

        public Builder() {
            $ = new GetBucketObjectsArgs();
        }

        public Builder(GetBucketObjectsArgs defaults) {
            $ = new GetBucketObjectsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket Lists object keys in this S3 bucket. Alternatively, an [S3 access point](https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html) ARN can be specified
         * 
         * @return builder
         * 
         * @deprecated
         * Use the aws_s3_objects data source instead
         * 
         */
        @Deprecated /* Use the aws_s3_objects data source instead */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket Lists object keys in this S3 bucket. Alternatively, an [S3 access point](https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html) ARN can be specified
         * 
         * @return builder
         * 
         * @deprecated
         * Use the aws_s3_objects data source instead
         * 
         */
        @Deprecated /* Use the aws_s3_objects data source instead */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param delimiter A character used to group keys (Default: none)
         * 
         * @return builder
         * 
         */
        public Builder delimiter(Output</* @Nullable */ String> delimiter) {
            $.delimiter = delimiter;
            return this;
        }

        /**
         * @param delimiter A character used to group keys (Default: none)
         * 
         * @return builder
         * 
         */
        public Builder delimiter(@Nullable String delimiter) {
            return delimiter(Output.of(delimiter));
        }

        /**
         * @param encodingType Encodes keys using this method (Default: none; besides none, only &#34;url&#34; can be used)
         * 
         * @return builder
         * 
         */
        public Builder encodingType(Output</* @Nullable */ String> encodingType) {
            $.encodingType = encodingType;
            return this;
        }

        /**
         * @param encodingType Encodes keys using this method (Default: none; besides none, only &#34;url&#34; can be used)
         * 
         * @return builder
         * 
         */
        public Builder encodingType(@Nullable String encodingType) {
            return encodingType(Output.of(encodingType));
        }

        /**
         * @param fetchOwner Boolean specifying whether to populate the owner list (Default: false)
         * 
         * @return builder
         * 
         */
        public Builder fetchOwner(Output</* @Nullable */ Boolean> fetchOwner) {
            $.fetchOwner = fetchOwner;
            return this;
        }

        /**
         * @param fetchOwner Boolean specifying whether to populate the owner list (Default: false)
         * 
         * @return builder
         * 
         */
        public Builder fetchOwner(@Nullable Boolean fetchOwner) {
            return fetchOwner(Output.of(fetchOwner));
        }

        /**
         * @param maxKeys Maximum object keys to return (Default: 1000)
         * 
         * @return builder
         * 
         */
        public Builder maxKeys(Output</* @Nullable */ Integer> maxKeys) {
            $.maxKeys = maxKeys;
            return this;
        }

        /**
         * @param maxKeys Maximum object keys to return (Default: 1000)
         * 
         * @return builder
         * 
         */
        public Builder maxKeys(@Nullable Integer maxKeys) {
            return maxKeys(Output.of(maxKeys));
        }

        /**
         * @param prefix Limits results to object keys with this prefix (Default: none)
         * 
         * @return builder
         * 
         */
        public Builder prefix(Output</* @Nullable */ String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix Limits results to object keys with this prefix (Default: none)
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable String prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param startAfter Returns key names lexicographically after a specific object key in your bucket (Default: none; S3 lists object keys in UTF-8 character encoding in lexicographical order)
         * 
         * @return builder
         * 
         */
        public Builder startAfter(Output</* @Nullable */ String> startAfter) {
            $.startAfter = startAfter;
            return this;
        }

        /**
         * @param startAfter Returns key names lexicographically after a specific object key in your bucket (Default: none; S3 lists object keys in UTF-8 character encoding in lexicographical order)
         * 
         * @return builder
         * 
         */
        public Builder startAfter(@Nullable String startAfter) {
            return startAfter(Output.of(startAfter));
        }

        public GetBucketObjectsArgs build() {
            $.bucket = Objects.requireNonNull($.bucket, "expected parameter 'bucket' to be non-null");
            return $;
        }
    }

}
