// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.codebuild.inputs;

import com.pulumi.aws.codebuild.inputs.ProjectBuildBatchConfigRestrictionsGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectBuildBatchConfigGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectBuildBatchConfigGetArgs Empty = new ProjectBuildBatchConfigGetArgs();

    /**
     * Specifies if the build artifacts for the batch build should be combined into a single artifact location.
     * 
     */
    @Import(name="combineArtifacts")
    private @Nullable Output<Boolean> combineArtifacts;

    public Optional<Output<Boolean>> combineArtifacts() {
        return Optional.ofNullable(this.combineArtifacts);
    }

    /**
     * Specifies the restrictions for the batch build.
     * 
     */
    @Import(name="restrictions")
    private @Nullable Output<ProjectBuildBatchConfigRestrictionsGetArgs> restrictions;

    public Optional<Output<ProjectBuildBatchConfigRestrictionsGetArgs>> restrictions() {
        return Optional.ofNullable(this.restrictions);
    }

    /**
     * Specifies the service role ARN for the batch build project.
     * 
     */
    @Import(name="serviceRole", required=true)
    private Output<String> serviceRole;

    public Output<String> serviceRole() {
        return this.serviceRole;
    }

    /**
     * Specifies the maximum amount of time, in minutes, that the batch build must be completed in.
     * 
     */
    @Import(name="timeoutInMins")
    private @Nullable Output<Integer> timeoutInMins;

    public Optional<Output<Integer>> timeoutInMins() {
        return Optional.ofNullable(this.timeoutInMins);
    }

    private ProjectBuildBatchConfigGetArgs() {}

    private ProjectBuildBatchConfigGetArgs(ProjectBuildBatchConfigGetArgs $) {
        this.combineArtifacts = $.combineArtifacts;
        this.restrictions = $.restrictions;
        this.serviceRole = $.serviceRole;
        this.timeoutInMins = $.timeoutInMins;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectBuildBatchConfigGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectBuildBatchConfigGetArgs $;

        public Builder() {
            $ = new ProjectBuildBatchConfigGetArgs();
        }

        public Builder(ProjectBuildBatchConfigGetArgs defaults) {
            $ = new ProjectBuildBatchConfigGetArgs(Objects.requireNonNull(defaults));
        }

        public Builder combineArtifacts(@Nullable Output<Boolean> combineArtifacts) {
            $.combineArtifacts = combineArtifacts;
            return this;
        }

        public Builder combineArtifacts(Boolean combineArtifacts) {
            return combineArtifacts(Output.of(combineArtifacts));
        }

        public Builder restrictions(@Nullable Output<ProjectBuildBatchConfigRestrictionsGetArgs> restrictions) {
            $.restrictions = restrictions;
            return this;
        }

        public Builder restrictions(ProjectBuildBatchConfigRestrictionsGetArgs restrictions) {
            return restrictions(Output.of(restrictions));
        }

        public Builder serviceRole(Output<String> serviceRole) {
            $.serviceRole = serviceRole;
            return this;
        }

        public Builder serviceRole(String serviceRole) {
            return serviceRole(Output.of(serviceRole));
        }

        public Builder timeoutInMins(@Nullable Output<Integer> timeoutInMins) {
            $.timeoutInMins = timeoutInMins;
            return this;
        }

        public Builder timeoutInMins(Integer timeoutInMins) {
            return timeoutInMins(Output.of(timeoutInMins));
        }

        public ProjectBuildBatchConfigGetArgs build() {
            $.serviceRole = Objects.requireNonNull($.serviceRole, "expected parameter 'serviceRole' to be non-null");
            return $;
        }
    }

}
