// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.directoryservice.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetDirectoryConnectSetting extends com.pulumi.resources.InvokeArgs {

    public static final GetDirectoryConnectSetting Empty = new GetDirectoryConnectSetting();

    @Import(name="availabilityZones", required=true)
    private List<String> availabilityZones;

    public List<String> availabilityZones() {
        return this.availabilityZones;
    }

    /**
     * The IP addresses of the AD Connector servers.
     * 
     */
    @Import(name="connectIps", required=true)
    private List<String> connectIps;

    public List<String> connectIps() {
        return this.connectIps;
    }

    /**
     * The DNS IP addresses of the domain to connect to.
     * 
     */
    @Import(name="customerDnsIps", required=true)
    private List<String> customerDnsIps;

    public List<String> customerDnsIps() {
        return this.customerDnsIps;
    }

    /**
     * The username corresponding to the password provided.
     * 
     */
    @Import(name="customerUsername", required=true)
    private String customerUsername;

    public String customerUsername() {
        return this.customerUsername;
    }

    /**
     * The identifiers of the subnets for the connector servers (2 subnets in 2 different AZs).
     * 
     */
    @Import(name="subnetIds", required=true)
    private List<String> subnetIds;

    public List<String> subnetIds() {
        return this.subnetIds;
    }

    /**
     * The ID of the VPC that the connector is in.
     * 
     */
    @Import(name="vpcId", required=true)
    private String vpcId;

    public String vpcId() {
        return this.vpcId;
    }

    private GetDirectoryConnectSetting() {}

    private GetDirectoryConnectSetting(GetDirectoryConnectSetting $) {
        this.availabilityZones = $.availabilityZones;
        this.connectIps = $.connectIps;
        this.customerDnsIps = $.customerDnsIps;
        this.customerUsername = $.customerUsername;
        this.subnetIds = $.subnetIds;
        this.vpcId = $.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDirectoryConnectSetting defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDirectoryConnectSetting $;

        public Builder() {
            $ = new GetDirectoryConnectSetting();
        }

        public Builder(GetDirectoryConnectSetting defaults) {
            $ = new GetDirectoryConnectSetting(Objects.requireNonNull(defaults));
        }

        public Builder availabilityZones(List<String> availabilityZones) {
            $.availabilityZones = availabilityZones;
            return this;
        }

        public Builder availabilityZones(String... availabilityZones) {
            return availabilityZones(List.of(availabilityZones));
        }

        public Builder connectIps(List<String> connectIps) {
            $.connectIps = connectIps;
            return this;
        }

        public Builder connectIps(String... connectIps) {
            return connectIps(List.of(connectIps));
        }

        public Builder customerDnsIps(List<String> customerDnsIps) {
            $.customerDnsIps = customerDnsIps;
            return this;
        }

        public Builder customerDnsIps(String... customerDnsIps) {
            return customerDnsIps(List.of(customerDnsIps));
        }

        public Builder customerUsername(String customerUsername) {
            $.customerUsername = customerUsername;
            return this;
        }

        public Builder subnetIds(List<String> subnetIds) {
            $.subnetIds = subnetIds;
            return this;
        }

        public Builder subnetIds(String... subnetIds) {
            return subnetIds(List.of(subnetIds));
        }

        public Builder vpcId(String vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        public GetDirectoryConnectSetting build() {
            $.availabilityZones = Objects.requireNonNull($.availabilityZones, "expected parameter 'availabilityZones' to be non-null");
            $.connectIps = Objects.requireNonNull($.connectIps, "expected parameter 'connectIps' to be non-null");
            $.customerDnsIps = Objects.requireNonNull($.customerDnsIps, "expected parameter 'customerDnsIps' to be non-null");
            $.customerUsername = Objects.requireNonNull($.customerUsername, "expected parameter 'customerUsername' to be non-null");
            $.subnetIds = Objects.requireNonNull($.subnetIds, "expected parameter 'subnetIds' to be non-null");
            $.vpcId = Objects.requireNonNull($.vpcId, "expected parameter 'vpcId' to be non-null");
            return $;
        }
    }

}
