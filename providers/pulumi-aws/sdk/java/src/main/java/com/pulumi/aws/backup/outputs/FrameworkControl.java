// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.backup.outputs;

import com.pulumi.aws.backup.outputs.FrameworkControlInputParameter;
import com.pulumi.aws.backup.outputs.FrameworkControlScope;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class FrameworkControl {
    /**
     * @return One or more input parameter blocks. An example of a control with two parameters is: &#34;backup plan frequency is at least daily and the retention period is at least 1 year&#34;. The first parameter is daily. The second parameter is 1 year. Detailed below.
     * 
     */
    private final @Nullable List<FrameworkControlInputParameter> inputParameters;
    /**
     * @return The name of a parameter, for example, BackupPlanFrequency.
     * 
     */
    private final String name;
    /**
     * @return The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans. Detailed below.
     * 
     */
    private final @Nullable FrameworkControlScope scope;

    @CustomType.Constructor
    private FrameworkControl(
        @CustomType.Parameter("inputParameters") @Nullable List<FrameworkControlInputParameter> inputParameters,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("scope") @Nullable FrameworkControlScope scope) {
        this.inputParameters = inputParameters;
        this.name = name;
        this.scope = scope;
    }

    /**
     * @return One or more input parameter blocks. An example of a control with two parameters is: &#34;backup plan frequency is at least daily and the retention period is at least 1 year&#34;. The first parameter is daily. The second parameter is 1 year. Detailed below.
     * 
     */
    public List<FrameworkControlInputParameter> inputParameters() {
        return this.inputParameters == null ? List.of() : this.inputParameters;
    }
    /**
     * @return The name of a parameter, for example, BackupPlanFrequency.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The scope of a control. The control scope defines what the control will evaluate. Three examples of control scopes are: a specific backup plan, all backup plans with a specific tag, or all backup plans. Detailed below.
     * 
     */
    public Optional<FrameworkControlScope> scope() {
        return Optional.ofNullable(this.scope);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FrameworkControl defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<FrameworkControlInputParameter> inputParameters;
        private String name;
        private @Nullable FrameworkControlScope scope;

        public Builder() {
    	      // Empty
        }

        public Builder(FrameworkControl defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.inputParameters = defaults.inputParameters;
    	      this.name = defaults.name;
    	      this.scope = defaults.scope;
        }

        public Builder inputParameters(@Nullable List<FrameworkControlInputParameter> inputParameters) {
            this.inputParameters = inputParameters;
            return this;
        }
        public Builder inputParameters(FrameworkControlInputParameter... inputParameters) {
            return inputParameters(List.of(inputParameters));
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder scope(@Nullable FrameworkControlScope scope) {
            this.scope = scope;
            return this;
        }        public FrameworkControl build() {
            return new FrameworkControl(inputParameters, name, scope);
        }
    }
}
