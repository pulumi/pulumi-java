// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.workspaces.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetDirectoryWorkspaceAccessProperty extends com.pulumi.resources.InvokeArgs {

    public static final GetDirectoryWorkspaceAccessProperty Empty = new GetDirectoryWorkspaceAccessProperty();

    /**
     * (Optional) Indicates whether users can use Android devices to access their WorkSpaces.
     * 
     */
    @Import(name="deviceTypeAndroid", required=true)
    private String deviceTypeAndroid;

    public String deviceTypeAndroid() {
        return this.deviceTypeAndroid;
    }

    /**
     * (Optional) Indicates whether users can use Chromebooks to access their WorkSpaces.
     * 
     */
    @Import(name="deviceTypeChromeos", required=true)
    private String deviceTypeChromeos;

    public String deviceTypeChromeos() {
        return this.deviceTypeChromeos;
    }

    /**
     * (Optional) Indicates whether users can use iOS devices to access their WorkSpaces.
     * 
     */
    @Import(name="deviceTypeIos", required=true)
    private String deviceTypeIos;

    public String deviceTypeIos() {
        return this.deviceTypeIos;
    }

    /**
     * (Optional) Indicates whether users can use Linux clients to access their WorkSpaces.
     * 
     */
    @Import(name="deviceTypeLinux", required=true)
    private String deviceTypeLinux;

    public String deviceTypeLinux() {
        return this.deviceTypeLinux;
    }

    /**
     * (Optional) Indicates whether users can use macOS clients to access their WorkSpaces.
     * 
     */
    @Import(name="deviceTypeOsx", required=true)
    private String deviceTypeOsx;

    public String deviceTypeOsx() {
        return this.deviceTypeOsx;
    }

    /**
     * (Optional) Indicates whether users can access their WorkSpaces through a web browser.
     * 
     */
    @Import(name="deviceTypeWeb", required=true)
    private String deviceTypeWeb;

    public String deviceTypeWeb() {
        return this.deviceTypeWeb;
    }

    /**
     * (Optional) Indicates whether users can use Windows clients to access their WorkSpaces.
     * 
     */
    @Import(name="deviceTypeWindows", required=true)
    private String deviceTypeWindows;

    public String deviceTypeWindows() {
        return this.deviceTypeWindows;
    }

    /**
     * (Optional) Indicates whether users can use zero client devices to access their WorkSpaces.
     * 
     */
    @Import(name="deviceTypeZeroclient", required=true)
    private String deviceTypeZeroclient;

    public String deviceTypeZeroclient() {
        return this.deviceTypeZeroclient;
    }

    private GetDirectoryWorkspaceAccessProperty() {}

    private GetDirectoryWorkspaceAccessProperty(GetDirectoryWorkspaceAccessProperty $) {
        this.deviceTypeAndroid = $.deviceTypeAndroid;
        this.deviceTypeChromeos = $.deviceTypeChromeos;
        this.deviceTypeIos = $.deviceTypeIos;
        this.deviceTypeLinux = $.deviceTypeLinux;
        this.deviceTypeOsx = $.deviceTypeOsx;
        this.deviceTypeWeb = $.deviceTypeWeb;
        this.deviceTypeWindows = $.deviceTypeWindows;
        this.deviceTypeZeroclient = $.deviceTypeZeroclient;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDirectoryWorkspaceAccessProperty defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDirectoryWorkspaceAccessProperty $;

        public Builder() {
            $ = new GetDirectoryWorkspaceAccessProperty();
        }

        public Builder(GetDirectoryWorkspaceAccessProperty defaults) {
            $ = new GetDirectoryWorkspaceAccessProperty(Objects.requireNonNull(defaults));
        }

        public Builder deviceTypeAndroid(String deviceTypeAndroid) {
            $.deviceTypeAndroid = deviceTypeAndroid;
            return this;
        }

        public Builder deviceTypeChromeos(String deviceTypeChromeos) {
            $.deviceTypeChromeos = deviceTypeChromeos;
            return this;
        }

        public Builder deviceTypeIos(String deviceTypeIos) {
            $.deviceTypeIos = deviceTypeIos;
            return this;
        }

        public Builder deviceTypeLinux(String deviceTypeLinux) {
            $.deviceTypeLinux = deviceTypeLinux;
            return this;
        }

        public Builder deviceTypeOsx(String deviceTypeOsx) {
            $.deviceTypeOsx = deviceTypeOsx;
            return this;
        }

        public Builder deviceTypeWeb(String deviceTypeWeb) {
            $.deviceTypeWeb = deviceTypeWeb;
            return this;
        }

        public Builder deviceTypeWindows(String deviceTypeWindows) {
            $.deviceTypeWindows = deviceTypeWindows;
            return this;
        }

        public Builder deviceTypeZeroclient(String deviceTypeZeroclient) {
            $.deviceTypeZeroclient = deviceTypeZeroclient;
            return this;
        }

        public GetDirectoryWorkspaceAccessProperty build() {
            $.deviceTypeAndroid = Objects.requireNonNull($.deviceTypeAndroid, "expected parameter 'deviceTypeAndroid' to be non-null");
            $.deviceTypeChromeos = Objects.requireNonNull($.deviceTypeChromeos, "expected parameter 'deviceTypeChromeos' to be non-null");
            $.deviceTypeIos = Objects.requireNonNull($.deviceTypeIos, "expected parameter 'deviceTypeIos' to be non-null");
            $.deviceTypeLinux = Objects.requireNonNull($.deviceTypeLinux, "expected parameter 'deviceTypeLinux' to be non-null");
            $.deviceTypeOsx = Objects.requireNonNull($.deviceTypeOsx, "expected parameter 'deviceTypeOsx' to be non-null");
            $.deviceTypeWeb = Objects.requireNonNull($.deviceTypeWeb, "expected parameter 'deviceTypeWeb' to be non-null");
            $.deviceTypeWindows = Objects.requireNonNull($.deviceTypeWindows, "expected parameter 'deviceTypeWindows' to be non-null");
            $.deviceTypeZeroclient = Objects.requireNonNull($.deviceTypeZeroclient, "expected parameter 'deviceTypeZeroclient' to be non-null");
            return $;
        }
    }

}
