// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.elasticsearch.inputs;

import com.pulumi.aws.elasticsearch.inputs.GetDomainClusterConfigZoneAwarenessConfig;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDomainClusterConfig extends com.pulumi.resources.InvokeArgs {

    public static final GetDomainClusterConfig Empty = new GetDomainClusterConfig();

    /**
     * Number of dedicated master nodes in the cluster.
     * 
     */
    @Import(name="dedicatedMasterCount", required=true)
    private Integer dedicatedMasterCount;

    /**
     * @return Number of dedicated master nodes in the cluster.
     * 
     */
    public Integer dedicatedMasterCount() {
        return this.dedicatedMasterCount;
    }

    /**
     * Indicates whether dedicated master nodes are enabled for the cluster.
     * 
     */
    @Import(name="dedicatedMasterEnabled", required=true)
    private Boolean dedicatedMasterEnabled;

    /**
     * @return Indicates whether dedicated master nodes are enabled for the cluster.
     * 
     */
    public Boolean dedicatedMasterEnabled() {
        return this.dedicatedMasterEnabled;
    }

    /**
     * Instance type of the dedicated master nodes in the cluster.
     * 
     */
    @Import(name="dedicatedMasterType", required=true)
    private String dedicatedMasterType;

    /**
     * @return Instance type of the dedicated master nodes in the cluster.
     * 
     */
    public String dedicatedMasterType() {
        return this.dedicatedMasterType;
    }

    /**
     * Number of instances in the cluster.
     * 
     */
    @Import(name="instanceCount", required=true)
    private Integer instanceCount;

    /**
     * @return Number of instances in the cluster.
     * 
     */
    public Integer instanceCount() {
        return this.instanceCount;
    }

    /**
     * Instance type of data nodes in the cluster.
     * 
     */
    @Import(name="instanceType", required=true)
    private String instanceType;

    /**
     * @return Instance type of data nodes in the cluster.
     * 
     */
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * The number of warm nodes in the cluster.
     * 
     */
    @Import(name="warmCount", required=true)
    private Integer warmCount;

    /**
     * @return The number of warm nodes in the cluster.
     * 
     */
    public Integer warmCount() {
        return this.warmCount;
    }

    /**
     * Indicates warm storage is enabled.
     * 
     */
    @Import(name="warmEnabled")
    private @Nullable Boolean warmEnabled;

    /**
     * @return Indicates warm storage is enabled.
     * 
     */
    public Optional<Boolean> warmEnabled() {
        return Optional.ofNullable(this.warmEnabled);
    }

    /**
     * The instance type for the Elasticsearch cluster&#39;s warm nodes.
     * 
     */
    @Import(name="warmType", required=true)
    private String warmType;

    /**
     * @return The instance type for the Elasticsearch cluster&#39;s warm nodes.
     * 
     */
    public String warmType() {
        return this.warmType;
    }

    /**
     * Configuration block containing zone awareness settings.
     * 
     */
    @Import(name="zoneAwarenessConfigs", required=true)
    private List<GetDomainClusterConfigZoneAwarenessConfig> zoneAwarenessConfigs;

    /**
     * @return Configuration block containing zone awareness settings.
     * 
     */
    public List<GetDomainClusterConfigZoneAwarenessConfig> zoneAwarenessConfigs() {
        return this.zoneAwarenessConfigs;
    }

    /**
     * Indicates whether zone awareness is enabled.
     * 
     */
    @Import(name="zoneAwarenessEnabled", required=true)
    private Boolean zoneAwarenessEnabled;

    /**
     * @return Indicates whether zone awareness is enabled.
     * 
     */
    public Boolean zoneAwarenessEnabled() {
        return this.zoneAwarenessEnabled;
    }

    private GetDomainClusterConfig() {}

    private GetDomainClusterConfig(GetDomainClusterConfig $) {
        this.dedicatedMasterCount = $.dedicatedMasterCount;
        this.dedicatedMasterEnabled = $.dedicatedMasterEnabled;
        this.dedicatedMasterType = $.dedicatedMasterType;
        this.instanceCount = $.instanceCount;
        this.instanceType = $.instanceType;
        this.warmCount = $.warmCount;
        this.warmEnabled = $.warmEnabled;
        this.warmType = $.warmType;
        this.zoneAwarenessConfigs = $.zoneAwarenessConfigs;
        this.zoneAwarenessEnabled = $.zoneAwarenessEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDomainClusterConfig defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDomainClusterConfig $;

        public Builder() {
            $ = new GetDomainClusterConfig();
        }

        public Builder(GetDomainClusterConfig defaults) {
            $ = new GetDomainClusterConfig(Objects.requireNonNull(defaults));
        }

        /**
         * @param dedicatedMasterCount Number of dedicated master nodes in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedMasterCount(Integer dedicatedMasterCount) {
            $.dedicatedMasterCount = dedicatedMasterCount;
            return this;
        }

        /**
         * @param dedicatedMasterEnabled Indicates whether dedicated master nodes are enabled for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedMasterEnabled(Boolean dedicatedMasterEnabled) {
            $.dedicatedMasterEnabled = dedicatedMasterEnabled;
            return this;
        }

        /**
         * @param dedicatedMasterType Instance type of the dedicated master nodes in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedMasterType(String dedicatedMasterType) {
            $.dedicatedMasterType = dedicatedMasterType;
            return this;
        }

        /**
         * @param instanceCount Number of instances in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder instanceCount(Integer instanceCount) {
            $.instanceCount = instanceCount;
            return this;
        }

        /**
         * @param instanceType Instance type of data nodes in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param warmCount The number of warm nodes in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder warmCount(Integer warmCount) {
            $.warmCount = warmCount;
            return this;
        }

        /**
         * @param warmEnabled Indicates warm storage is enabled.
         * 
         * @return builder
         * 
         */
        public Builder warmEnabled(@Nullable Boolean warmEnabled) {
            $.warmEnabled = warmEnabled;
            return this;
        }

        /**
         * @param warmType The instance type for the Elasticsearch cluster&#39;s warm nodes.
         * 
         * @return builder
         * 
         */
        public Builder warmType(String warmType) {
            $.warmType = warmType;
            return this;
        }

        /**
         * @param zoneAwarenessConfigs Configuration block containing zone awareness settings.
         * 
         * @return builder
         * 
         */
        public Builder zoneAwarenessConfigs(List<GetDomainClusterConfigZoneAwarenessConfig> zoneAwarenessConfigs) {
            $.zoneAwarenessConfigs = zoneAwarenessConfigs;
            return this;
        }

        /**
         * @param zoneAwarenessConfigs Configuration block containing zone awareness settings.
         * 
         * @return builder
         * 
         */
        public Builder zoneAwarenessConfigs(GetDomainClusterConfigZoneAwarenessConfig... zoneAwarenessConfigs) {
            return zoneAwarenessConfigs(List.of(zoneAwarenessConfigs));
        }

        /**
         * @param zoneAwarenessEnabled Indicates whether zone awareness is enabled.
         * 
         * @return builder
         * 
         */
        public Builder zoneAwarenessEnabled(Boolean zoneAwarenessEnabled) {
            $.zoneAwarenessEnabled = zoneAwarenessEnabled;
            return this;
        }

        public GetDomainClusterConfig build() {
            $.dedicatedMasterCount = Objects.requireNonNull($.dedicatedMasterCount, "expected parameter 'dedicatedMasterCount' to be non-null");
            $.dedicatedMasterEnabled = Objects.requireNonNull($.dedicatedMasterEnabled, "expected parameter 'dedicatedMasterEnabled' to be non-null");
            $.dedicatedMasterType = Objects.requireNonNull($.dedicatedMasterType, "expected parameter 'dedicatedMasterType' to be non-null");
            $.instanceCount = Objects.requireNonNull($.instanceCount, "expected parameter 'instanceCount' to be non-null");
            $.instanceType = Objects.requireNonNull($.instanceType, "expected parameter 'instanceType' to be non-null");
            $.warmCount = Objects.requireNonNull($.warmCount, "expected parameter 'warmCount' to be non-null");
            $.warmType = Objects.requireNonNull($.warmType, "expected parameter 'warmType' to be non-null");
            $.zoneAwarenessConfigs = Objects.requireNonNull($.zoneAwarenessConfigs, "expected parameter 'zoneAwarenessConfigs' to be non-null");
            $.zoneAwarenessEnabled = Objects.requireNonNull($.zoneAwarenessEnabled, "expected parameter 'zoneAwarenessEnabled' to be non-null");
            return $;
        }
    }

}
