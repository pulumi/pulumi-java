// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appmesh.inputs;

import com.pulumi.aws.appmesh.inputs.VirtualNodeSpecBackendVirtualServiceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.util.Objects;


public final class VirtualNodeSpecBackendArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualNodeSpecBackendArgs Empty = new VirtualNodeSpecBackendArgs();

    /**
     * Specifies a virtual service to use as a backend for a virtual node.
     * 
     */
    @Import(name="virtualService", required=true)
      private final Output<VirtualNodeSpecBackendVirtualServiceArgs> virtualService;

    public Output<VirtualNodeSpecBackendVirtualServiceArgs> virtualService() {
        return this.virtualService;
    }

    public VirtualNodeSpecBackendArgs(Output<VirtualNodeSpecBackendVirtualServiceArgs> virtualService) {
        this.virtualService = Objects.requireNonNull(virtualService, "expected parameter 'virtualService' to be non-null");
    }

    private VirtualNodeSpecBackendArgs() {
        this.virtualService = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualNodeSpecBackendArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<VirtualNodeSpecBackendVirtualServiceArgs> virtualService;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualNodeSpecBackendArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.virtualService = defaults.virtualService;
        }

        public Builder virtualService(Output<VirtualNodeSpecBackendVirtualServiceArgs> virtualService) {
            this.virtualService = Objects.requireNonNull(virtualService);
            return this;
        }
        public Builder virtualService(VirtualNodeSpecBackendVirtualServiceArgs virtualService) {
            this.virtualService = Output.of(Objects.requireNonNull(virtualService));
            return this;
        }        public VirtualNodeSpecBackendArgs build() {
            return new VirtualNodeSpecBackendArgs(virtualService);
        }
    }
}
