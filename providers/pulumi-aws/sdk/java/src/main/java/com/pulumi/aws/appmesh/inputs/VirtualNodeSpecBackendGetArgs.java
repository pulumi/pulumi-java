// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.appmesh.inputs;

import com.pulumi.aws.appmesh.inputs.VirtualNodeSpecBackendVirtualServiceGetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;


public final class VirtualNodeSpecBackendGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualNodeSpecBackendGetArgs Empty = new VirtualNodeSpecBackendGetArgs();

    /**
     * Specifies a virtual service to use as a backend for a virtual node.
     * 
     */
    @Import(name="virtualService", required=true)
    private Output<VirtualNodeSpecBackendVirtualServiceGetArgs> virtualService;

    /**
     * @return Specifies a virtual service to use as a backend for a virtual node.
     * 
     */
    public Output<VirtualNodeSpecBackendVirtualServiceGetArgs> virtualService() {
        return this.virtualService;
    }

    private VirtualNodeSpecBackendGetArgs() {}

    private VirtualNodeSpecBackendGetArgs(VirtualNodeSpecBackendGetArgs $) {
        this.virtualService = $.virtualService;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualNodeSpecBackendGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualNodeSpecBackendGetArgs $;

        public Builder() {
            $ = new VirtualNodeSpecBackendGetArgs();
        }

        public Builder(VirtualNodeSpecBackendGetArgs defaults) {
            $ = new VirtualNodeSpecBackendGetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param virtualService Specifies a virtual service to use as a backend for a virtual node.
         * 
         * @return builder
         * 
         */
        public Builder virtualService(Output<VirtualNodeSpecBackendVirtualServiceGetArgs> virtualService) {
            $.virtualService = virtualService;
            return this;
        }

        /**
         * @param virtualService Specifies a virtual service to use as a backend for a virtual node.
         * 
         * @return builder
         * 
         */
        public Builder virtualService(VirtualNodeSpecBackendVirtualServiceGetArgs virtualService) {
            return virtualService(Output.of(virtualService));
        }

        public VirtualNodeSpecBackendGetArgs build() {
            $.virtualService = Objects.requireNonNull($.virtualService, "expected parameter 'virtualService' to be non-null");
            return $;
        }
    }

}
