// *** WARNING: this file was generated by pulumi-java-gen ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

plugins {
    id("signing")
    id("java-library")
    id("maven-publish")
    {{- if .GradleNexusPublishPluginEnabled }}
    id("io.github.gradle-nexus.publish-plugin") version "{{.GradleNexusPublishPluginVersion}}"
    {{- end }}
}

{{- if .GroupID }}

group = "{{ .GroupID }}"
{{- end }}

def resolvedVersion = System.getenv("PACKAGE_VERSION") ?:
    (project.version == "unspecified"
         ? "{{ .Version }}"
         : project.version)

def signingKey = System.getenv("SIGNING_KEY")
def signingPassword = System.getenv("SIGNING_PASSWORD")
{{- if .GradleNexusPublishPluginEnabled }}
def publishRepoURL = System.getenv("PUBLISH_REPO_URL") ?: "https://s01.oss.sonatype.org"
{{- else }}
def publishRepoURL = System.getenv("PUBLISH_REPO_URL")
{{- end}}
def publishRepoUsername = System.getenv("PUBLISH_REPO_USERNAME")
def publishRepoPassword = System.getenv("PUBLISH_REPO_PASSWORD")

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

compileJava {
    options.fork = true
    options.forkOptions.jvmArgs.addAll(["-Xmx4g"])
}

repositories {
    mavenLocal()
    maven { // The google mirror is less flaky than mavenCentral()
        url("https://maven-central.storage-download.googleapis.com/maven2/")
    }
    mavenCentral()
}

dependencies {
    {{- range $k, $v := .Dependencies }}
    implementation("{{ $k }}:{{ $v }}")
    {{- end }}
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier.set('sources')
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set('javadoc')
    zip64 = true
}

def genPulumiResources = tasks.register('genPulumiResources') {
    doLast {
        def resourcesDir = sourceSets.main.output.resourcesDir
        def subDir = project.name.replace(".", "/")
        def outDir = file("$resourcesDir/$subDir")
        outDir.mkdirs()
        new File(outDir, "version.txt").text = resolvedVersion
        def info = new Object()
        info.metaClass.resource = true
        info.metaClass.name = "{{ .ArtifactID }}"
        info.metaClass.version = resolvedVersion
        def infoJson = new groovy.json.JsonBuilder(info).toPrettyString()
        new File(outDir, "plugin.json").text = infoJson
    }
}

jar.configure {
    dependsOn genPulumiResources
}

publishing {
    publications {
        mainPublication(MavenPublication) {
            groupId = "{{ .GroupID }}"
            artifactId = "{{ .ArtifactID }}"
            version = resolvedVersion
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                inceptionYear = "{{ .ProjectInceptionYear }}"
                name = "{{ .ProjectName }}"
                packaging = "jar"
                description = "{{ .ProjectDescription }}"

                url = "{{ .ProjectURL }}"

                scm {
                    connection = "{{ .ProjectGitURL }}"
                    developerConnection = "{{ .ProjectGitURL }}"
                    url = "{{ .ProjectURL }}"
                }

                licenses {
                    license {
                        name = "{{ .LicenceName }}"
                        url = "{{ .LicenceURL }}"
                    }
                }

                developers {
                    developer {
                        id = "{{ .DeveloperID }}"
                        name = "{{ .DeveloperName }}"
                        email = "{{ .DeveloperEmail }}"
                    }
                }
            }
        }
    }
    {{- if .GradleNexusPublishPluginEnabled -}}{{- else }}

    if (publishRepoURL) {
        repositories {
            maven {
                name = "PublishRepo"
                url = publishRepoURL
                credentials {
                    username = publishRepoUsername
                    password = publishRepoPassword
                }
            }
        }
    }
    {{- end}}
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
    options.jFlags("-Xmx8g", "-Xms512m")
}

{{- if .GradleTestJUnitPlatformEnabled }}

test {
    useJUnitPlatform()
    testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
    }
}

test.configure {
    dependsOn genPulumiResources
}

{{- end}}
{{- if .GradleNexusPublishPluginEnabled }}

if (publishRepoUsername) {
    nexusPublishing {
        repositories {
            sonatype {
                nexusUrl.set(uri(publishRepoURL + "/service/local/"))
                snapshotRepositoryUrl.set(uri(publishRepoURL + "/content/repositories/snapshots/"))
                username = publishRepoUsername
                password = publishRepoPassword
            }
        }
    }
}
{{- end}}

if (signingKey) {
    signing {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mainPublication
    }
}