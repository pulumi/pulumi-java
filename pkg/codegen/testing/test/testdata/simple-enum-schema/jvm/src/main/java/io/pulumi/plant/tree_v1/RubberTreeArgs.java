// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.plant.tree_v1;

import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.plant.inputs.ContainerArgs;
import io.pulumi.plant.tree_v1.enums.Diameter;
import io.pulumi.plant.tree_v1.enums.Farm;
import io.pulumi.plant.tree_v1.enums.RubberTreeVariety;
import io.pulumi.plant.tree_v1.enums.TreeSize;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RubberTreeArgs extends io.pulumi.resources.ResourceArgs {

    public static final RubberTreeArgs Empty = new RubberTreeArgs();

    @Import(name="container")
      private final @Nullable Output<ContainerArgs> container;

    public Output<ContainerArgs> container() {
        return this.container == null ? Codegen.empty() : this.container;
    }

    @Import(name="diameter", required=true)
      private final Output<Diameter> diameter;

    public Output<Diameter> diameter() {
        return this.diameter;
    }

    @Import(name="farm")
      private final @Nullable Output<Either<Farm,String>> farm;

    public Output<Either<Farm,String>> farm() {
        return this.farm == null ? Codegen.empty() : this.farm;
    }

    @Import(name="size")
      private final @Nullable Output<TreeSize> size;

    public Output<TreeSize> size() {
        return this.size == null ? Codegen.empty() : this.size;
    }

    @Import(name="type", required=true)
      private final Output<RubberTreeVariety> type;

    public Output<RubberTreeVariety> type() {
        return this.type;
    }

    public RubberTreeArgs(
        @Nullable Output<ContainerArgs> container,
        Output<Diameter> diameter,
        @Nullable Output<Either<Farm,String>> farm,
        @Nullable Output<TreeSize> size,
        Output<RubberTreeVariety> type) {
        this.container = container;
        this.diameter = diameter == null ? Codegen.ofNullable(io.pulumi.plant.tree_v1.enums.Diameter.Sixinch) : Objects.requireNonNull(diameter, "expected parameter 'diameter' to be non-null");
        this.farm = farm == null ? Output.ofRight("(unknown)") : farm;
        this.size = size == null ? Codegen.ofNullable(io.pulumi.plant.tree_v1.enums.TreeSize.Medium) : size;
        this.type = type == null ? Codegen.ofNullable(io.pulumi.plant.tree_v1.enums.RubberTreeVariety.Burgundy) : Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private RubberTreeArgs() {
        this.container = Codegen.empty();
        this.diameter = Codegen.empty();
        this.farm = Codegen.empty();
        this.size = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RubberTreeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<ContainerArgs> container;
        private Output<Diameter> diameter;
        private @Nullable Output<Either<Farm,String>> farm;
        private @Nullable Output<TreeSize> size;
        private Output<RubberTreeVariety> type;

        public Builder() {
    	      // Empty
        }

        public Builder(RubberTreeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.container = defaults.container;
    	      this.diameter = defaults.diameter;
    	      this.farm = defaults.farm;
    	      this.size = defaults.size;
    	      this.type = defaults.type;
        }

        public Builder container(@Nullable Output<ContainerArgs> container) {
            this.container = container;
            return this;
        }
        public Builder container(@Nullable ContainerArgs container) {
            this.container = Codegen.ofNullable(container);
            return this;
        }
        public Builder diameter(Output<Diameter> diameter) {
            this.diameter = Objects.requireNonNull(diameter);
            return this;
        }
        public Builder diameter(Diameter diameter) {
            this.diameter = Output.of(Objects.requireNonNull(diameter));
            return this;
        }
        public Builder farm(@Nullable Output<Either<Farm,String>> farm) {
            this.farm = farm;
            return this;
        }
        public Builder farm(@Nullable Either<Farm,String> farm) {
            this.farm = Codegen.ofNullable(farm);
            return this;
        }
        public Builder size(@Nullable Output<TreeSize> size) {
            this.size = size;
            return this;
        }
        public Builder size(@Nullable TreeSize size) {
            this.size = Codegen.ofNullable(size);
            return this;
        }
        public Builder type(Output<RubberTreeVariety> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(RubberTreeVariety type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public RubberTreeArgs build() {
            return new RubberTreeArgs(container, diameter, farm, size, type);
        }
    }
}
