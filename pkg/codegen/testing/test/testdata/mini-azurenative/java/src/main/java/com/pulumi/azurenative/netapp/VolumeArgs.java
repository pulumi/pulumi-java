// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.netapp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeArgs Empty = new VolumeArgs();

    @Import(name="throughputMibps")
    private @Nullable Output<Double> throughputMibps;

    public Optional<Output<Double>> throughputMibps() {
        return Optional.ofNullable(this.throughputMibps);
    }

    /**
     * Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
     * 
     */
    @Import(name="usageThreshold", required=true)
    private Output<Double> usageThreshold;

    public Output<Double> usageThreshold() {
        return this.usageThreshold;
    }

    private VolumeArgs() {}

    private VolumeArgs(VolumeArgs $) {
        this.throughputMibps = $.throughputMibps;
        this.usageThreshold = $.usageThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeArgs $;

        public Builder() {
            $ = new VolumeArgs();
        }

        public Builder(VolumeArgs defaults) {
            $ = new VolumeArgs(Objects.requireNonNull(defaults));
        }

        public Builder throughputMibps(@Nullable Output<Double> throughputMibps) {
            $.throughputMibps = throughputMibps;
            return this;
        }

        public Builder throughputMibps(Double throughputMibps) {
            return throughputMibps(Output.of(throughputMibps));
        }

        public Builder usageThreshold(Output<Double> usageThreshold) {
            $.usageThreshold = usageThreshold;
            return this;
        }

        public Builder usageThreshold(Double usageThreshold) {
            return usageThreshold(Output.of(usageThreshold));
        }

        public VolumeArgs build() {
            $.throughputMibps = Codegen.doubleProp("throughputMibps").output().arg($.throughputMibps).def(0e+00).getNullable();
            $.usageThreshold = Codegen.doubleProp("usageThreshold").output().arg($.usageThreshold).def(1.073741824e+11).require();
            return $;
        }
    }

}
