// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.awsx.awsx.inputs;

import com.pulumi.awsx.awsx.inputs.RoleWithPolicy;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Role and policy attachments with default setup unless explicitly skipped or an existing role ARN provided.
 * 
 */
public final class DefaultRoleWithPolicy extends com.pulumi.resources.InvokeArgs {

    public static final DefaultRoleWithPolicy Empty = new DefaultRoleWithPolicy();

    /**
     * Args to use when creating the role and policies. Can&#39;t be specified if `roleArn` is used.
     * 
     */
    @Import(name="args")
    private @Nullable RoleWithPolicy args;

    /**
     * @return Args to use when creating the role and policies. Can&#39;t be specified if `roleArn` is used.
     * 
     */
    public Optional<RoleWithPolicy> args() {
        return Optional.ofNullable(this.args);
    }

    /**
     * ARN of existing role to use instead of creating a new role. Cannot be used in combination with `args` or `opts`.
     * 
     */
    @Import(name="roleArn")
    private @Nullable String roleArn;

    /**
     * @return ARN of existing role to use instead of creating a new role. Cannot be used in combination with `args` or `opts`.
     * 
     */
    public Optional<String> roleArn() {
        return Optional.ofNullable(this.roleArn);
    }

    /**
     * Skips creation of the role if set to `true`.
     * 
     */
    @Import(name="skip")
    private @Nullable Boolean skip;

    /**
     * @return Skips creation of the role if set to `true`.
     * 
     */
    public Optional<Boolean> skip() {
        return Optional.ofNullable(this.skip);
    }

    private DefaultRoleWithPolicy() {}

    private DefaultRoleWithPolicy(DefaultRoleWithPolicy $) {
        this.args = $.args;
        this.roleArn = $.roleArn;
        this.skip = $.skip;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DefaultRoleWithPolicy defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DefaultRoleWithPolicy $;

        public Builder() {
            $ = new DefaultRoleWithPolicy();
        }

        public Builder(DefaultRoleWithPolicy defaults) {
            $ = new DefaultRoleWithPolicy(Objects.requireNonNull(defaults));
        }

        /**
         * @param args Args to use when creating the role and policies. Can&#39;t be specified if `roleArn` is used.
         * 
         * @return builder
         * 
         */
        public Builder args(@Nullable RoleWithPolicy args) {
            $.args = args;
            return this;
        }

        /**
         * @param roleArn ARN of existing role to use instead of creating a new role. Cannot be used in combination with `args` or `opts`.
         * 
         * @return builder
         * 
         */
        public Builder roleArn(@Nullable String roleArn) {
            $.roleArn = roleArn;
            return this;
        }

        /**
         * @param skip Skips creation of the role if set to `true`.
         * 
         * @return builder
         * 
         */
        public Builder skip(@Nullable Boolean skip) {
            $.skip = skip;
            return this;
        }

        public DefaultRoleWithPolicy build() {
            return $;
        }
    }

}
