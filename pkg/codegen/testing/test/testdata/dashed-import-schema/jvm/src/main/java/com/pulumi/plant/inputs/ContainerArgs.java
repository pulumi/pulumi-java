// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.plant.inputs;

import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.plant.enums.ContainerBrightness;
import com.pulumi.plant.enums.ContainerColor;
import com.pulumi.plant.enums.ContainerSize;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerArgs Empty = new ContainerArgs();

    @Import(name="brightness")
    private @Nullable Output<ContainerBrightness> brightness;

    public Optional<Output<ContainerBrightness>> brightness() {
        return Optional.ofNullable(this.brightness);
    }

    @Import(name="color")
    private @Nullable Output<Either<ContainerColor,String>> color;

    public Optional<Output<Either<ContainerColor,String>>> color() {
        return Optional.ofNullable(this.color);
    }

    @Import(name="material")
    private @Nullable Output<String> material;

    public Optional<Output<String>> material() {
        return Optional.ofNullable(this.material);
    }

    @Import(name="size", required=true)
    private Output<ContainerSize> size;

    public Output<ContainerSize> size() {
        return this.size;
    }

    private ContainerArgs() {}

    private ContainerArgs(ContainerArgs $) {
        this.brightness = $.brightness;
        this.color = $.color;
        this.material = $.material;
        this.size = $.size;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerArgs $;

        public Builder() {
            $ = new ContainerArgs();
        }

        public Builder(ContainerArgs defaults) {
            $ = new ContainerArgs(Objects.requireNonNull(defaults));
        }

        public Builder brightness(@Nullable Output<ContainerBrightness> brightness) {
            $.brightness = brightness;
            return this;
        }

        public Builder brightness(ContainerBrightness brightness) {
            return brightness(Output.of(brightness));
        }

        public Builder color(@Nullable Output<Either<ContainerColor,String>> color) {
            $.color = color;
            return this;
        }

        public Builder color(Either<ContainerColor,String> color) {
            return color(Output.of(color));
        }

        public Builder material(@Nullable Output<String> material) {
            $.material = material;
            return this;
        }

        public Builder material(String material) {
            return material(Output.of(material));
        }

        public Builder size(Output<ContainerSize> size) {
            $.size = size;
            return this;
        }

        public Builder size(ContainerSize size) {
            return size(Output.of(size));
        }

        public ContainerArgs build() {
            $.brightness = Codegen.objectProp("brightness", ContainerBrightness.class).output().arg($.brightness).def(ContainerBrightness.One).getNullable();
            $.size = Objects.requireNonNull($.size, "expected parameter 'size' to be non-null");
            return $;
        }
    }

}
