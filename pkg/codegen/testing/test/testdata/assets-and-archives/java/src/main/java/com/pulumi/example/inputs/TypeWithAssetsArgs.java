// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.example.inputs;

import com.pulumi.asset.Archive;
import com.pulumi.asset.AssetOrArchive;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TypeWithAssetsArgs extends com.pulumi.resources.ResourceArgs {

    public static final TypeWithAssetsArgs Empty = new TypeWithAssetsArgs();

    @Import(name="archive")
    private @Nullable Output<Archive> archive;

    public Optional<Output<Archive>> archive() {
        return Optional.ofNullable(this.archive);
    }

    @Import(name="asset", required=true)
    private Output<AssetOrArchive> asset;

    public Output<AssetOrArchive> asset() {
        return this.asset;
    }

    @Import(name="plainArchive", required=true)
    private Archive plainArchive;

    public Archive plainArchive() {
        return this.plainArchive;
    }

    @Import(name="plainAsset")
    private @Nullable AssetOrArchive plainAsset;

    public Optional<AssetOrArchive> plainAsset() {
        return Optional.ofNullable(this.plainAsset);
    }

    private TypeWithAssetsArgs() {}

    private TypeWithAssetsArgs(TypeWithAssetsArgs $) {
        this.archive = $.archive;
        this.asset = $.asset;
        this.plainArchive = $.plainArchive;
        this.plainAsset = $.plainAsset;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TypeWithAssetsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TypeWithAssetsArgs $;

        public Builder() {
            $ = new TypeWithAssetsArgs();
        }

        public Builder(TypeWithAssetsArgs defaults) {
            $ = new TypeWithAssetsArgs(Objects.requireNonNull(defaults));
        }

        public Builder archive(@Nullable Output<Archive> archive) {
            $.archive = archive;
            return this;
        }

        public Builder archive(Archive archive) {
            return archive(Output.of(archive));
        }

        public Builder asset(Output<AssetOrArchive> asset) {
            $.asset = asset;
            return this;
        }

        public Builder asset(AssetOrArchive asset) {
            return asset(Output.of(asset));
        }

        public Builder plainArchive(Archive plainArchive) {
            $.plainArchive = plainArchive;
            return this;
        }

        public Builder plainAsset(@Nullable AssetOrArchive plainAsset) {
            $.plainAsset = plainAsset;
            return this;
        }

        public TypeWithAssetsArgs build() {
            if ($.asset == null) {
                throw new MissingRequiredPropertyException("TypeWithAssetsArgs", "asset");
            }
            if ($.plainArchive == null) {
                throw new MissingRequiredPropertyException("TypeWithAssetsArgs", "plainArchive");
            }
            return $;
        }
    }

}
