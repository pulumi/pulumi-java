// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.example.outputs;

import com.pulumi.asset.Archive;
import com.pulumi.asset.AssetOrArchive;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TypeWithAssets {
    private @Nullable Archive archive;
    private AssetOrArchive asset;
    private Archive plainArchive;
    private @Nullable AssetOrArchive plainAsset;

    private TypeWithAssets() {}
    public Optional<Archive> archive() {
        return Optional.ofNullable(this.archive);
    }
    public AssetOrArchive asset() {
        return this.asset;
    }
    public Archive plainArchive() {
        return this.plainArchive;
    }
    public Optional<AssetOrArchive> plainAsset() {
        return Optional.ofNullable(this.plainAsset);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TypeWithAssets defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Archive archive;
        private AssetOrArchive asset;
        private Archive plainArchive;
        private @Nullable AssetOrArchive plainAsset;
        public Builder() {}
        public Builder(TypeWithAssets defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archive = defaults.archive;
    	      this.asset = defaults.asset;
    	      this.plainArchive = defaults.plainArchive;
    	      this.plainAsset = defaults.plainAsset;
        }

        @CustomType.Setter
        public Builder archive(@Nullable Archive archive) {

            this.archive = archive;
            return this;
        }
        @CustomType.Setter
        public Builder asset(AssetOrArchive asset) {
            if (asset == null) {
              throw new MissingRequiredPropertyException("TypeWithAssets", "asset");
            }
            this.asset = asset;
            return this;
        }
        @CustomType.Setter
        public Builder plainArchive(Archive plainArchive) {
            if (plainArchive == null) {
              throw new MissingRequiredPropertyException("TypeWithAssets", "plainArchive");
            }
            this.plainArchive = plainArchive;
            return this;
        }
        @CustomType.Setter
        public Builder plainAsset(@Nullable AssetOrArchive plainAsset) {

            this.plainAsset = plainAsset;
            return this;
        }
        public TypeWithAssets build() {
            final var _resultValue = new TypeWithAssets();
            _resultValue.archive = archive;
            _resultValue.asset = asset;
            _resultValue.plainArchive = plainArchive;
            _resultValue.plainAsset = plainAsset;
            return _resultValue;
        }
    }
}
