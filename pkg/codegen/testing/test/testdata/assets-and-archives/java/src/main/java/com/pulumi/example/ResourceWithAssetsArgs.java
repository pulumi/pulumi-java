// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.example;

import com.pulumi.asset.Archive;
import com.pulumi.asset.AssetOrArchive;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.example.inputs.TypeWithAssetsArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResourceWithAssetsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourceWithAssetsArgs Empty = new ResourceWithAssetsArgs();

    @Import(name="archive")
    private @Nullable Output<Archive> archive;

    public Optional<Output<Archive>> archive() {
        return Optional.ofNullable(this.archive);
    }

    @Import(name="nested")
    private @Nullable Output<TypeWithAssetsArgs> nested;

    public Optional<Output<TypeWithAssetsArgs>> nested() {
        return Optional.ofNullable(this.nested);
    }

    @Import(name="source", required=true)
    private Output<AssetOrArchive> source;

    public Output<AssetOrArchive> source() {
        return this.source;
    }

    private ResourceWithAssetsArgs() {}

    private ResourceWithAssetsArgs(ResourceWithAssetsArgs $) {
        this.archive = $.archive;
        this.nested = $.nested;
        this.source = $.source;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceWithAssetsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceWithAssetsArgs $;

        public Builder() {
            $ = new ResourceWithAssetsArgs();
        }

        public Builder(ResourceWithAssetsArgs defaults) {
            $ = new ResourceWithAssetsArgs(Objects.requireNonNull(defaults));
        }

        public Builder archive(@Nullable Output<Archive> archive) {
            $.archive = archive;
            return this;
        }

        public Builder archive(Archive archive) {
            return archive(Output.of(archive));
        }

        public Builder nested(@Nullable Output<TypeWithAssetsArgs> nested) {
            $.nested = nested;
            return this;
        }

        public Builder nested(TypeWithAssetsArgs nested) {
            return nested(Output.of(nested));
        }

        public Builder source(Output<AssetOrArchive> source) {
            $.source = source;
            return this;
        }

        public Builder source(AssetOrArchive source) {
            return source(Output.of(source));
        }

        public ResourceWithAssetsArgs build() {
            if ($.source == null) {
                throw new MissingRequiredPropertyException("ResourceWithAssetsArgs", "source");
            }
            return $;
        }
    }

}
