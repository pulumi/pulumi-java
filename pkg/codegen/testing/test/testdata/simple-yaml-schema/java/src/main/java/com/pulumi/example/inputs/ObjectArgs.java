// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.example.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.example.Resource;
import com.pulumi.example.inputs.ConfigMapArgs;
import com.pulumi.example.inputs.SomeOtherObjectArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObjectArgs Empty = new ObjectArgs();

    @Import(name="bar")
    private @Nullable Output<String> bar;

    public Optional<Output<String>> bar() {
        return Optional.ofNullable(this.bar);
    }

    @Import(name="configs")
    private @Nullable Output<List<ConfigMapArgs>> configs;

    public Optional<Output<List<ConfigMapArgs>>> configs() {
        return Optional.ofNullable(this.configs);
    }

    @Import(name="foo")
    private @Nullable Output<Resource> foo;

    public Optional<Output<Resource>> foo() {
        return Optional.ofNullable(this.foo);
    }

    /**
     * List of lists of other objects
     * 
     */
    @Import(name="others")
    private @Nullable Output<List<List<SomeOtherObjectArgs>>> others;

    /**
     * @return List of lists of other objects
     * 
     */
    public Optional<Output<List<List<SomeOtherObjectArgs>>>> others() {
        return Optional.ofNullable(this.others);
    }

    /**
     * Mapping from string to list of some other object
     * 
     */
    @Import(name="stillOthers")
    private @Nullable Output<Map<String,List<SomeOtherObjectArgs>>> stillOthers;

    /**
     * @return Mapping from string to list of some other object
     * 
     */
    public Optional<Output<Map<String,List<SomeOtherObjectArgs>>>> stillOthers() {
        return Optional.ofNullable(this.stillOthers);
    }

    private ObjectArgs() {}

    private ObjectArgs(ObjectArgs $) {
        this.bar = $.bar;
        this.configs = $.configs;
        this.foo = $.foo;
        this.others = $.others;
        this.stillOthers = $.stillOthers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObjectArgs $;

        public Builder() {
            $ = new ObjectArgs();
        }

        public Builder(ObjectArgs defaults) {
            $ = new ObjectArgs(Objects.requireNonNull(defaults));
        }

        public Builder bar(@Nullable Output<String> bar) {
            $.bar = bar;
            return this;
        }

        public Builder bar(String bar) {
            return bar(Output.of(bar));
        }

        public Builder configs(@Nullable Output<List<ConfigMapArgs>> configs) {
            $.configs = configs;
            return this;
        }

        public Builder configs(List<ConfigMapArgs> configs) {
            return configs(Output.of(configs));
        }

        public Builder configs(ConfigMapArgs... configs) {
            return configs(List.of(configs));
        }

        public Builder foo(@Nullable Output<Resource> foo) {
            $.foo = foo;
            return this;
        }

        public Builder foo(Resource foo) {
            return foo(Output.of(foo));
        }

        /**
         * @param others List of lists of other objects
         * 
         * @return builder
         * 
         */
        public Builder others(@Nullable Output<List<List<SomeOtherObjectArgs>>> others) {
            $.others = others;
            return this;
        }

        /**
         * @param others List of lists of other objects
         * 
         * @return builder
         * 
         */
        public Builder others(List<List<SomeOtherObjectArgs>> others) {
            return others(Output.of(others));
        }

        /**
         * @param others List of lists of other objects
         * 
         * @return builder
         * 
         */
        public Builder others(List<SomeOtherObjectArgs>... others) {
            return others(List.of(others));
        }

        /**
         * @param stillOthers Mapping from string to list of some other object
         * 
         * @return builder
         * 
         */
        public Builder stillOthers(@Nullable Output<Map<String,List<SomeOtherObjectArgs>>> stillOthers) {
            $.stillOthers = stillOthers;
            return this;
        }

        /**
         * @param stillOthers Mapping from string to list of some other object
         * 
         * @return builder
         * 
         */
        public Builder stillOthers(Map<String,List<SomeOtherObjectArgs>> stillOthers) {
            return stillOthers(Output.of(stillOthers));
        }

        public ObjectArgs build() {
            return $;
        }
    }

}
