// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.example.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.example.Resource;
import io.pulumi.example.outputs.ConfigMap;
import io.pulumi.example.outputs.SomeOtherObject;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class Object {
    private final @Nullable String bar;
    private final @Nullable List<ConfigMap> configs;
    private final @Nullable Resource foo;
    /**
     * List of lists of other objects
     * 
     */
    private final @Nullable List<List<SomeOtherObject>> others;
    /**
     * Mapping from string to list of some other object
     * 
     */
    private final @Nullable Map<String,List<SomeOtherObject>> stillOthers;

    @OutputCustomType.Constructor
    private Object(
        @OutputCustomType.Parameter("bar") @Nullable String bar,
        @OutputCustomType.Parameter("configs") @Nullable List<ConfigMap> configs,
        @OutputCustomType.Parameter("foo") @Nullable Resource foo,
        @OutputCustomType.Parameter("others") @Nullable List<List<SomeOtherObject>> others,
        @OutputCustomType.Parameter("stillOthers") @Nullable Map<String,List<SomeOtherObject>> stillOthers) {
        this.bar = bar;
        this.configs = configs;
        this.foo = foo;
        this.others = others;
        this.stillOthers = stillOthers;
    }

    public Optional<String> getBar() {
        return Optional.ofNullable(this.bar);
    }
    public List<ConfigMap> getConfigs() {
        return this.configs == null ? List.of() : this.configs;
    }
    public Optional<Resource> getFoo() {
        return Optional.ofNullable(this.foo);
    }
    /**
     * List of lists of other objects
     * 
    */
    public List<List<SomeOtherObject>> getOthers() {
        return this.others == null ? List.of() : this.others;
    }
    /**
     * Mapping from string to list of some other object
     * 
    */
    public Map<String,List<SomeOtherObject>> getStillOthers() {
        return this.stillOthers == null ? Map.of() : this.stillOthers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(Object defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String bar;
        private @Nullable List<ConfigMap> configs;
        private @Nullable Resource foo;
        private @Nullable List<List<SomeOtherObject>> others;
        private @Nullable Map<String,List<SomeOtherObject>> stillOthers;

        public Builder() {
    	      // Empty
        }

        public Builder(Object defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bar = defaults.bar;
    	      this.configs = defaults.configs;
    	      this.foo = defaults.foo;
    	      this.others = defaults.others;
    	      this.stillOthers = defaults.stillOthers;
        }

        public Builder setBar(@Nullable String bar) {
            this.bar = bar;
            return this;
        }

        public Builder setConfigs(@Nullable List<ConfigMap> configs) {
            this.configs = configs;
            return this;
        }

        public Builder setFoo(@Nullable Resource foo) {
            this.foo = foo;
            return this;
        }

        public Builder setOthers(@Nullable List<List<SomeOtherObject>> others) {
            this.others = others;
            return this;
        }

        public Builder setStillOthers(@Nullable Map<String,List<SomeOtherObject>> stillOthers) {
            this.stillOthers = stillOthers;
            return this;
        }
        public Object build() {
            return new Object(bar, configs, foo, others, stillOthers);
        }
    }
}
