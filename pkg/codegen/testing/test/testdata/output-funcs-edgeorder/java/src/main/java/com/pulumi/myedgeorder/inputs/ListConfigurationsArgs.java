// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.myedgeorder.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.myedgeorder.inputs.ConfigurationFilters;
import com.pulumi.myedgeorder.inputs.CustomerSubscriptionDetails;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ListConfigurationsArgs extends com.pulumi.resources.InvokeArgs {

    public static final ListConfigurationsArgs Empty = new ListConfigurationsArgs();

    /**
     * Holds details about product hierarchy information and filterable property.
     * 
     */
    @Import(name="configurationFilters", required=true)
    private Output<List<ConfigurationFilters>> configurationFilters;

    /**
     * @return Holds details about product hierarchy information and filterable property.
     * 
     */
    public Output<List<ConfigurationFilters>> configurationFilters() {
        return this.configurationFilters;
    }

    /**
     * Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details
     * 
     */
    @Import(name="customerSubscriptionDetails")
    private Output</* @Nullable */ CustomerSubscriptionDetails> customerSubscriptionDetails;

    /**
     * @return Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details
     * 
     */
    public Output</* @Nullable */ CustomerSubscriptionDetails> customerSubscriptionDetails() {
        return this.customerSubscriptionDetails;
    }

    /**
     * $skipToken is supported on list of configurations, which provides the next page in the list of configurations.
     * 
     */
    @Import(name="skipToken")
    private Output</* @Nullable */ String> skipToken;

    /**
     * @return $skipToken is supported on list of configurations, which provides the next page in the list of configurations.
     * 
     */
    public Output</* @Nullable */ String> skipToken() {
        return this.skipToken;
    }

    private ListConfigurationsArgs() {}

    private ListConfigurationsArgs(ListConfigurationsArgs $) {
        this.configurationFilters = $.configurationFilters;
        this.customerSubscriptionDetails = $.customerSubscriptionDetails;
        this.skipToken = $.skipToken;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListConfigurationsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListConfigurationsArgs $;

        public Builder() {
            $ = new ListConfigurationsArgs();
        }

        public Builder(ListConfigurationsArgs defaults) {
            $ = new ListConfigurationsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configurationFilters Holds details about product hierarchy information and filterable property.
         * 
         * @return builder
         * 
         */
        public Builder configurationFilters(Output<List<ConfigurationFilters>> configurationFilters) {
            $.configurationFilters = configurationFilters;
            return this;
        }

        /**
         * @param configurationFilters Holds details about product hierarchy information and filterable property.
         * 
         * @return builder
         * 
         */
        public Builder configurationFilters(List<ConfigurationFilters> configurationFilters) {
            return configurationFilters(Output.of(configurationFilters));
        }

        /**
         * @param configurationFilters Holds details about product hierarchy information and filterable property.
         * 
         * @return builder
         * 
         */
        public Builder configurationFilters(ConfigurationFilters... configurationFilters) {
            return configurationFilters(List.of(configurationFilters));
        }

        /**
         * @param customerSubscriptionDetails Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details
         * 
         * @return builder
         * 
         */
        public Builder customerSubscriptionDetails(Output</* @Nullable */ CustomerSubscriptionDetails> customerSubscriptionDetails) {
            $.customerSubscriptionDetails = customerSubscriptionDetails;
            return this;
        }

        /**
         * @param customerSubscriptionDetails Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details
         * 
         * @return builder
         * 
         */
        public Builder customerSubscriptionDetails(@Nullable CustomerSubscriptionDetails customerSubscriptionDetails) {
            return customerSubscriptionDetails(Output.of(customerSubscriptionDetails));
        }

        /**
         * @param skipToken $skipToken is supported on list of configurations, which provides the next page in the list of configurations.
         * 
         * @return builder
         * 
         */
        public Builder skipToken(Output</* @Nullable */ String> skipToken) {
            $.skipToken = skipToken;
            return this;
        }

        /**
         * @param skipToken $skipToken is supported on list of configurations, which provides the next page in the list of configurations.
         * 
         * @return builder
         * 
         */
        public Builder skipToken(@Nullable String skipToken) {
            return skipToken(Output.of(skipToken));
        }

        public ListConfigurationsArgs build() {
            $.configurationFilters = Objects.requireNonNull($.configurationFilters, "expected parameter 'configurationFilters' to be non-null");
            return $;
        }
    }

}
