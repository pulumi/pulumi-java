// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.myedgeorder.inputs;

import com.pulumi.core.Either;
import com.pulumi.core.annotations.Import;
import com.pulumi.myedgeorder.inputs.Pav2MeterDetailsResponse;
import com.pulumi.myedgeorder.inputs.PurchaseMeterDetailsResponse;
import java.lang.String;
import java.util.Objects;


/**
 * Holds billing meter details for each type of billing
 * 
 */
public final class BillingMeterDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final BillingMeterDetailsResponse Empty = new BillingMeterDetailsResponse();

    /**
     * Frequency of recurrence
     * 
     */
    @Import(name="frequency", required=true)
    private String frequency;

    /**
     * @return Frequency of recurrence
     * 
     */
    public String frequency() {
        return this.frequency;
    }

    /**
     * Represents MeterDetails
     * 
     */
    @Import(name="meterDetails", required=true)
    private Either<Pav2MeterDetailsResponse,PurchaseMeterDetailsResponse> meterDetails;

    /**
     * @return Represents MeterDetails
     * 
     */
    public Either<Pav2MeterDetailsResponse,PurchaseMeterDetailsResponse> meterDetails() {
        return this.meterDetails;
    }

    /**
     * Represents Metering type (eg one-time or recurrent)
     * 
     */
    @Import(name="meteringType", required=true)
    private String meteringType;

    /**
     * @return Represents Metering type (eg one-time or recurrent)
     * 
     */
    public String meteringType() {
        return this.meteringType;
    }

    /**
     * Represents Billing type name
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Represents Billing type name
     * 
     */
    public String name() {
        return this.name;
    }

    private BillingMeterDetailsResponse() {}

    private BillingMeterDetailsResponse(BillingMeterDetailsResponse $) {
        this.frequency = $.frequency;
        this.meterDetails = $.meterDetails;
        this.meteringType = $.meteringType;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BillingMeterDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BillingMeterDetailsResponse $;

        public Builder() {
            $ = new BillingMeterDetailsResponse();
        }

        public Builder(BillingMeterDetailsResponse defaults) {
            $ = new BillingMeterDetailsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param frequency Frequency of recurrence
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param meterDetails Represents MeterDetails
         * 
         * @return builder
         * 
         */
        public Builder meterDetails(Either<Pav2MeterDetailsResponse,PurchaseMeterDetailsResponse> meterDetails) {
            $.meterDetails = meterDetails;
            return this;
        }

        /**
         * @param meterDetails Represents MeterDetails
         * 
         * @return builder
         * 
         */
        public Builder meterDetails(Pav2MeterDetailsResponse meterDetails) {
            return meterDetails(Either.ofLeft(meterDetails));
        }

        /**
         * @param meterDetails Represents MeterDetails
         * 
         * @return builder
         * 
         */
        public Builder meterDetails(PurchaseMeterDetailsResponse meterDetails) {
            return meterDetails(Either.ofRight(meterDetails));
        }

        /**
         * @param meteringType Represents Metering type (eg one-time or recurrent)
         * 
         * @return builder
         * 
         */
        public Builder meteringType(String meteringType) {
            $.meteringType = meteringType;
            return this;
        }

        /**
         * @param name Represents Billing type name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public BillingMeterDetailsResponse build() {
            $.frequency = Objects.requireNonNull($.frequency, "expected parameter 'frequency' to be non-null");
            $.meterDetails = Objects.requireNonNull($.meterDetails, "expected parameter 'meterDetails' to be non-null");
            $.meteringType = Objects.requireNonNull($.meteringType, "expected parameter 'meteringType' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
