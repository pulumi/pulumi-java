// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.myedgeorder.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Dimensions of a configuration.
 * 
 */
public final class DimensionsResponse extends com.pulumi.resources.InvokeArgs {

    public static final DimensionsResponse Empty = new DimensionsResponse();

    /**
     * Depth of the device.
     * 
     */
    @Import(name="depth", required=true)
    private Double depth;

    public Double depth() {
        return this.depth;
    }

    /**
     * Height of the device.
     * 
     */
    @Import(name="height", required=true)
    private Double height;

    public Double height() {
        return this.height;
    }

    /**
     * Length of the device.
     * 
     */
    @Import(name="length", required=true)
    private Double length;

    public Double length() {
        return this.length;
    }

    /**
     * Unit for the dimensions of length, height and width.
     * 
     */
    @Import(name="lengthHeightUnit", required=true)
    private String lengthHeightUnit;

    public String lengthHeightUnit() {
        return this.lengthHeightUnit;
    }

    /**
     * Weight of the device.
     * 
     */
    @Import(name="weight", required=true)
    private Double weight;

    public Double weight() {
        return this.weight;
    }

    /**
     * Unit for the dimensions of weight.
     * 
     */
    @Import(name="weightUnit", required=true)
    private String weightUnit;

    public String weightUnit() {
        return this.weightUnit;
    }

    /**
     * Width of the device.
     * 
     */
    @Import(name="width", required=true)
    private Double width;

    public Double width() {
        return this.width;
    }

    private DimensionsResponse() {}

    private DimensionsResponse(DimensionsResponse $) {
        this.depth = $.depth;
        this.height = $.height;
        this.length = $.length;
        this.lengthHeightUnit = $.lengthHeightUnit;
        this.weight = $.weight;
        this.weightUnit = $.weightUnit;
        this.width = $.width;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DimensionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DimensionsResponse $;

        public Builder() {
            $ = new DimensionsResponse();
        }

        public Builder(DimensionsResponse defaults) {
            $ = new DimensionsResponse(Objects.requireNonNull(defaults));
        }

        public Builder depth(Double depth) {
            $.depth = depth;
            return this;
        }

        public Builder height(Double height) {
            $.height = height;
            return this;
        }

        public Builder length(Double length) {
            $.length = length;
            return this;
        }

        public Builder lengthHeightUnit(String lengthHeightUnit) {
            $.lengthHeightUnit = lengthHeightUnit;
            return this;
        }

        public Builder weight(Double weight) {
            $.weight = weight;
            return this;
        }

        public Builder weightUnit(String weightUnit) {
            $.weightUnit = weightUnit;
            return this;
        }

        public Builder width(Double width) {
            $.width = width;
            return this;
        }

        public DimensionsResponse build() {
            $.depth = Objects.requireNonNull($.depth, "expected parameter 'depth' to be non-null");
            $.height = Objects.requireNonNull($.height, "expected parameter 'height' to be non-null");
            $.length = Objects.requireNonNull($.length, "expected parameter 'length' to be non-null");
            $.lengthHeightUnit = Objects.requireNonNull($.lengthHeightUnit, "expected parameter 'lengthHeightUnit' to be non-null");
            $.weight = Objects.requireNonNull($.weight, "expected parameter 'weight' to be non-null");
            $.weightUnit = Objects.requireNonNull($.weightUnit, "expected parameter 'weightUnit' to be non-null");
            $.width = Objects.requireNonNull($.width, "expected parameter 'width' to be non-null");
            return $;
        }
    }

}
