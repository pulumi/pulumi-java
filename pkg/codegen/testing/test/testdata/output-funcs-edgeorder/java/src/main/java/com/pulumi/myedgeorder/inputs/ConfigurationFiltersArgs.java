// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.myedgeorder.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.myedgeorder.inputs.FilterablePropertyArgs;
import com.pulumi.myedgeorder.inputs.HierarchyInformationArgs;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configuration filters
 * 
 */
public final class ConfigurationFiltersArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigurationFiltersArgs Empty = new ConfigurationFiltersArgs();

    /**
     * Filters specific to product
     * 
     */
    @Import(name="filterableProperty")
    private @Nullable Output<List<FilterablePropertyArgs>> filterableProperty;

    /**
     * @return Filters specific to product
     * 
     */
    public Optional<Output<List<FilterablePropertyArgs>>> filterableProperty() {
        return Optional.ofNullable(this.filterableProperty);
    }

    /**
     * Product hierarchy information
     * 
     */
    @Import(name="hierarchyInformation", required=true)
    private Output<HierarchyInformationArgs> hierarchyInformation;

    /**
     * @return Product hierarchy information
     * 
     */
    public Output<HierarchyInformationArgs> hierarchyInformation() {
        return this.hierarchyInformation;
    }

    private ConfigurationFiltersArgs() {}

    private ConfigurationFiltersArgs(ConfigurationFiltersArgs $) {
        this.filterableProperty = $.filterableProperty;
        this.hierarchyInformation = $.hierarchyInformation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigurationFiltersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigurationFiltersArgs $;

        public Builder() {
            $ = new ConfigurationFiltersArgs();
        }

        public Builder(ConfigurationFiltersArgs defaults) {
            $ = new ConfigurationFiltersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filterableProperty Filters specific to product
         * 
         * @return builder
         * 
         */
        public Builder filterableProperty(@Nullable Output<List<FilterablePropertyArgs>> filterableProperty) {
            $.filterableProperty = filterableProperty;
            return this;
        }

        /**
         * @param filterableProperty Filters specific to product
         * 
         * @return builder
         * 
         */
        public Builder filterableProperty(List<FilterablePropertyArgs> filterableProperty) {
            return filterableProperty(Output.of(filterableProperty));
        }

        /**
         * @param filterableProperty Filters specific to product
         * 
         * @return builder
         * 
         */
        public Builder filterableProperty(FilterablePropertyArgs... filterableProperty) {
            return filterableProperty(List.of(filterableProperty));
        }

        /**
         * @param hierarchyInformation Product hierarchy information
         * 
         * @return builder
         * 
         */
        public Builder hierarchyInformation(Output<HierarchyInformationArgs> hierarchyInformation) {
            $.hierarchyInformation = hierarchyInformation;
            return this;
        }

        /**
         * @param hierarchyInformation Product hierarchy information
         * 
         * @return builder
         * 
         */
        public Builder hierarchyInformation(HierarchyInformationArgs hierarchyInformation) {
            return hierarchyInformation(Output.of(hierarchyInformation));
        }

        public ConfigurationFiltersArgs build() {
            $.hierarchyInformation = Objects.requireNonNull($.hierarchyInformation, "expected parameter 'hierarchyInformation' to be non-null");
            return $;
        }
    }

}
