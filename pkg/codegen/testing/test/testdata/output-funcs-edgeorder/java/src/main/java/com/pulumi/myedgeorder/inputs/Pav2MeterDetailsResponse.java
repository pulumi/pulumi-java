// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.myedgeorder.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Billing type PAV2 meter details
 * 
 */
public final class Pav2MeterDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final Pav2MeterDetailsResponse Empty = new Pav2MeterDetailsResponse();

    /**
     * Represents billing type.
     * Expected value is &#39;Pav2&#39;.
     * 
     */
    @Import(name="billingType", required=true)
    private String billingType;

    /**
     * @return Represents billing type.
     * Expected value is &#39;Pav2&#39;.
     * 
     */
    public String billingType() {
        return this.billingType;
    }

    /**
     * Charging type.
     * 
     */
    @Import(name="chargingType", required=true)
    private String chargingType;

    /**
     * @return Charging type.
     * 
     */
    public String chargingType() {
        return this.chargingType;
    }

    /**
     * Validation status of requested data center and transport.
     * 
     */
    @Import(name="meterGuid", required=true)
    private String meterGuid;

    /**
     * @return Validation status of requested data center and transport.
     * 
     */
    public String meterGuid() {
        return this.meterGuid;
    }

    /**
     * Billing unit applicable for Pav2 billing
     * 
     */
    @Import(name="multiplier", required=true)
    private Double multiplier;

    /**
     * @return Billing unit applicable for Pav2 billing
     * 
     */
    public Double multiplier() {
        return this.multiplier;
    }

    private Pav2MeterDetailsResponse() {}

    private Pav2MeterDetailsResponse(Pav2MeterDetailsResponse $) {
        this.billingType = $.billingType;
        this.chargingType = $.chargingType;
        this.meterGuid = $.meterGuid;
        this.multiplier = $.multiplier;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(Pav2MeterDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Pav2MeterDetailsResponse $;

        public Builder() {
            $ = new Pav2MeterDetailsResponse();
        }

        public Builder(Pav2MeterDetailsResponse defaults) {
            $ = new Pav2MeterDetailsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param billingType Represents billing type.
         * Expected value is &#39;Pav2&#39;.
         * 
         * @return builder
         * 
         */
        public Builder billingType(String billingType) {
            $.billingType = billingType;
            return this;
        }

        /**
         * @param chargingType Charging type.
         * 
         * @return builder
         * 
         */
        public Builder chargingType(String chargingType) {
            $.chargingType = chargingType;
            return this;
        }

        /**
         * @param meterGuid Validation status of requested data center and transport.
         * 
         * @return builder
         * 
         */
        public Builder meterGuid(String meterGuid) {
            $.meterGuid = meterGuid;
            return this;
        }

        /**
         * @param multiplier Billing unit applicable for Pav2 billing
         * 
         * @return builder
         * 
         */
        public Builder multiplier(Double multiplier) {
            $.multiplier = multiplier;
            return this;
        }

        public Pav2MeterDetailsResponse build() {
            $.billingType = Codegen.stringProp("billingType").arg($.billingType).require();
            $.chargingType = Objects.requireNonNull($.chargingType, "expected parameter 'chargingType' to be non-null");
            $.meterGuid = Objects.requireNonNull($.meterGuid, "expected parameter 'meterGuid' to be non-null");
            $.multiplier = Objects.requireNonNull($.multiplier, "expected parameter 'multiplier' to be non-null");
            return $;
        }
    }

}
