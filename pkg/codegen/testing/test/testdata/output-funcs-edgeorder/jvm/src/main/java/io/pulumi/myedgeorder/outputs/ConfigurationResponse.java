// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.myedgeorder.outputs;

import io.pulumi.core.annotations.CustomType;
import io.pulumi.myedgeorder.outputs.AvailabilityInformationResponse;
import io.pulumi.myedgeorder.outputs.CostInformationResponse;
import io.pulumi.myedgeorder.outputs.DescriptionResponse;
import io.pulumi.myedgeorder.outputs.DimensionsResponse;
import io.pulumi.myedgeorder.outputs.FilterablePropertyResponse;
import io.pulumi.myedgeorder.outputs.HierarchyInformationResponse;
import io.pulumi.myedgeorder.outputs.ImageInformationResponse;
import io.pulumi.myedgeorder.outputs.SpecificationResponse;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class ConfigurationResponse {
    /**
     * Availability information of the product system.
     * 
     */
    private final AvailabilityInformationResponse availabilityInformation;
    /**
     * Cost information for the product system.
     * 
     */
    private final CostInformationResponse costInformation;
    /**
     * Description related to the product system.
     * 
     */
    private final DescriptionResponse description;
    /**
     * Dimensions of the configuration
     * 
     */
    private final DimensionsResponse dimensions;
    /**
     * Display Name for the product system.
     * 
     */
    private final String displayName;
    /**
     * list of filters supported for a product
     * 
     */
    private final List<FilterablePropertyResponse> filterableProperties;
    /**
     * Hierarchy information of a product.
     * 
     */
    private final HierarchyInformationResponse hierarchyInformation;
    /**
     * Image information for the product system.
     * 
     */
    private final List<ImageInformationResponse> imageInformation;
    /**
     * Specifications of the configuration
     * 
     */
    private final List<SpecificationResponse> specifications;

    @CustomType.Constructor
    private ConfigurationResponse(
        @CustomType.Parameter("availabilityInformation") AvailabilityInformationResponse availabilityInformation,
        @CustomType.Parameter("costInformation") CostInformationResponse costInformation,
        @CustomType.Parameter("description") DescriptionResponse description,
        @CustomType.Parameter("dimensions") DimensionsResponse dimensions,
        @CustomType.Parameter("displayName") String displayName,
        @CustomType.Parameter("filterableProperties") List<FilterablePropertyResponse> filterableProperties,
        @CustomType.Parameter("hierarchyInformation") HierarchyInformationResponse hierarchyInformation,
        @CustomType.Parameter("imageInformation") List<ImageInformationResponse> imageInformation,
        @CustomType.Parameter("specifications") List<SpecificationResponse> specifications) {
        this.availabilityInformation = availabilityInformation;
        this.costInformation = costInformation;
        this.description = description;
        this.dimensions = dimensions;
        this.displayName = displayName;
        this.filterableProperties = filterableProperties;
        this.hierarchyInformation = hierarchyInformation;
        this.imageInformation = imageInformation;
        this.specifications = specifications;
    }

    /**
     * Availability information of the product system.
     * 
    */
    public AvailabilityInformationResponse getAvailabilityInformation() {
        return this.availabilityInformation;
    }
    /**
     * Cost information for the product system.
     * 
    */
    public CostInformationResponse getCostInformation() {
        return this.costInformation;
    }
    /**
     * Description related to the product system.
     * 
    */
    public DescriptionResponse getDescription() {
        return this.description;
    }
    /**
     * Dimensions of the configuration
     * 
    */
    public DimensionsResponse getDimensions() {
        return this.dimensions;
    }
    /**
     * Display Name for the product system.
     * 
    */
    public String getDisplayName() {
        return this.displayName;
    }
    /**
     * list of filters supported for a product
     * 
    */
    public List<FilterablePropertyResponse> getFilterableProperties() {
        return this.filterableProperties;
    }
    /**
     * Hierarchy information of a product.
     * 
    */
    public HierarchyInformationResponse getHierarchyInformation() {
        return this.hierarchyInformation;
    }
    /**
     * Image information for the product system.
     * 
    */
    public List<ImageInformationResponse> getImageInformation() {
        return this.imageInformation;
    }
    /**
     * Specifications of the configuration
     * 
    */
    public List<SpecificationResponse> getSpecifications() {
        return this.specifications;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AvailabilityInformationResponse availabilityInformation;
        private CostInformationResponse costInformation;
        private DescriptionResponse description;
        private DimensionsResponse dimensions;
        private String displayName;
        private List<FilterablePropertyResponse> filterableProperties;
        private HierarchyInformationResponse hierarchyInformation;
        private List<ImageInformationResponse> imageInformation;
        private List<SpecificationResponse> specifications;

        public Builder() {
    	      // Empty
        }

        public Builder(ConfigurationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityInformation = defaults.availabilityInformation;
    	      this.costInformation = defaults.costInformation;
    	      this.description = defaults.description;
    	      this.dimensions = defaults.dimensions;
    	      this.displayName = defaults.displayName;
    	      this.filterableProperties = defaults.filterableProperties;
    	      this.hierarchyInformation = defaults.hierarchyInformation;
    	      this.imageInformation = defaults.imageInformation;
    	      this.specifications = defaults.specifications;
        }

        public Builder availabilityInformation(AvailabilityInformationResponse availabilityInformation) {
            this.availabilityInformation = Objects.requireNonNull(availabilityInformation);
            return this;
        }
        public Builder costInformation(CostInformationResponse costInformation) {
            this.costInformation = Objects.requireNonNull(costInformation);
            return this;
        }
        public Builder description(DescriptionResponse description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        public Builder dimensions(DimensionsResponse dimensions) {
            this.dimensions = Objects.requireNonNull(dimensions);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder filterableProperties(List<FilterablePropertyResponse> filterableProperties) {
            this.filterableProperties = Objects.requireNonNull(filterableProperties);
            return this;
        }
        public Builder filterableProperties(FilterablePropertyResponse... filterableProperties) {
            return filterableProperties(List.of(filterableProperties));
        }
        public Builder hierarchyInformation(HierarchyInformationResponse hierarchyInformation) {
            this.hierarchyInformation = Objects.requireNonNull(hierarchyInformation);
            return this;
        }
        public Builder imageInformation(List<ImageInformationResponse> imageInformation) {
            this.imageInformation = Objects.requireNonNull(imageInformation);
            return this;
        }
        public Builder imageInformation(ImageInformationResponse... imageInformation) {
            return imageInformation(List.of(imageInformation));
        }
        public Builder specifications(List<SpecificationResponse> specifications) {
            this.specifications = Objects.requireNonNull(specifications);
            return this;
        }
        public Builder specifications(SpecificationResponse... specifications) {
            return specifications(List.of(specifications));
        }        public ConfigurationResponse build() {
            return new ConfigurationResponse(availabilityInformation, costInformation, description, dimensions, displayName, filterableProperties, hierarchyInformation, imageInformation, specifications);
        }
    }
}
