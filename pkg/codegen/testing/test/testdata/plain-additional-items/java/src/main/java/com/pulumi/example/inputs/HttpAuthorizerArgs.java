// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.example.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class HttpAuthorizerArgs extends com.pulumi.resources.ResourceArgs {

    public static final HttpAuthorizerArgs Empty = new HttpAuthorizerArgs();

    @Import(name="authorizerType", required=true)
    private Output<String> authorizerType;

    public Output<String> authorizerType() {
        return this.authorizerType;
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private HttpAuthorizerArgs() {}

    private HttpAuthorizerArgs(HttpAuthorizerArgs $) {
        this.authorizerType = $.authorizerType;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpAuthorizerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpAuthorizerArgs $;

        public Builder() {
            $ = new HttpAuthorizerArgs();
        }

        public Builder(HttpAuthorizerArgs defaults) {
            $ = new HttpAuthorizerArgs(Objects.requireNonNull(defaults));
        }

        public Builder authorizerType(Output<String> authorizerType) {
            $.authorizerType = authorizerType;
            return this;
        }

        public Builder authorizerType(String authorizerType) {
            return authorizerType(Output.of(authorizerType));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public HttpAuthorizerArgs build() {
            if ($.authorizerType == null) {
                throw new MissingRequiredPropertyException("HttpAuthorizerArgs", "authorizerType");
            }
            return $;
        }
    }

}
