package jvm

import (
	tmplt "text/template"
)

func Template(name string, text string, funcMap map[string]interface{}) *tmplt.Template {
	return tmplt.Must(tmplt.New(name).Funcs(funcMap).Parse(text))
}

type Functions map[string]interface{}

// nolint:lll
const jvmUtilitiesTemplateText = `// *** WARNING: this file was generated. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package {{ .PackageName }};

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.annotation.Nullable;
import io.pulumi.core.internal.Environment;
import io.pulumi.deployment.InvokeOptions;

public class {{.ClassName}} {

	public static Optional<String> getEnv(String... names) {
        for (var n : names) {
            var value = Environment.getEnvironmentVariable(n);
            if (value.isPresent()) {
                return value;
            }
        }
        return Optional.empty();
    }

	public static Optional<Boolean> getEnvBoolean(String... names) {
        for (var n : names) {
            var value = Environment.getBooleanEnvironmentVariable(n);
            if (value.isPresent()) {
                return value;
            }
        }
        return Optional.empty();
	}

	public static Optional<Integer> getEnvInteger(String... names) {
        for (var n : names) {
            var value = Environment.getIntegerEnvironmentVariable(n);
            if (value.isPresent()) {
                return value;
            }
        }
        return Optional.empty();
	}

	public static Optional<Double> getEnvDouble(String... names) {
        for (var n : names) {
            var value = Environment.getDoubleEnvironmentVariable(n);
            if (value.isPresent()) {
                return value;
            }
        }
        return Optional.empty();
	}

	// TODO: this probably should be done via a mutator on the InvokeOptions
	public static InvokeOptions withVersion(@Nullable InvokeOptions options) {
            if (options != null && options.getVersion().isPresent()) {
                return options;
            }
            return new InvokeOptions(
                options == null ? null : options.getParent().orElse(null),
                options == null ? null : options.getProvider().orElse(null),
                getVersion()
            );
        }

    private static final String version;
    public static String getVersion() {
        return version;
    }

    static {
        var resourceName = "io/pulumi/{{ .Name }}/version.txt";
        var versionFile = Utilities.class.getClassLoader().getResourceAsStream(resourceName);
        if (versionFile == null) {
            throw new IllegalStateException(
                    String.format("expected resource '%s' on Classpath, not found", resourceName)
            );
        }
        version = new BufferedReader(new InputStreamReader(versionFile))
                .lines()
                .collect(Collectors.joining("\n"))
                .trim();
    }
}
`

var jvmUtilitiesTemplate = Template("JavaUtilities", jvmUtilitiesTemplateText, Functions{})

type jvmUtilitiesTemplateContext struct {
	Name        string
	PackageName string
	ClassName   string
	Tool        string
}

// nolint:lll
const jvmBuildTemplateText = `// *** WARNING: this file was generated. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

plugins {
  id("java-library")
  id("maven-publish")
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

repositories {
  maven { // The google mirror is less flaky than mavenCentral()
      url("https://maven-central.storage-download.googleapis.com/maven2/")
  }
  mavenCentral()
  mavenLocal()
}

dependencies {
    implementation("io.pulumi:pulumi:3.6.0+")
    implementation("com.google.code.findbugs:jsr305:3.0.2")
    api("com.google.guava:guava:30.1-jre") // FIXME: do we really want to expose this dep?
    api("com.google.code.gson:gson:2.8.6") // make sure we don't clash with grpc deps

    def junitVersion = "5.7.2"
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    testImplementation("org.assertj:assertj-core:3.20.2")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.pulumi'
            artifactId = '{{ .Name }}'
            version = project.version

            from components.java
        }
        // TODO pom
    }
}
`

var jvmBuildTemplate = Template("JavaBuild", jvmBuildTemplateText, Functions{})

type jvmBuildTemplateContext struct {
	Name string
}

// nolint:lll
const jvmSettingsTemplateText = `// *** WARNING: this file was generated. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

pluginManagement {
  repositories {
    maven { // The google mirror is less flaky than mavenCentral()
      url("https://maven-central.storage-download.googleapis.com/maven2/")
    }
    gradlePluginPortal()
  }
}

rootProject.name = "{{ .PackageName }}"
include("lib")`

var jvmSettingsTemplate = Template("JavaSettings", jvmSettingsTemplateText, Functions{})

type jvmSettingsTemplateContext struct {
	PackageName string
}

const getterTemplateText = `{{ .Indent }}public {{ .GetterType }} {{ .GetterName }}() {
{{ .Indent }}    return {{ .ReturnStatement }};
{{ .Indent }}}`

var getterTemplate = Template("Getter", getterTemplateText, Functions{})

type getterTemplateContext struct {
	Indent          string
	GetterType      string
	GetterName      string
	ReturnStatement string
}

const builderSetterTemplateText = `{{ .Indent }}public {{ .SetterType }} {{ .SetterName }}({{ .PropertyType }} {{ .PropertyName }}) {
{{ .Indent }}    {{ .Assignment }};
{{ .Indent }}    return this;
{{ .Indent }}}`

var builderSetterTemplate = Template("BuilderSetter", builderSetterTemplateText, Functions{})

type builderSetterTemplateContext struct {
	Indent       string
	SetterType   string
	SetterName   string
	PropertyType string
	PropertyName string
	Assignment   string
}
