// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.plant.tree.v1.inputs;

import javax.annotation.Nullable;
import java.util.Objects;
import java.util.Optional;
import java.util.Map;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import io.pulumi.core.*;
import io.pulumi.core.internal.annotations.*;
import io.pulumi.plant.Utilities;


public final class RubberTreeArgs extends io.pulumi.resources.ResourceArgs {

    public static final RubberTreeArgs Empty = RubberTreeArgs.builder().build();

    @InputImport(name="container")
    private final @Nullable Input<io.pulumi.plant.inputs.ContainerArgs> container;

    public Input<io.pulumi.plant.inputs.ContainerArgs> getContainer() {
        return Input.ofNullable(this.container);
    }

    @InputImport(name="diameter", required=true)
    private final Input<io.pulumi.plant.tree.v1.enums.Diameter> diameter;

    public Input<io.pulumi.plant.tree.v1.enums.Diameter> getDiameter() {
        return this.diameter;
    }

    @InputImport(name="farm")
    private final @Nullable Input<Either<io.pulumi.plant.tree.v1.enums.Farm,String>> farm;

    public Input<Either<io.pulumi.plant.tree.v1.enums.Farm,String>> getFarm() {
        return Input.ofNullable(this.farm);
    }

    @InputImport(name="size")
    private final @Nullable Input<io.pulumi.plant.tree.v1.enums.TreeSize> size;

    public Input<io.pulumi.plant.tree.v1.enums.TreeSize> getSize() {
        return Input.ofNullable(this.size);
    }

    @InputImport(name="type", required=true)
    private final Input<io.pulumi.plant.tree.v1.enums.RubberTreeVariety> type;

    public Input<io.pulumi.plant.tree.v1.enums.RubberTreeVariety> getType() {
        return this.type;
    }

    public RubberTreeArgs(
        @Nullable Input<io.pulumi.plant.inputs.ContainerArgs> container,
        Input<io.pulumi.plant.tree.v1.enums.Diameter> diameter,
        @Nullable Input<Either<io.pulumi.plant.tree.v1.enums.Farm,String>> farm,
        @Nullable Input<io.pulumi.plant.tree.v1.enums.TreeSize> size,
        Input<io.pulumi.plant.tree.v1.enums.RubberTreeVariety> type) {
        this.container = container;
        this.diameter = diameter == null ? Input.of(io.pulumi.plant.tree.v1.enums.Diameter.Sixinch) : diameter;
        this.farm = farm == null ? Input.ofUnion("(unknown)", io.pulumi.plant.tree.v1.enums.Farm.class, String.class) : farm;
        this.size = size == null ? Input.ofNullable(io.pulumi.plant.tree.v1.enums.TreeSize.Medium) : size;
        this.type = type == null ? Input.of(io.pulumi.plant.tree.v1.enums.RubberTreeVariety.Burgundy) : type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RubberTreeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<io.pulumi.plant.inputs.ContainerArgs> container;
        private Input<io.pulumi.plant.tree.v1.enums.Diameter> diameter;
        private @Nullable Input<Either<io.pulumi.plant.tree.v1.enums.Farm,String>> farm;
        private @Nullable Input<io.pulumi.plant.tree.v1.enums.TreeSize> size;
        private Input<io.pulumi.plant.tree.v1.enums.RubberTreeVariety> type;

        public Builder() {
    	      // Empty
        }

        public Builder(RubberTreeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.container = defaults.container;
    	      this.diameter = defaults.diameter;
    	      this.farm = defaults.farm;
    	      this.size = defaults.size;
    	      this.type = defaults.type;
        }

        public Builder setContainer(@Nullable Input<io.pulumi.plant.inputs.ContainerArgs> container) {
            this.container = container;
            return this;
        }

        public Builder setContainer(@Nullable io.pulumi.plant.inputs.ContainerArgs container) {
            this.container = Input.ofNullable(container);
            return this;
        }

        public Builder setDiameter(Input<io.pulumi.plant.tree.v1.enums.Diameter> diameter) {
            this.diameter = Objects.requireNonNull(diameter);
            return this;
        }

        public Builder setDiameter(io.pulumi.plant.tree.v1.enums.Diameter diameter) {
            this.diameter = Input.of(Objects.requireNonNull(diameter));
            return this;
        }

        public Builder setFarm(@Nullable Input<Either<io.pulumi.plant.tree.v1.enums.Farm,String>> farm) {
            this.farm = farm;
            return this;
        }

        public Builder setFarm(@Nullable Either<io.pulumi.plant.tree.v1.enums.Farm,String> farm) {
            this.farm = Input.ofNullable(farm);
            return this;
        }

        public Builder setSize(@Nullable Input<io.pulumi.plant.tree.v1.enums.TreeSize> size) {
            this.size = size;
            return this;
        }

        public Builder setSize(@Nullable io.pulumi.plant.tree.v1.enums.TreeSize size) {
            this.size = Input.ofNullable(size);
            return this;
        }

        public Builder setType(Input<io.pulumi.plant.tree.v1.enums.RubberTreeVariety> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }

        public Builder setType(io.pulumi.plant.tree.v1.enums.RubberTreeVariety type) {
            this.type = Input.of(Objects.requireNonNull(type));
            return this;
        }

        public RubberTreeArgs build() {
            return new RubberTreeArgs(container, diameter, farm, size, type);
        }
    }
}
