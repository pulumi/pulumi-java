// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.example;

import javax.annotation.Nullable;
import java.util.Objects;
import java.util.Optional;
import java.util.Map;
import java.util.List;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableList;
import java.util.concurrent.CompletableFuture;
import io.pulumi.core.*;
import io.pulumi.core.internal.annotations.*;

public final class Inputs {

    public static final class FooArgs extends io.pulumi.resources.ResourceArgs {

        public static final FooArgs Empty = FooArgs.builder().build();

        @InputImport(name="a", required=true)
        private Boolean a;

        public Boolean getA() {
            return this.a;
        }

        @InputImport(name="b")
        private @Nullable Boolean b;

        public Optional<Boolean> getB() {
            return Optional.ofNullable(this.b);
        }

        @InputImport(name="c", required=true)
        private Integer c;

        public Integer getC() {
            return this.c;
        }

        @InputImport(name="d")
        private @Nullable Integer d;

        public Optional<Integer> getD() {
            return Optional.ofNullable(this.d);
        }

        @InputImport(name="e", required=true)
        private String e;

        public String getE() {
            return this.e;
        }

        @InputImport(name="f")
        private @Nullable String f;

        public Optional<String> getF() {
            return Optional.ofNullable(this.f);
        }

        public FooArgs(
            Boolean a,
            @Nullable Boolean b,
            Integer c,
            @Nullable Integer d,
            String e,
            @Nullable String f) {
            this.a = Objects.requireNonNull(a);
            this.b = b;
            this.c = Objects.requireNonNull(c);
            this.d = d;
            this.e = Objects.requireNonNull(e);
            this.f = f;
        }

        public static Builder builder() {
            return new Builder();
        }

        public static final class Builder {
            private Boolean a;
            public Builder setA(Boolean a) {
                this.a = a;
                return this;
            }
            private @Nullable Boolean b;
            public Builder setB(@Nullable Boolean b) {
                this.b = Objects.requireNonNull(b);
                return this;
            }
            private Integer c;
            public Builder setC(Integer c) {
                this.c = c;
                return this;
            }
            private @Nullable Integer d;
            public Builder setD(@Nullable Integer d) {
                this.d = Objects.requireNonNull(d);
                return this;
            }
            private String e;
            public Builder setE(String e) {
                this.e = e;
                return this;
            }
            private @Nullable String f;
            public Builder setF(@Nullable String f) {
                this.f = Objects.requireNonNull(f);
                return this;
            }
            public FooArgs build() {
                return new FooArgs(
                    this.a,
                    this.b,
                    this.c,
                    this.d,
                    this.e,
                    this.f
                );
            }
        }
    }

    public static final class Foo extends io.pulumi.resources.InvokeArgs {

        public static final Foo Empty = Foo.builder().build();

        @InputImport(name="a", required=true)
        private Boolean a;

        public Boolean getA() {
            return this.a;
        }

        @InputImport(name="b")
        private @Nullable Boolean b;

        public Optional<Boolean> getB() {
            return Optional.ofNullable(this.b);
        }

        @InputImport(name="c", required=true)
        private Integer c;

        public Integer getC() {
            return this.c;
        }

        @InputImport(name="d")
        private @Nullable Integer d;

        public Optional<Integer> getD() {
            return Optional.ofNullable(this.d);
        }

        @InputImport(name="e", required=true)
        private String e;

        public String getE() {
            return this.e;
        }

        @InputImport(name="f")
        private @Nullable String f;

        public Optional<String> getF() {
            return Optional.ofNullable(this.f);
        }

        public Foo(
            Boolean a,
            @Nullable Boolean b,
            Integer c,
            @Nullable Integer d,
            String e,
            @Nullable String f) {
            this.a = Objects.requireNonNull(a);
            this.b = b;
            this.c = Objects.requireNonNull(c);
            this.d = d;
            this.e = Objects.requireNonNull(e);
            this.f = f;
        }

        public static Builder builder() {
            return new Builder();
        }

        public static final class Builder {
            private Boolean a;
            public Builder setA(Boolean a) {
                this.a = a;
                return this;
            }
            private @Nullable Boolean b;
            public Builder setB(@Nullable Boolean b) {
                this.b = Objects.requireNonNull(b);
                return this;
            }
            private Integer c;
            public Builder setC(Integer c) {
                this.c = c;
                return this;
            }
            private @Nullable Integer d;
            public Builder setD(@Nullable Integer d) {
                this.d = Objects.requireNonNull(d);
                return this;
            }
            private String e;
            public Builder setE(String e) {
                this.e = e;
                return this;
            }
            private @Nullable String f;
            public Builder setF(@Nullable String f) {
                this.f = Objects.requireNonNull(f);
                return this;
            }
            public Foo build() {
                return new Foo(
                    this.a,
                    this.b,
                    this.c,
                    this.d,
                    this.e,
                    this.f
                );
            }
        }
    }
}
