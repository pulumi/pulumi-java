// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.config;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    @Import(name="pluginDownloadURL")
    private @Nullable Output<String> pluginDownloadURL;

    public Optional<Output<String>> pluginDownloadURL() {
        return Optional.ofNullable(this.pluginDownloadURL);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.name = $.name;
        this.pluginDownloadURL = $.pluginDownloadURL;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder pluginDownloadURL(@Nullable Output<String> pluginDownloadURL) {
            $.pluginDownloadURL = pluginDownloadURL;
            return this;
        }

        public Builder pluginDownloadURL(String pluginDownloadURL) {
            return pluginDownloadURL(Output.of(pluginDownloadURL));
        }

        public ProviderArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ProviderArgs", "name");
            }
            return $;
        }
    }

}
