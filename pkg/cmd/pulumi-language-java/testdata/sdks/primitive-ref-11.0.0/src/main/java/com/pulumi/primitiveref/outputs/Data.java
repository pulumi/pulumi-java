// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.primitiveref.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class Data {
    private List<Boolean> boolArray;
    private Boolean boolean_;
    private Double float_;
    private Integer integer;
    private String string;
    private Map<String,String> stringMap;

    private Data() {}
    public List<Boolean> boolArray() {
        return this.boolArray;
    }
    public Boolean boolean_() {
        return this.boolean_;
    }
    public Double float_() {
        return this.float_;
    }
    public Integer integer() {
        return this.integer;
    }
    public String string() {
        return this.string;
    }
    public Map<String,String> stringMap() {
        return this.stringMap;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(Data defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<Boolean> boolArray;
        private Boolean boolean_;
        private Double float_;
        private Integer integer;
        private String string;
        private Map<String,String> stringMap;
        public Builder() {}
        public Builder(Data defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.boolArray = defaults.boolArray;
    	      this.boolean_ = defaults.boolean_;
    	      this.float_ = defaults.float_;
    	      this.integer = defaults.integer;
    	      this.string = defaults.string;
    	      this.stringMap = defaults.stringMap;
        }

        @CustomType.Setter
        public Builder boolArray(List<Boolean> boolArray) {
            if (boolArray == null) {
              throw new MissingRequiredPropertyException("Data", "boolArray");
            }
            this.boolArray = boolArray;
            return this;
        }
        public Builder boolArray(Boolean... boolArray) {
            return boolArray(List.of(boolArray));
        }
        @CustomType.Setter("boolean")
        public Builder boolean_(Boolean boolean_) {
            if (boolean_ == null) {
              throw new MissingRequiredPropertyException("Data", "boolean_");
            }
            this.boolean_ = boolean_;
            return this;
        }
        @CustomType.Setter("float")
        public Builder float_(Double float_) {
            if (float_ == null) {
              throw new MissingRequiredPropertyException("Data", "float_");
            }
            this.float_ = float_;
            return this;
        }
        @CustomType.Setter
        public Builder integer(Integer integer) {
            if (integer == null) {
              throw new MissingRequiredPropertyException("Data", "integer");
            }
            this.integer = integer;
            return this;
        }
        @CustomType.Setter
        public Builder string(String string) {
            if (string == null) {
              throw new MissingRequiredPropertyException("Data", "string");
            }
            this.string = string;
            return this;
        }
        @CustomType.Setter
        public Builder stringMap(Map<String,String> stringMap) {
            if (stringMap == null) {
              throw new MissingRequiredPropertyException("Data", "stringMap");
            }
            this.stringMap = stringMap;
            return this;
        }
        public Data build() {
            final var _resultValue = new Data();
            _resultValue.boolArray = boolArray;
            _resultValue.boolean_ = boolean_;
            _resultValue.float_ = float_;
            _resultValue.integer = integer;
            _resultValue.string = string;
            _resultValue.stringMap = stringMap;
            return _resultValue;
        }
    }
}
